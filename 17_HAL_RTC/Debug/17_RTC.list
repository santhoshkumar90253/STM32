
17_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004a38  08004a38  00005a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b20  08004b20  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004b28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08004b90  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004b90  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c149  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c14  00000000  00000000  000121e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00013df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fb  00000000  00000000  00014870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ab  00000000  00000000  0001506b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c736  00000000  00000000  0003c316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef6f5  00000000  00000000  00048a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138141  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  00138184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a20 	.word	0x08004a20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004a20 	.word	0x08004a20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f002 fd4d 	bl	800304c <HAL_UART_Transmit>
  return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000a8 	.word	0x200000a8

080005c0 <main>:

int main(void)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	RTC_TimeTypeDef sTime = {0};  // Structure to store RTC time
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};  // Structure to store RTC date
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fb5c 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f85a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f92c 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f8fa 	bl	80007dc <MX_USART2_UART_Init>
  MX_RTC_Init();
 80005e8:	f000 f89c 	bl	8000724 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  if ((RTC->ISR & RTC_ISR_INITS) == 0)
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <main+0xc4>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d120      	bne.n	800063a <main+0x7a>
    {
      printf("RTC not yet initialized. Setting time and date...\r\n");
 80005f8:	4823      	ldr	r0, [pc, #140]	@ (8000688 <main+0xc8>)
 80005fa:	f003 fbaf 	bl	8003d5c <puts>
     // Set default time: 11:15:30
      sTime.Hours = 11;
 80005fe:	230b      	movs	r3, #11
 8000600:	713b      	strb	r3, [r7, #4]
      sTime.Minutes = 15;
 8000602:	230f      	movs	r3, #15
 8000604:	717b      	strb	r3, [r7, #5]
      sTime.Seconds = 30;
 8000606:	231e      	movs	r3, #30
 8000608:	71bb      	strb	r3, [r7, #6]
      sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
      sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
      HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	481c      	ldr	r0, [pc, #112]	@ (800068c <main+0xcc>)
 800061a:	f002 fa2b 	bl	8002a74 <HAL_RTC_SetTime>
      // Set default date: Friday, 29-Jul-2025
      sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800061e:	2305      	movs	r3, #5
 8000620:	703b      	strb	r3, [r7, #0]
      sDate.Month = RTC_MONTH_JULY;
 8000622:	2307      	movs	r3, #7
 8000624:	707b      	strb	r3, [r7, #1]
      sDate.Date = 29;
 8000626:	231d      	movs	r3, #29
 8000628:	70bb      	strb	r3, [r7, #2]
      sDate.Year = 25;
 800062a:	2319      	movs	r3, #25
 800062c:	70fb      	strb	r3, [r7, #3]
      HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	4815      	ldr	r0, [pc, #84]	@ (800068c <main+0xcc>)
 8000636:	f002 fb16 	bl	8002c66 <HAL_RTC_SetDate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read current RTC time
	   HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	4619      	mov	r1, r3
 8000640:	4812      	ldr	r0, [pc, #72]	@ (800068c <main+0xcc>)
 8000642:	f002 fab4 	bl	8002bae <HAL_RTC_GetTime>
	   // Read current RTC date (must follow GetTime)
	   HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	480f      	ldr	r0, [pc, #60]	@ (800068c <main+0xcc>)
 800064e:	f002 fb91 	bl	8002d74 <HAL_RTC_GetDate>

	   // Print current time and date via UART
	   printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000652:	793b      	ldrb	r3, [r7, #4]
	   printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000654:	4618      	mov	r0, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000656:	797b      	ldrb	r3, [r7, #5]
	   printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000658:	461c      	mov	r4, r3
			  sTime.Hours, sTime.Minutes, sTime.Seconds,
 800065a:	79bb      	ldrb	r3, [r7, #6]
	   printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 800065c:	461d      	mov	r5, r3
			  sDate.Date, sDate.Month, sDate.Year);
 800065e:	78bb      	ldrb	r3, [r7, #2]
 8000660:	787a      	ldrb	r2, [r7, #1]
 8000662:	78f9      	ldrb	r1, [r7, #3]
	   printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000664:	9102      	str	r1, [sp, #8]
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	462b      	mov	r3, r5
 800066c:	4622      	mov	r2, r4
 800066e:	4601      	mov	r1, r0
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <main+0xd0>)
 8000672:	f003 fb0b 	bl	8003c8c <iprintf>

	   HAL_Delay(1000); // Wait 1 second before next reading
 8000676:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067a:	f000 fb87 	bl	8000d8c <HAL_Delay>
	   HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800067e:	bf00      	nop
 8000680:	e7db      	b.n	800063a <main+0x7a>
 8000682:	bf00      	nop
 8000684:	40002800 	.word	0x40002800
 8000688:	08004a38 	.word	0x08004a38
 800068c:	20000084 	.word	0x20000084
 8000690:	08004a6c 	.word	0x08004a6c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	@ 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fc3a 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ba:	f000 fe41 	bl	8001340 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f920 	bl	8000908 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c8:	230a      	movs	r3, #10
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006da:	2300      	movs	r3, #0
 80006dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fe82 	bl	80013ec <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ee:	f000 f90b 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f6:	2301      	movs	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa4a 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000716:	f000 f8f7 	bl	8000908 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3758      	adds	r7, #88	@ 0x58
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_RTC_Init+0xb0>)
 800073e:	4a26      	ldr	r2, [pc, #152]	@ (80007d8 <MX_RTC_Init+0xb4>)
 8000740:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_RTC_Init+0xb0>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_RTC_Init+0xb0>)
 800074a:	227f      	movs	r2, #127	@ 0x7f
 800074c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_RTC_Init+0xb0>)
 8000750:	22ff      	movs	r2, #255	@ 0xff
 8000752:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_RTC_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_RTC_Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_RTC_Init+0xb0>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000766:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_RTC_Init+0xb0>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800076c:	4819      	ldr	r0, [pc, #100]	@ (80007d4 <MX_RTC_Init+0xb0>)
 800076e:	f002 f8f9 	bl	8002964 <HAL_RTC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f8c6 	bl	8000908 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800077c:	2300      	movs	r3, #0
 800077e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000780:	2300      	movs	r3, #0
 8000782:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000784:	2300      	movs	r3, #0
 8000786:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2201      	movs	r2, #1
 8000794:	4619      	mov	r1, r3
 8000796:	480f      	ldr	r0, [pc, #60]	@ (80007d4 <MX_RTC_Init+0xb0>)
 8000798:	f002 f96c 	bl	8002a74 <HAL_RTC_SetTime>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80007a2:	f000 f8b1 	bl	8000908 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007a6:	2301      	movs	r3, #1
 80007a8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007aa:	2301      	movs	r3, #1
 80007ac:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	2201      	movs	r2, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_RTC_Init+0xb0>)
 80007be:	f002 fa52 	bl	8002c66 <HAL_RTC_SetDate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80007c8:	f000 f89e 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000084 	.word	0x20000084
 80007d8:	40002800 	.word	0x40002800

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f002 fbc6 	bl	8002fb0 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 f86d 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000a8 	.word	0x200000a8
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a2a      	ldr	r2, [pc, #168]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a24      	ldr	r2, [pc, #144]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <MX_GPIO_Init+0xc4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f000 fd1b 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	@ (8000904 <MX_GPIO_Init+0xc8>)
 80008d6:	f000 fb63 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008da:	2320      	movs	r3, #32
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f4:	f000 fb54 	bl	8000fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	@ 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	@ 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0a4      	sub	sp, #144	@ 0x90
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2288      	movs	r2, #136	@ 0x88
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fad5 	bl	8003f1c <memset>
  if(hrtc->Instance==RTC)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a10      	ldr	r2, [pc, #64]	@ (80009b8 <HAL_RTC_MspInit+0x5c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d118      	bne.n	80009ae <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800097c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fb2c 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800099a:	f7ff ffb5 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <HAL_RTC_MspInit+0x60>)
 80009a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <HAL_RTC_MspInit+0x60>)
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80009ae:	bf00      	nop
 80009b0:	3790      	adds	r7, #144	@ 0x90
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40002800 	.word	0x40002800
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0ac      	sub	sp, #176	@ 0xb0
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2288      	movs	r2, #136	@ 0x88
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fa9b 	bl	8003f1c <memset>
  if(huart->Instance==USART2)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <HAL_UART_MspInit+0xb0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d13b      	bne.n	8000a68 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 faf5 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f7ff ff7e 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a10:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_UART_MspInit+0xb4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a54:	2307      	movs	r3, #7
 8000a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a64:	f000 fa9c 	bl	8000fa0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a68:	bf00      	nop
 8000a6a:	37b0      	adds	r7, #176	@ 0xb0
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40004400 	.word	0x40004400
 8000a74:	40021000 	.word	0x40021000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f93d 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e00a      	b.n	8000afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae8:	f3af 8000 	nop.w
 8000aec:	4601      	mov	r1, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	60ba      	str	r2, [r7, #8]
 8000af4:	b2ca      	uxtb	r2, r1
 8000af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dbf0      	blt.n	8000ae8 <_read+0x12>
  }

  return len;
 8000b06:	687b      	ldr	r3, [r7, #4]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e009      	b.n	8000b36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	60ba      	str	r2, [r7, #8]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fd36 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbf1      	blt.n	8000b22 <_write+0x12>
  }
  return len;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_close>:

int _close(int file)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b70:	605a      	str	r2, [r3, #4]
  return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_isatty>:

int _isatty(int file)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f003 f9ea 	bl	8003fb8 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20018000 	.word	0x20018000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000130 	.word	0x20000130
 8000c18:	20000288 	.word	0x20000288

08000c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopForever+0xe>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopForever+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f003 f9a9 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c72:	f7ff fca5 	bl	80005c0 <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c84:	08004b28 	.word	0x08004b28
  ldr r2, =_sbss
 8000c88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c8c:	20000284 	.word	0x20000284

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_Init+0x3c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_Init+0x3c>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 f944 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f80f 	bl	8000cd4 <HAL_InitTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	e001      	b.n	8000cc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc2:	f7ff fe27 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_InitTick+0x70>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f941 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d809      	bhi.n	8000d24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f919 	bl	8000f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_InitTick+0x74>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000134 	.word	0x20000134

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000134 	.word	0x20000134

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff47 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff5c 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffb0 	bl	8000ef4 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e17f      	b.n	80012b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 8171 	beq.w	80012aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x40>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	f003 0201 	and.w	r2, r3, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b03      	cmp	r3, #3
 800104c:	d118      	bne.n	8001080 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	6939      	ldr	r1, [r7, #16]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80ac 	beq.w	80012aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b5f      	ldr	r3, [pc, #380]	@ (80012d0 <HAL_GPIO_Init+0x330>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001156:	4a5e      	ldr	r2, [pc, #376]	@ (80012d0 <HAL_GPIO_Init+0x330>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6613      	str	r3, [r2, #96]	@ 0x60
 800115e:	4b5c      	ldr	r3, [pc, #368]	@ (80012d0 <HAL_GPIO_Init+0x330>)
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116a:	4a5a      	ldr	r2, [pc, #360]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x242>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4f      	ldr	r2, [pc, #316]	@ (80012d8 <HAL_GPIO_Init+0x338>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x23e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4e      	ldr	r2, [pc, #312]	@ (80012dc <HAL_GPIO_Init+0x33c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x23a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4d      	ldr	r2, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x340>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x236>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x344>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x232>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4b      	ldr	r2, [pc, #300]	@ (80012e8 <HAL_GPIO_Init+0x348>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x22e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <HAL_GPIO_Init+0x34c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x22a>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e00c      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011ca:	2307      	movs	r3, #7
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x244>
 80011e2:	2300      	movs	r3, #0
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f4:	4937      	ldr	r1, [pc, #220]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001226:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122c:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001250:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800127a:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a4:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <HAL_GPIO_Init+0x350>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f47f ae78 	bne.w	8000fb0 <HAL_GPIO_Init+0x10>
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	48001000 	.word	0x48001000
 80012e8:	48001400 	.word	0x48001400
 80012ec:	48001800 	.word	0x48001800
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e002      	b.n	8001318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <HAL_PWREx_GetVoltageRange+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000

08001340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800134e:	d130      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800135c:	d038      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001366:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2232      	movs	r2, #50	@ 0x32
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a1b      	ldr	r2, [pc, #108]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001384:	e002      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3b01      	subs	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001398:	d102      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f2      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ac:	d110      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e00f      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013be:	d007      	beq.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013c8:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40007000 	.word	0x40007000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e3ca      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fe:	4b97      	ldr	r3, [pc, #604]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001408:	4b94      	ldr	r3, [pc, #592]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80e4 	beq.w	80015e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_RCC_OscConfig+0x4a>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	f040 808b 	bne.w	8001544 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 8087 	bne.w	8001544 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001436:	4b89      	ldr	r3, [pc, #548]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x62>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e3a2      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4b82      	ldr	r3, [pc, #520]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_RCC_OscConfig+0x7c>
 800145e:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001466:	e005      	b.n	8001474 <HAL_RCC_OscConfig+0x88>
 8001468:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001474:	4293      	cmp	r3, r2
 8001476:	d223      	bcs.n	80014c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fd55 	bl	8001f2c <RCC_SetFlashLatencyFromMSIRange>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e383      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148c:	4b73      	ldr	r3, [pc, #460]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a72      	ldr	r2, [pc, #456]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b70      	ldr	r3, [pc, #448]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	496d      	ldr	r1, [pc, #436]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014aa:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4968      	ldr	r1, [pc, #416]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e025      	b.n	800150c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b66      	ldr	r3, [pc, #408]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b63      	ldr	r3, [pc, #396]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4960      	ldr	r1, [pc, #384]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b5f      	ldr	r3, [pc, #380]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	495b      	ldr	r1, [pc, #364]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fd15 	bl	8001f2c <RCC_SetFlashLatencyFromMSIRange>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e343      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150c:	f000 fc4a 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b52      	ldr	r3, [pc, #328]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	4950      	ldr	r1, [pc, #320]	@ (8001660 <HAL_RCC_OscConfig+0x274>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a4e      	ldr	r2, [pc, #312]	@ (8001664 <HAL_RCC_OscConfig+0x278>)
 800152a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800152c:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <HAL_RCC_OscConfig+0x27c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fbcf 	bl	8000cd4 <HAL_InitTick>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d052      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	e327      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d032      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154c:	4b43      	ldr	r3, [pc, #268]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a42      	ldr	r2, [pc, #264]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001558:	f7ff fc0c 	bl	8000d74 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fc08 	bl	8000d74 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e310      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001572:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4931      	ldr	r1, [pc, #196]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159c:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	492c      	ldr	r1, [pc, #176]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a29      	ldr	r2, [pc, #164]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015be:	f7ff fbd9 	bl	8000d74 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c6:	f7ff fbd5 	bl	8000d74 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e2dd      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d8:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x1da>
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d074      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x21a>
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	d10e      	bne.n	800161e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d064      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f0>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d160      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e2ba      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x24a>
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e026      	b.n	8001684 <HAL_RCC_OscConfig+0x298>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800163e:	d115      	bne.n	800166c <HAL_RCC_OscConfig+0x280>
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a05      	ldr	r2, [pc, #20]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a02      	ldr	r2, [pc, #8]	@ (800165c <HAL_RCC_OscConfig+0x270>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e014      	b.n	8001684 <HAL_RCC_OscConfig+0x298>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	08004a9c 	.word	0x08004a9c
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004
 800166c:	4ba0      	ldr	r3, [pc, #640]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a9f      	ldr	r2, [pc, #636]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b9d      	ldr	r3, [pc, #628]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a9c      	ldr	r2, [pc, #624]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb72 	bl	8000d74 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fb6e 	bl	8000d74 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e276      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4b92      	ldr	r3, [pc, #584]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x2a8>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb5e 	bl	8000d74 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fb5a 	bl	8000d74 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e262      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d0>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d060      	beq.n	80017ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x310>
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d119      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b7c      	ldr	r3, [pc, #496]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e23f      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b76      	ldr	r3, [pc, #472]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4973      	ldr	r1, [pc, #460]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	e040      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b6f      	ldr	r3, [pc, #444]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fb19 	bl	8000d74 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fb15 	bl	8000d74 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e21d      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	4b65      	ldr	r3, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b62      	ldr	r3, [pc, #392]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	495f      	ldr	r1, [pc, #380]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b5d      	ldr	r3, [pc, #372]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a5c      	ldr	r2, [pc, #368]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff faf5 	bl	8000d74 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff faf1 	bl	8000d74 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1f9      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03c      	beq.n	8001832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c6:	4a4a      	ldr	r2, [pc, #296]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fad0 	bl	8000d74 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d8:	f7ff facc 	bl	8000d74 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1d4      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ef      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	e01b      	b.n	8001832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001800:	4a3b      	ldr	r2, [pc, #236]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fab3 	bl	8000d74 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff faaf 	bl	8000d74 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1b7      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ef      	bne.n	8001812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80a6 	beq.w	800198c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10d      	bne.n	800186c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6593      	str	r3, [r2, #88]	@ 0x58
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001868:	2301      	movs	r3, #1
 800186a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d118      	bne.n	80018aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001884:	f7ff fa76 	bl	8000d74 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7ff fa72 	bl	8000d74 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e17a      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_RCC_OscConfig+0x508>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4d8>
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c2:	e029      	b.n	8001918 <HAL_RCC_OscConfig+0x52c>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d115      	bne.n	80018f8 <HAL_RCC_OscConfig+0x50c>
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e2:	4a03      	ldr	r2, [pc, #12]	@ (80018f0 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ec:	e014      	b.n	8001918 <HAL_RCC_OscConfig+0x52c>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	4a9b      	ldr	r2, [pc, #620]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001908:	4b98      	ldr	r3, [pc, #608]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190e:	4a97      	ldr	r2, [pc, #604]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d016      	beq.n	800194e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fa28 	bl	8000d74 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff fa24 	bl	8000d74 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e12a      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ed      	beq.n	8001928 <HAL_RCC_OscConfig+0x53c>
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fa11 	bl	8000d74 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff fa0d 	bl	8000d74 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e113      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ed      	bne.n	8001956 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b7a      	ldr	r3, [pc, #488]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	4a79      	ldr	r2, [pc, #484]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80fe 	beq.w	8001b92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 80d0 	bne.w	8001b40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019a0:	4b72      	ldr	r3, [pc, #456]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d130      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	3b01      	subs	r3, #1
 80019c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d127      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d11f      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019e0:	2a07      	cmp	r2, #7
 80019e2:	bf14      	ite	ne
 80019e4:	2201      	movne	r2, #1
 80019e6:	2200      	moveq	r2, #0
 80019e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d06e      	beq.n	8001af4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d069      	beq.n	8001af0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a1c:	4b53      	ldr	r3, [pc, #332]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a28:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0ad      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a38:	4b4c      	ldr	r3, [pc, #304]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a44:	f7ff f996 	bl	8000d74 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f992 	bl	8000d74 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e09a      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5e:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6a:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <HAL_RCC_OscConfig+0x784>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a84:	0212      	lsls	r2, r2, #8
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a8c:	0852      	lsrs	r2, r2, #1
 8001a8e:	3a01      	subs	r2, #1
 8001a90:	0552      	lsls	r2, r2, #21
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a98:	0852      	lsrs	r2, r2, #1
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	0652      	lsls	r2, r2, #25
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001aa4:	0912      	lsrs	r2, r2, #4
 8001aa6:	0452      	lsls	r2, r2, #17
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	4930      	ldr	r1, [pc, #192]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac8:	f7ff f954 	bl	8000d74 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f950 	bl	8000d74 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e058      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aee:	e050      	b.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e04f      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d148      	bne.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b18:	f7ff f92c 	bl	8000d74 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f928 	bl	8000d74 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e030      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x734>
 8001b3e:	e028      	b.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a08      	ldr	r2, [pc, #32]	@ (8001b6c <HAL_RCC_OscConfig+0x780>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f90f 	bl	8000d74 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	e00c      	b.n	8001b74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f90b 	bl	8000d74 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d905      	bls.n	8001b74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e013      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_RCC_OscConfig+0x7b0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ec      	bne.n	8001b5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_RCC_OscConfig+0x7b0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	4905      	ldr	r1, [pc, #20]	@ (8001b9c <HAL_RCC_OscConfig+0x7b0>)
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_RCC_OscConfig+0x7b4>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e001      	b.n	8001b92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	feeefffc 	.word	0xfeeefffc

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0e7      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b75      	ldr	r3, [pc, #468]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b72      	ldr	r3, [pc, #456]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4970      	ldr	r1, [pc, #448]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0cf      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d908      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4960      	ldr	r1, [pc, #384]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d04c      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d121      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0a6      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c42:	4b54      	ldr	r3, [pc, #336]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e09a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e08e      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e086      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b46      	ldr	r3, [pc, #280]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4943      	ldr	r1, [pc, #268]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f872 	bl	8000d74 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff f86e 	bl	8000d74 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e06e      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d208      	bcs.n	8001cea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	492b      	ldr	r1, [pc, #172]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d210      	bcs.n	8001d1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 0207 	bic.w	r2, r3, #7
 8001d00:	4923      	ldr	r1, [pc, #140]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d08:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e036      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4918      	ldr	r1, [pc, #96]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4910      	ldr	r1, [pc, #64]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d58:	f000 f824 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	490b      	ldr	r1, [pc, #44]	@ (8001d98 <HAL_RCC_ClockConfig+0x1f4>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ffa9 	bl	8000cd4 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d86:	7afb      	ldrb	r3, [r7, #11]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08004a9c 	.word	0x08004a9c
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d121      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d11e      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001de4:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e005      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e00:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	e004      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e28:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d134      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d003      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xac>
 8001e48:	e005      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4c:	617b      	str	r3, [r7, #20]
      break;
 8001e4e:	e005      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e52:	617b      	str	r3, [r7, #20]
      break;
 8001e54:	e002      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	617b      	str	r3, [r7, #20]
      break;
 8001e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	3301      	adds	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	fb03 f202 	mul.w	r2, r3, r2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0e5b      	lsrs	r3, r3, #25
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08004ab4 	.word	0x08004ab4
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4904      	ldr	r1, [pc, #16]	@ (8001efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08004aac 	.word	0x08004aac

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f04:	f7ff ffda 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4904      	ldr	r1, [pc, #16]	@ (8001f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08004aac 	.word	0x08004aac

08001f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f38:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f44:	f7ff f9ee 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001f48:	6178      	str	r0, [r7, #20]
 8001f4a:	e014      	b.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f64:	f7ff f9de 	bl	8001324 <HAL_PWREx_GetVoltageRange>
 8001f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f7c:	d10b      	bne.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b80      	cmp	r3, #128	@ 0x80
 8001f82:	d919      	bls.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f88:	d902      	bls.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e013      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e010      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d902      	bls.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e00a      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	@ 0x80
 8001fa6:	d102      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e004      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b70      	cmp	r3, #112	@ 0x70
 8001fb2:	d101      	bne.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0207 	bic.w	r2, r3, #7
 8001fc0:	4909      	ldr	r1, [pc, #36]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fc8:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40022000 	.word	0x40022000

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002004:	2b00      	cmp	r3, #0
 8002006:	d041      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800200c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002010:	d02a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002012:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002016:	d824      	bhi.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002018:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800201c:	d008      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800201e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002022:	d81e      	bhi.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800202c:	d010      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800202e:	e018      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002030:	4b86      	ldr	r3, [pc, #536]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a85      	ldr	r2, [pc, #532]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203c:	e015      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fabb 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800204e:	e00c      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3320      	adds	r3, #32
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fba6 	bl	80027a8 <RCCEx_PLLSAI2_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002060:	e003      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	74fb      	strb	r3, [r7, #19]
      break;
 8002066:	e000      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10b      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002070:	4b76      	ldr	r3, [pc, #472]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800207e:	4973      	ldr	r1, [pc, #460]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002086:	e001      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d041      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800209c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020a0:	d02a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020a6:	d824      	bhi.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ac:	d008      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020b2:	d81e      	bhi.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020bc:	d010      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020be:	e018      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020c0:	4b62      	ldr	r3, [pc, #392]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a61      	ldr	r2, [pc, #388]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020cc:	e015      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fa73 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 80020da:	4603      	mov	r3, r0
 80020dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020de:	e00c      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3320      	adds	r3, #32
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fb5e 	bl	80027a8 <RCCEx_PLLSAI2_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f0:	e003      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	74fb      	strb	r3, [r7, #19]
      break;
 80020f6:	e000      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002100:	4b52      	ldr	r3, [pc, #328]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800210e:	494f      	ldr	r1, [pc, #316]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002116:	e001      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800212e:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002150:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215c:	2301      	movs	r3, #1
 800215e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3a      	ldr	r2, [pc, #232]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800216c:	f7fe fe02 	bl	8000d74 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7fe fdfe 	bl	8000d74 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d902      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	74fb      	strb	r3, [r7, #19]
        break;
 8002186:	e005      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d15c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800219a:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01f      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d019      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021c4:	4b21      	ldr	r3, [pc, #132]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a20      	ldr	r2, [pc, #128]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	4a1c      	ldr	r2, [pc, #112]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021e4:	4a19      	ldr	r2, [pc, #100]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe fdbd 	bl	8000d74 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fc:	e00b      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fdb9 	bl	8000d74 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d902      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	74fb      	strb	r3, [r7, #19]
            break;
 8002214:	e006      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ec      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800223a:	4904      	ldr	r1, [pc, #16]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002242:	e009      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	7c7b      	ldrb	r3, [r7, #17]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b9e      	ldr	r3, [pc, #632]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	4a9d      	ldr	r2, [pc, #628]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002276:	4b98      	ldr	r3, [pc, #608]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f023 0203 	bic.w	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	4994      	ldr	r1, [pc, #592]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002298:	4b8f      	ldr	r3, [pc, #572]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 020c 	bic.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a6:	498c      	ldr	r1, [pc, #560]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ba:	4b87      	ldr	r3, [pc, #540]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	4983      	ldr	r1, [pc, #524]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022dc:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	497b      	ldr	r1, [pc, #492]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	4972      	ldr	r1, [pc, #456]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b6d      	ldr	r3, [pc, #436]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	496a      	ldr	r1, [pc, #424]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b65      	ldr	r3, [pc, #404]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	4961      	ldr	r1, [pc, #388]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002364:	4b5c      	ldr	r3, [pc, #368]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	4959      	ldr	r1, [pc, #356]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b54      	ldr	r3, [pc, #336]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002394:	4950      	ldr	r1, [pc, #320]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a8:	4b4b      	ldr	r3, [pc, #300]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	4948      	ldr	r1, [pc, #288]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	493f      	ldr	r1, [pc, #252]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d028      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fa:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800240a:	d106      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b32      	ldr	r3, [pc, #200]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a31      	ldr	r2, [pc, #196]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
 8002418:	e011      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002422:	d10c      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f8c8 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d028      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	491f      	ldr	r1, [pc, #124]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002468:	d106      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246a:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002474:	60d3      	str	r3, [r2, #12]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f899 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02b      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024c6:	d109      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a02      	ldr	r2, [pc, #8]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e014      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f867 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02f      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250c:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800251a:	4928      	ldr	r1, [pc, #160]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800252a:	d10d      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	2102      	movs	r1, #2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f844 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	74bb      	strb	r3, [r7, #18]
 8002546:	e011      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800254c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002550:	d10c      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3320      	adds	r3, #32
 8002556:	2102      	movs	r1, #2
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f925 	bl	80027a8 <RCCEx_PLLSAI2_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002578:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002586:	490d      	ldr	r1, [pc, #52]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025aa:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000

080025c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ce:	4b75      	ldr	r3, [pc, #468]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d018      	beq.n	800260c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025da:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d10d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
       ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025f2:	4b6c      	ldr	r3, [pc, #432]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
       ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d047      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e044      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d018      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x86>
 8002614:	2b03      	cmp	r3, #3
 8002616:	d825      	bhi.n	8002664 <RCCEx_PLLSAI1_Config+0xa4>
 8002618:	2b01      	cmp	r3, #1
 800261a:	d002      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x62>
 800261c:	2b02      	cmp	r3, #2
 800261e:	d009      	beq.n	8002634 <RCCEx_PLLSAI1_Config+0x74>
 8002620:	e020      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002622:	4b60      	ldr	r3, [pc, #384]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11d      	bne.n	800266a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e01a      	b.n	800266a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002634:	4b5b      	ldr	r3, [pc, #364]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e013      	b.n	800266e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002646:	4b57      	ldr	r3, [pc, #348]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002662:	e006      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e004      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002672:	bf00      	nop
    }

    if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800267a:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	430b      	orrs	r3, r1
 8002690:	4944      	ldr	r1, [pc, #272]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d17d      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800269c:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a40      	ldr	r2, [pc, #256]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a8:	f7fe fb64 	bl	8000d74 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ae:	e009      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b0:	f7fe fb60 	bl	8000d74 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	73fb      	strb	r3, [r7, #15]
        break;
 80026c2:	e005      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c4:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ef      	bne.n	80026b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d160      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	0211      	lsls	r1, r2, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68d2      	ldr	r2, [r2, #12]
 80026f2:	0912      	lsrs	r2, r2, #4
 80026f4:	0452      	lsls	r2, r2, #17
 80026f6:	430a      	orrs	r2, r1
 80026f8:	492a      	ldr	r1, [pc, #168]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	610b      	str	r3, [r1, #16]
 80026fe:	e027      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d112      	bne.n	800272c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002706:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800270e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	0211      	lsls	r1, r2, #8
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6912      	ldr	r2, [r2, #16]
 800271c:	0852      	lsrs	r2, r2, #1
 800271e:	3a01      	subs	r2, #1
 8002720:	0552      	lsls	r2, r2, #21
 8002722:	430a      	orrs	r2, r1
 8002724:	491f      	ldr	r1, [pc, #124]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	610b      	str	r3, [r1, #16]
 800272a:	e011      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002734:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
 800273c:	0211      	lsls	r1, r2, #8
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6952      	ldr	r2, [r2, #20]
 8002742:	0852      	lsrs	r2, r2, #1
 8002744:	3a01      	subs	r2, #1
 8002746:	0652      	lsls	r2, r2, #25
 8002748:	430a      	orrs	r2, r1
 800274a:	4916      	ldr	r1, [pc, #88]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002750:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800275a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fb0a 	bl	8000d74 <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002762:	e009      	b.n	8002778 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002764:	f7fe fb06 	bl	8000d74 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	73fb      	strb	r3, [r7, #15]
          break;
 8002776:	e005      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002778:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	4904      	ldr	r1, [pc, #16]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000

080027a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027c2:	4b67      	ldr	r3, [pc, #412]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0203 	and.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10d      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
       ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027da:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d047      	beq.n	800287e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e044      	b.n	800287e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d018      	beq.n	800282e <RCCEx_PLLSAI2_Config+0x86>
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d825      	bhi.n	800284c <RCCEx_PLLSAI2_Config+0xa4>
 8002800:	2b01      	cmp	r3, #1
 8002802:	d002      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x62>
 8002804:	2b02      	cmp	r3, #2
 8002806:	d009      	beq.n	800281c <RCCEx_PLLSAI2_Config+0x74>
 8002808:	e020      	b.n	800284c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280a:	4b55      	ldr	r3, [pc, #340]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11d      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281a:	e01a      	b.n	8002852 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800281c:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d116      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e013      	b.n	8002856 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282e:	4b4c      	ldr	r3, [pc, #304]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283a:	4b49      	ldr	r3, [pc, #292]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284a:	e006      	b.n	800285a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e004      	b.n	800285c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285a:	bf00      	nop
    }

    if(status == HAL_OK)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002862:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	430b      	orrs	r3, r1
 8002878:	4939      	ldr	r1, [pc, #228]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d167      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a35      	ldr	r2, [pc, #212]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002890:	f7fe fa70 	bl	8000d74 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002896:	e009      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002898:	f7fe fa6c 	bl	8000d74 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	73fb      	strb	r3, [r7, #15]
        break;
 80028aa:	e005      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ef      	bne.n	8002898 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d14a      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d111      	bne.n	80028e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	0912      	lsrs	r2, r2, #4
 80028dc:	0452      	lsls	r2, r2, #17
 80028de:	430a      	orrs	r2, r1
 80028e0:	491f      	ldr	r1, [pc, #124]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	614b      	str	r3, [r1, #20]
 80028e6:	e011      	b.n	800290c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	0211      	lsls	r1, r2, #8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6912      	ldr	r2, [r2, #16]
 80028fe:	0852      	lsrs	r2, r2, #1
 8002900:	3a01      	subs	r2, #1
 8002902:	0652      	lsls	r2, r2, #25
 8002904:	430a      	orrs	r2, r1
 8002906:	4916      	ldr	r1, [pc, #88]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a13      	ldr	r2, [pc, #76]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fa2c 	bl	8000d74 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800291e:	e009      	b.n	8002934 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002920:	f7fe fa28 	bl	8000d74 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d902      	bls.n	8002934 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	73fb      	strb	r3, [r7, #15]
          break;
 8002932:	e005      	b.n	8002940 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002934:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ef      	beq.n	8002920 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4904      	ldr	r1, [pc, #16]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d079      	beq.n	8002a6a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fd ffe6 	bl	800095c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d058      	beq.n	8002a58 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	22ca      	movs	r2, #202	@ 0xca
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2253      	movs	r2, #83	@ 0x53
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fa4e 	bl	8002e58 <RTC_EnterInitMode>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d127      	bne.n	8002a16 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80029d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029d8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68d2      	ldr	r2, [r2, #12]
 8002a00:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6919      	ldr	r1, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa52 	bl	8002ec0 <RTC_ExitInitMode>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0203 	bic.w	r2, r2, #3
 8002a34:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	22ff      	movs	r2, #255	@ 0xff
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a56:	e001      	b.n	8002a5c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_RTC_SetTime+0x1a>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e08b      	b.n	8002ba6 <HAL_RTC_SetTime+0x132>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	22ca      	movs	r2, #202	@ 0xca
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2253      	movs	r2, #83	@ 0x53
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f9d2 	bl	8002e58 <RTC_EnterInitMode>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d163      	bne.n	8002b86 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d126      	bne.n	8002b12 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fa2d 	bl	8002f3c <RTC_ByteToBcd2>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fa26 	bl	8002f3c <RTC_ByteToBcd2>
 8002af0:	4603      	mov	r3, r0
 8002af2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002af4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	789b      	ldrb	r3, [r3, #2]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fa1e 	bl	8002f3c <RTC_ByteToBcd2>
 8002b00:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b02:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e018      	b.n	8002b44 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b32:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b38:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	78db      	ldrb	r3, [r3, #3]
 8002b3e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002b4e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f99f 	bl	8002ec0 <RTC_ExitInitMode>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	22ff      	movs	r2, #255	@ 0xff
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd90      	pop	{r4, r7, pc}

08002bae <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002bdc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002be0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0d9b      	lsrs	r3, r3, #22
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11a      	bne.n	8002c5c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f9a6 	bl	8002f7c <RTC_Bcd2ToByte>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f99d 	bl	8002f7c <RTC_Bcd2ToByte>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	789b      	ldrb	r3, [r3, #2]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f994 	bl	8002f7c <RTC_Bcd2ToByte>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c66:	b590      	push	{r4, r7, lr}
 8002c68:	b087      	sub	sp, #28
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_RTC_SetDate+0x1a>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e075      	b.n	8002d6c <HAL_RTC_SetDate+0x106>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10e      	bne.n	8002cb4 <HAL_RTC_SetDate+0x4e>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	785b      	ldrb	r3, [r3, #1]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	f023 0310 	bic.w	r3, r3, #16
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	330a      	adds	r3, #10
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	78db      	ldrb	r3, [r3, #3]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f93c 	bl	8002f3c <RTC_ByteToBcd2>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f935 	bl	8002f3c <RTC_ByteToBcd2>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	789b      	ldrb	r3, [r3, #2]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f92d 	bl	8002f3c <RTC_ByteToBcd2>
 8002ce2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ce4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e00e      	b.n	8002d12 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	78db      	ldrb	r3, [r3, #3]
 8002cf8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d00:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	22ca      	movs	r2, #202	@ 0xca
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2253      	movs	r2, #83	@ 0x53
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f898 	bl	8002e58 <RTC_EnterInitMode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d3c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d40:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8bc 	bl	8002ec0 <RTC_ExitInitMode>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	22ff      	movs	r2, #255	@ 0xff
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}

08002d74 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	0b5b      	lsrs	r3, r3, #13
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11a      	bne.n	8002e04 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	78db      	ldrb	r3, [r3, #3]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f8d2 	bl	8002f7c <RTC_Bcd2ToByte>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f8c9 	bl	8002f7c <RTC_Bcd2ToByte>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	789b      	ldrb	r3, [r3, #2]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f8c0 	bl	8002f7c <RTC_Bcd2ToByte>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <HAL_RTC_WaitForSynchro+0x44>)
 8002e1e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002e20:	f7fd ffa8 	bl	8000d74 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e28:	f7fd ffa4 	bl	8000d74 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e36:	d901      	bls.n	8002e3c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e007      	b.n	8002e4c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ee      	beq.n	8002e28 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0003ff5f 	.word	0x0003ff5f

08002e58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d120      	bne.n	8002eb4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e7c:	f7fd ff7a 	bl	8000d74 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e82:	e00d      	b.n	8002ea0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e84:	f7fd ff76 	bl	8000d74 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e92:	d905      	bls.n	8002ea0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <RTC_EnterInitMode+0x5c>
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d1e7      	bne.n	8002e84 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ed8:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10c      	bne.n	8002efe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff93 	bl	8002e10 <HAL_RTC_WaitForSynchro>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01e      	beq.n	8002f2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e017      	b.n	8002f2e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002efe:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4a0d      	ldr	r2, [pc, #52]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002f04:	f023 0320 	bic.w	r3, r3, #32
 8002f08:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff80 	bl	8002e10 <HAL_RTC_WaitForSynchro>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4a04      	ldr	r2, [pc, #16]	@ (8002f38 <RTC_ExitInitMode+0x78>)
 8002f28:	f043 0320 	orr.w	r3, r3, #32
 8002f2c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40002800 	.word	0x40002800

08002f3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002f4e:	e005      	b.n	8002f5c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	3b0a      	subs	r3, #10
 8002f5a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	d8f6      	bhi.n	8002f50 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b2db      	uxtb	r3, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e040      	b.n	8003044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd fcf4 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	@ 0x24
 8002fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb6a 	bl	80036d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8af 	bl	8003160 <UART_SetConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e01b      	b.n	8003044 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800301a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800302a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fbe9 	bl	8003814 <UART_CheckIdleState>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003060:	2b20      	cmp	r3, #32
 8003062:	d177      	bne.n	8003154 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_UART_Transmit+0x24>
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e070      	b.n	8003156 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2221      	movs	r2, #33	@ 0x21
 8003080:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003082:	f7fd fe77 	bl	8000d74 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030a0:	d108      	bne.n	80030b4 <HAL_UART_Transmit+0x68>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e003      	b.n	80030bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030bc:	e02f      	b.n	800311e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2180      	movs	r1, #128	@ 0x80
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fc4b 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e03b      	b.n	8003156 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f0:	b292      	uxth	r2, r2
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3302      	adds	r3, #2
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e007      	b.n	800310c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1c9      	bne.n	80030be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2140      	movs	r1, #64	@ 0x40
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fc15 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e005      	b.n	8003156 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b08a      	sub	sp, #40	@ 0x28
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	4313      	orrs	r3, r2
 8003186:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4ba4      	ldr	r3, [pc, #656]	@ (8003420 <UART_SetConfig+0x2c0>)
 8003190:	4013      	ands	r3, r2
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003198:	430b      	orrs	r3, r1
 800319a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a99      	ldr	r2, [pc, #612]	@ (8003424 <UART_SetConfig+0x2c4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c8:	4313      	orrs	r3, r2
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a90      	ldr	r2, [pc, #576]	@ (8003428 <UART_SetConfig+0x2c8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d126      	bne.n	8003238 <UART_SetConfig+0xd8>
 80031ea:	4b90      	ldr	r3, [pc, #576]	@ (800342c <UART_SetConfig+0x2cc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d81b      	bhi.n	8003230 <UART_SetConfig+0xd0>
 80031f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003200 <UART_SetConfig+0xa0>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003211 	.word	0x08003211
 8003204:	08003221 	.word	0x08003221
 8003208:	08003219 	.word	0x08003219
 800320c:	08003229 	.word	0x08003229
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e116      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003218:	2302      	movs	r3, #2
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e112      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003220:	2304      	movs	r3, #4
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e10e      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003228:	2308      	movs	r3, #8
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322e:	e10a      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003230:	2310      	movs	r3, #16
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003236:	e106      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a7c      	ldr	r2, [pc, #496]	@ (8003430 <UART_SetConfig+0x2d0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d138      	bne.n	80032b4 <UART_SetConfig+0x154>
 8003242:	4b7a      	ldr	r3, [pc, #488]	@ (800342c <UART_SetConfig+0x2cc>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d82d      	bhi.n	80032ac <UART_SetConfig+0x14c>
 8003250:	a201      	add	r2, pc, #4	@ (adr r2, 8003258 <UART_SetConfig+0xf8>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	0800328d 	.word	0x0800328d
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080032ad 	.word	0x080032ad
 8003264:	080032ad 	.word	0x080032ad
 8003268:	0800329d 	.word	0x0800329d
 800326c:	080032ad 	.word	0x080032ad
 8003270:	080032ad 	.word	0x080032ad
 8003274:	080032ad 	.word	0x080032ad
 8003278:	08003295 	.word	0x08003295
 800327c:	080032ad 	.word	0x080032ad
 8003280:	080032ad 	.word	0x080032ad
 8003284:	080032ad 	.word	0x080032ad
 8003288:	080032a5 	.word	0x080032a5
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003292:	e0d8      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003294:	2302      	movs	r3, #2
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329a:	e0d4      	b.n	8003446 <UART_SetConfig+0x2e6>
 800329c:	2304      	movs	r3, #4
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a2:	e0d0      	b.n	8003446 <UART_SetConfig+0x2e6>
 80032a4:	2308      	movs	r3, #8
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e0cc      	b.n	8003446 <UART_SetConfig+0x2e6>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b2:	e0c8      	b.n	8003446 <UART_SetConfig+0x2e6>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003434 <UART_SetConfig+0x2d4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d125      	bne.n	800330a <UART_SetConfig+0x1aa>
 80032be:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <UART_SetConfig+0x2cc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032c8:	2b30      	cmp	r3, #48	@ 0x30
 80032ca:	d016      	beq.n	80032fa <UART_SetConfig+0x19a>
 80032cc:	2b30      	cmp	r3, #48	@ 0x30
 80032ce:	d818      	bhi.n	8003302 <UART_SetConfig+0x1a2>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d00a      	beq.n	80032ea <UART_SetConfig+0x18a>
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d814      	bhi.n	8003302 <UART_SetConfig+0x1a2>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <UART_SetConfig+0x182>
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d008      	beq.n	80032f2 <UART_SetConfig+0x192>
 80032e0:	e00f      	b.n	8003302 <UART_SetConfig+0x1a2>
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e8:	e0ad      	b.n	8003446 <UART_SetConfig+0x2e6>
 80032ea:	2302      	movs	r3, #2
 80032ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f0:	e0a9      	b.n	8003446 <UART_SetConfig+0x2e6>
 80032f2:	2304      	movs	r3, #4
 80032f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f8:	e0a5      	b.n	8003446 <UART_SetConfig+0x2e6>
 80032fa:	2308      	movs	r3, #8
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003300:	e0a1      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003302:	2310      	movs	r3, #16
 8003304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003308:	e09d      	b.n	8003446 <UART_SetConfig+0x2e6>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4a      	ldr	r2, [pc, #296]	@ (8003438 <UART_SetConfig+0x2d8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d125      	bne.n	8003360 <UART_SetConfig+0x200>
 8003314:	4b45      	ldr	r3, [pc, #276]	@ (800342c <UART_SetConfig+0x2cc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800331e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003320:	d016      	beq.n	8003350 <UART_SetConfig+0x1f0>
 8003322:	2bc0      	cmp	r3, #192	@ 0xc0
 8003324:	d818      	bhi.n	8003358 <UART_SetConfig+0x1f8>
 8003326:	2b80      	cmp	r3, #128	@ 0x80
 8003328:	d00a      	beq.n	8003340 <UART_SetConfig+0x1e0>
 800332a:	2b80      	cmp	r3, #128	@ 0x80
 800332c:	d814      	bhi.n	8003358 <UART_SetConfig+0x1f8>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <UART_SetConfig+0x1d8>
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	d008      	beq.n	8003348 <UART_SetConfig+0x1e8>
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x1f8>
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800333e:	e082      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003346:	e07e      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800334e:	e07a      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003356:	e076      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800335e:	e072      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a35      	ldr	r2, [pc, #212]	@ (800343c <UART_SetConfig+0x2dc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d12a      	bne.n	80033c0 <UART_SetConfig+0x260>
 800336a:	4b30      	ldr	r3, [pc, #192]	@ (800342c <UART_SetConfig+0x2cc>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003378:	d01a      	beq.n	80033b0 <UART_SetConfig+0x250>
 800337a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800337e:	d81b      	bhi.n	80033b8 <UART_SetConfig+0x258>
 8003380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003384:	d00c      	beq.n	80033a0 <UART_SetConfig+0x240>
 8003386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800338a:	d815      	bhi.n	80033b8 <UART_SetConfig+0x258>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <UART_SetConfig+0x238>
 8003390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003394:	d008      	beq.n	80033a8 <UART_SetConfig+0x248>
 8003396:	e00f      	b.n	80033b8 <UART_SetConfig+0x258>
 8003398:	2300      	movs	r3, #0
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339e:	e052      	b.n	8003446 <UART_SetConfig+0x2e6>
 80033a0:	2302      	movs	r3, #2
 80033a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033a6:	e04e      	b.n	8003446 <UART_SetConfig+0x2e6>
 80033a8:	2304      	movs	r3, #4
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ae:	e04a      	b.n	8003446 <UART_SetConfig+0x2e6>
 80033b0:	2308      	movs	r3, #8
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b6:	e046      	b.n	8003446 <UART_SetConfig+0x2e6>
 80033b8:	2310      	movs	r3, #16
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e042      	b.n	8003446 <UART_SetConfig+0x2e6>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a17      	ldr	r2, [pc, #92]	@ (8003424 <UART_SetConfig+0x2c4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d13a      	bne.n	8003440 <UART_SetConfig+0x2e0>
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <UART_SetConfig+0x2cc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033d8:	d01a      	beq.n	8003410 <UART_SetConfig+0x2b0>
 80033da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033de:	d81b      	bhi.n	8003418 <UART_SetConfig+0x2b8>
 80033e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e4:	d00c      	beq.n	8003400 <UART_SetConfig+0x2a0>
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ea:	d815      	bhi.n	8003418 <UART_SetConfig+0x2b8>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <UART_SetConfig+0x298>
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f4:	d008      	beq.n	8003408 <UART_SetConfig+0x2a8>
 80033f6:	e00f      	b.n	8003418 <UART_SetConfig+0x2b8>
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e022      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003400:	2302      	movs	r3, #2
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e01e      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003408:	2304      	movs	r3, #4
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e01a      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003410:	2308      	movs	r3, #8
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003416:	e016      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003418:	2310      	movs	r3, #16
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341e:	e012      	b.n	8003446 <UART_SetConfig+0x2e6>
 8003420:	efff69f3 	.word	0xefff69f3
 8003424:	40008000 	.word	0x40008000
 8003428:	40013800 	.word	0x40013800
 800342c:	40021000 	.word	0x40021000
 8003430:	40004400 	.word	0x40004400
 8003434:	40004800 	.word	0x40004800
 8003438:	40004c00 	.word	0x40004c00
 800343c:	40005000 	.word	0x40005000
 8003440:	2310      	movs	r3, #16
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a9f      	ldr	r2, [pc, #636]	@ (80036c8 <UART_SetConfig+0x568>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d17a      	bne.n	8003546 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003454:	2b08      	cmp	r3, #8
 8003456:	d824      	bhi.n	80034a2 <UART_SetConfig+0x342>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <UART_SetConfig+0x300>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	080034a3 	.word	0x080034a3
 8003468:	0800348d 	.word	0x0800348d
 800346c:	080034a3 	.word	0x080034a3
 8003470:	08003493 	.word	0x08003493
 8003474:	080034a3 	.word	0x080034a3
 8003478:	080034a3 	.word	0x080034a3
 800347c:	080034a3 	.word	0x080034a3
 8003480:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe fd26 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e010      	b.n	80034ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b8f      	ldr	r3, [pc, #572]	@ (80036cc <UART_SetConfig+0x56c>)
 800348e:	61fb      	str	r3, [r7, #28]
        break;
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7fe fc87 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8003496:	61f8      	str	r0, [r7, #28]
        break;
 8003498:	e009      	b.n	80034ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800349e:	61fb      	str	r3, [r7, #28]
        break;
 80034a0:	e005      	b.n	80034ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80fb 	beq.w	80036ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d305      	bcc.n	80034d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d903      	bls.n	80034da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034d8:	e0e8      	b.n	80036ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2200      	movs	r2, #0
 80034de:	461c      	mov	r4, r3
 80034e0:	4615      	mov	r5, r2
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	022b      	lsls	r3, r5, #8
 80034ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034f0:	0222      	lsls	r2, r4, #8
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	6849      	ldr	r1, [r1, #4]
 80034f6:	0849      	lsrs	r1, r1, #1
 80034f8:	2000      	movs	r0, #0
 80034fa:	4688      	mov	r8, r1
 80034fc:	4681      	mov	r9, r0
 80034fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003502:	eb43 0b09 	adc.w	fp, r3, r9
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003514:	4650      	mov	r0, sl
 8003516:	4659      	mov	r1, fp
 8003518:	f7fc feaa 	bl	8000270 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800352a:	d308      	bcc.n	800353e <UART_SetConfig+0x3de>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003532:	d204      	bcs.n	800353e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	e0b6      	b.n	80036ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003544:	e0b2      	b.n	80036ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800354e:	d15e      	bne.n	800360e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003554:	2b08      	cmp	r3, #8
 8003556:	d828      	bhi.n	80035aa <UART_SetConfig+0x44a>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <UART_SetConfig+0x400>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003585 	.word	0x08003585
 8003564:	0800358d 	.word	0x0800358d
 8003568:	08003595 	.word	0x08003595
 800356c:	080035ab 	.word	0x080035ab
 8003570:	0800359b 	.word	0x0800359b
 8003574:	080035ab 	.word	0x080035ab
 8003578:	080035ab 	.word	0x080035ab
 800357c:	080035ab 	.word	0x080035ab
 8003580:	080035a3 	.word	0x080035a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003584:	f7fe fca6 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003588:	61f8      	str	r0, [r7, #28]
        break;
 800358a:	e014      	b.n	80035b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7fe fcb8 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8003590:	61f8      	str	r0, [r7, #28]
        break;
 8003592:	e010      	b.n	80035b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003594:	4b4d      	ldr	r3, [pc, #308]	@ (80036cc <UART_SetConfig+0x56c>)
 8003596:	61fb      	str	r3, [r7, #28]
        break;
 8003598:	e00d      	b.n	80035b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359a:	f7fe fc03 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 800359e:	61f8      	str	r0, [r7, #28]
        break;
 80035a0:	e009      	b.n	80035b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a6:	61fb      	str	r3, [r7, #28]
        break;
 80035a8:	e005      	b.n	80035b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d077      	beq.n	80036ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005a      	lsls	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d916      	bls.n	8003606 <UART_SetConfig+0x4a6>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035de:	d212      	bcs.n	8003606 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f023 030f 	bic.w	r3, r3, #15
 80035e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	8afb      	ldrh	r3, [r7, #22]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	8afa      	ldrh	r2, [r7, #22]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	e052      	b.n	80036ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800360c:	e04e      	b.n	80036ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800360e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003612:	2b08      	cmp	r3, #8
 8003614:	d827      	bhi.n	8003666 <UART_SetConfig+0x506>
 8003616:	a201      	add	r2, pc, #4	@ (adr r2, 800361c <UART_SetConfig+0x4bc>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003641 	.word	0x08003641
 8003620:	08003649 	.word	0x08003649
 8003624:	08003651 	.word	0x08003651
 8003628:	08003667 	.word	0x08003667
 800362c:	08003657 	.word	0x08003657
 8003630:	08003667 	.word	0x08003667
 8003634:	08003667 	.word	0x08003667
 8003638:	08003667 	.word	0x08003667
 800363c:	0800365f 	.word	0x0800365f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003640:	f7fe fc48 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003644:	61f8      	str	r0, [r7, #28]
        break;
 8003646:	e014      	b.n	8003672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7fe fc5a 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 800364c:	61f8      	str	r0, [r7, #28]
        break;
 800364e:	e010      	b.n	8003672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003650:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <UART_SetConfig+0x56c>)
 8003652:	61fb      	str	r3, [r7, #28]
        break;
 8003654:	e00d      	b.n	8003672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003656:	f7fe fba5 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 800365a:	61f8      	str	r0, [r7, #28]
        break;
 800365c:	e009      	b.n	8003672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003662:	61fb      	str	r3, [r7, #28]
        break;
 8003664:	e005      	b.n	8003672 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003670:	bf00      	nop
    }

    if (pclk != 0U)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d019      	beq.n	80036ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	085a      	lsrs	r2, r3, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	441a      	add	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	d909      	bls.n	80036a6 <UART_SetConfig+0x546>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003698:	d205      	bcs.n	80036a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e002      	b.n	80036ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3728      	adds	r7, #40	@ 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c6:	bf00      	nop
 80036c8:	40008000 	.word	0x40008000
 80036cc:	00f42400 	.word	0x00f42400

080036d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ce:	d10a      	bne.n	80037e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b098      	sub	sp, #96	@ 0x60
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003824:	f7fd faa6 	bl	8000d74 <HAL_GetTick>
 8003828:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d12e      	bne.n	8003896 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003838:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f88c 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d021      	beq.n	8003896 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
 8003872:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800387e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e062      	b.n	800395c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d149      	bne.n	8003938 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f856 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03c      	beq.n	8003938 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	623b      	str	r3, [r7, #32]
   return(result);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e6      	bne.n	80038be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003910:	61fa      	str	r2, [r7, #28]
 8003912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	69b9      	ldr	r1, [r7, #24]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	617b      	str	r3, [r7, #20]
   return(result);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e011      	b.n	800395c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3758      	adds	r7, #88	@ 0x58
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003974:	e04f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d04b      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fd f9f9 	bl	8000d74 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <UART_WaitOnFlagUntilTimeout+0x30>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e04e      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d037      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b80      	cmp	r3, #128	@ 0x80
 80039aa:	d034      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b40      	cmp	r3, #64	@ 0x40
 80039b0:	d031      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d110      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2208      	movs	r2, #8
 80039c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f838 	bl	8003a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2208      	movs	r2, #8
 80039d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e029      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f0:	d111      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f81e 	bl	8003a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e00f      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d0a0      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b095      	sub	sp, #84	@ 0x54
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e6      	bne.n	8003a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3308      	adds	r3, #8
 8003a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e5      	bne.n	8003a78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d118      	bne.n	8003ae6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0310 	bic.w	r3, r3, #16
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e6      	bne.n	8003ab4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003afa:	bf00      	nop
 8003afc:	3754      	adds	r7, #84	@ 0x54
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <std>:
 8003b08:	2300      	movs	r3, #0
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	8181      	strh	r1, [r0, #12]
 8003b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b1c:	81c2      	strh	r2, [r0, #14]
 8003b1e:	6183      	str	r3, [r0, #24]
 8003b20:	4619      	mov	r1, r3
 8003b22:	2208      	movs	r2, #8
 8003b24:	305c      	adds	r0, #92	@ 0x5c
 8003b26:	f000 f9f9 	bl	8003f1c <memset>
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <std+0x58>)
 8003b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <std+0x5c>)
 8003b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <std+0x60>)
 8003b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <std+0x64>)
 8003b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <std+0x68>)
 8003b3c:	6224      	str	r4, [r4, #32]
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d006      	beq.n	8003b50 <std+0x48>
 8003b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b46:	4294      	cmp	r4, r2
 8003b48:	d002      	beq.n	8003b50 <std+0x48>
 8003b4a:	33d0      	adds	r3, #208	@ 0xd0
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d105      	bne.n	8003b5c <std+0x54>
 8003b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	f000 ba58 	b.w	800400c <__retarget_lock_init_recursive>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	08003d6d 	.word	0x08003d6d
 8003b64:	08003d8f 	.word	0x08003d8f
 8003b68:	08003dc7 	.word	0x08003dc7
 8003b6c:	08003deb 	.word	0x08003deb
 8003b70:	20000138 	.word	0x20000138

08003b74 <stdio_exit_handler>:
 8003b74:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <stdio_exit_handler+0xc>)
 8003b76:	4903      	ldr	r1, [pc, #12]	@ (8003b84 <stdio_exit_handler+0x10>)
 8003b78:	4803      	ldr	r0, [pc, #12]	@ (8003b88 <stdio_exit_handler+0x14>)
 8003b7a:	f000 b869 	b.w	8003c50 <_fwalk_sglue>
 8003b7e:	bf00      	nop
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	080048a9 	.word	0x080048a9
 8003b88:	2000001c 	.word	0x2000001c

08003b8c <cleanup_stdio>:
 8003b8c:	6841      	ldr	r1, [r0, #4]
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <cleanup_stdio+0x34>)
 8003b90:	4299      	cmp	r1, r3
 8003b92:	b510      	push	{r4, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	d001      	beq.n	8003b9c <cleanup_stdio+0x10>
 8003b98:	f000 fe86 	bl	80048a8 <_fflush_r>
 8003b9c:	68a1      	ldr	r1, [r4, #8]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <cleanup_stdio+0x38>)
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d002      	beq.n	8003baa <cleanup_stdio+0x1e>
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 fe7f 	bl	80048a8 <_fflush_r>
 8003baa:	68e1      	ldr	r1, [r4, #12]
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <cleanup_stdio+0x3c>)
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	d004      	beq.n	8003bbc <cleanup_stdio+0x30>
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	f000 be76 	b.w	80048a8 <_fflush_r>
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000138 	.word	0x20000138
 8003bc4:	200001a0 	.word	0x200001a0
 8003bc8:	20000208 	.word	0x20000208

08003bcc <global_stdio_init.part.0>:
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <global_stdio_init.part.0+0x30>)
 8003bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8003c00 <global_stdio_init.part.0+0x34>)
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c04 <global_stdio_init.part.0+0x38>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2104      	movs	r1, #4
 8003bdc:	f7ff ff94 	bl	8003b08 <std>
 8003be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003be4:	2201      	movs	r2, #1
 8003be6:	2109      	movs	r1, #9
 8003be8:	f7ff ff8e 	bl	8003b08 <std>
 8003bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf6:	2112      	movs	r1, #18
 8003bf8:	f7ff bf86 	b.w	8003b08 <std>
 8003bfc:	20000270 	.word	0x20000270
 8003c00:	20000138 	.word	0x20000138
 8003c04:	08003b75 	.word	0x08003b75

08003c08 <__sfp_lock_acquire>:
 8003c08:	4801      	ldr	r0, [pc, #4]	@ (8003c10 <__sfp_lock_acquire+0x8>)
 8003c0a:	f000 ba00 	b.w	800400e <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000279 	.word	0x20000279

08003c14 <__sfp_lock_release>:
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <__sfp_lock_release+0x8>)
 8003c16:	f000 b9fb 	b.w	8004010 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000279 	.word	0x20000279

08003c20 <__sinit>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	f7ff fff0 	bl	8003c08 <__sfp_lock_acquire>
 8003c28:	6a23      	ldr	r3, [r4, #32]
 8003c2a:	b11b      	cbz	r3, 8003c34 <__sinit+0x14>
 8003c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c30:	f7ff bff0 	b.w	8003c14 <__sfp_lock_release>
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__sinit+0x28>)
 8003c36:	6223      	str	r3, [r4, #32]
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <__sinit+0x2c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f5      	bne.n	8003c2c <__sinit+0xc>
 8003c40:	f7ff ffc4 	bl	8003bcc <global_stdio_init.part.0>
 8003c44:	e7f2      	b.n	8003c2c <__sinit+0xc>
 8003c46:	bf00      	nop
 8003c48:	08003b8d 	.word	0x08003b8d
 8003c4c:	20000270 	.word	0x20000270

08003c50 <_fwalk_sglue>:
 8003c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c54:	4607      	mov	r7, r0
 8003c56:	4688      	mov	r8, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c60:	f1b9 0901 	subs.w	r9, r9, #1
 8003c64:	d505      	bpl.n	8003c72 <_fwalk_sglue+0x22>
 8003c66:	6824      	ldr	r4, [r4, #0]
 8003c68:	2c00      	cmp	r4, #0
 8003c6a:	d1f7      	bne.n	8003c5c <_fwalk_sglue+0xc>
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d907      	bls.n	8003c88 <_fwalk_sglue+0x38>
 8003c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	d003      	beq.n	8003c88 <_fwalk_sglue+0x38>
 8003c80:	4629      	mov	r1, r5
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c0      	blx	r8
 8003c86:	4306      	orrs	r6, r0
 8003c88:	3568      	adds	r5, #104	@ 0x68
 8003c8a:	e7e9      	b.n	8003c60 <_fwalk_sglue+0x10>

08003c8c <iprintf>:
 8003c8c:	b40f      	push	{r0, r1, r2, r3}
 8003c8e:	b507      	push	{r0, r1, r2, lr}
 8003c90:	4906      	ldr	r1, [pc, #24]	@ (8003cac <iprintf+0x20>)
 8003c92:	ab04      	add	r3, sp, #16
 8003c94:	6808      	ldr	r0, [r1, #0]
 8003c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c9a:	6881      	ldr	r1, [r0, #8]
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	f000 fadb 	bl	8004258 <_vfiprintf_r>
 8003ca2:	b003      	add	sp, #12
 8003ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca8:	b004      	add	sp, #16
 8003caa:	4770      	bx	lr
 8003cac:	20000018 	.word	0x20000018

08003cb0 <_puts_r>:
 8003cb0:	6a03      	ldr	r3, [r0, #32]
 8003cb2:	b570      	push	{r4, r5, r6, lr}
 8003cb4:	6884      	ldr	r4, [r0, #8]
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	460e      	mov	r6, r1
 8003cba:	b90b      	cbnz	r3, 8003cc0 <_puts_r+0x10>
 8003cbc:	f7ff ffb0 	bl	8003c20 <__sinit>
 8003cc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cc2:	07db      	lsls	r3, r3, #31
 8003cc4:	d405      	bmi.n	8003cd2 <_puts_r+0x22>
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	0598      	lsls	r0, r3, #22
 8003cca:	d402      	bmi.n	8003cd2 <_puts_r+0x22>
 8003ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cce:	f000 f99e 	bl	800400e <__retarget_lock_acquire_recursive>
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	0719      	lsls	r1, r3, #28
 8003cd6:	d502      	bpl.n	8003cde <_puts_r+0x2e>
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d135      	bne.n	8003d4a <_puts_r+0x9a>
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f000 f8c5 	bl	8003e70 <__swsetup_r>
 8003ce6:	b380      	cbz	r0, 8003d4a <_puts_r+0x9a>
 8003ce8:	f04f 35ff 	mov.w	r5, #4294967295
 8003cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cee:	07da      	lsls	r2, r3, #31
 8003cf0:	d405      	bmi.n	8003cfe <_puts_r+0x4e>
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	059b      	lsls	r3, r3, #22
 8003cf6:	d402      	bmi.n	8003cfe <_puts_r+0x4e>
 8003cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cfa:	f000 f989 	bl	8004010 <__retarget_lock_release_recursive>
 8003cfe:	4628      	mov	r0, r5
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da04      	bge.n	8003d10 <_puts_r+0x60>
 8003d06:	69a2      	ldr	r2, [r4, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dc17      	bgt.n	8003d3c <_puts_r+0x8c>
 8003d0c:	290a      	cmp	r1, #10
 8003d0e:	d015      	beq.n	8003d3c <_puts_r+0x8c>
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	6022      	str	r2, [r4, #0]
 8003d16:	7019      	strb	r1, [r3, #0]
 8003d18:	68a3      	ldr	r3, [r4, #8]
 8003d1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	2900      	cmp	r1, #0
 8003d24:	d1ed      	bne.n	8003d02 <_puts_r+0x52>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da11      	bge.n	8003d4e <_puts_r+0x9e>
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	210a      	movs	r1, #10
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 f85f 	bl	8003df2 <__swbuf_r>
 8003d34:	3001      	adds	r0, #1
 8003d36:	d0d7      	beq.n	8003ce8 <_puts_r+0x38>
 8003d38:	250a      	movs	r5, #10
 8003d3a:	e7d7      	b.n	8003cec <_puts_r+0x3c>
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 f857 	bl	8003df2 <__swbuf_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d1e7      	bne.n	8003d18 <_puts_r+0x68>
 8003d48:	e7ce      	b.n	8003ce8 <_puts_r+0x38>
 8003d4a:	3e01      	subs	r6, #1
 8003d4c:	e7e4      	b.n	8003d18 <_puts_r+0x68>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	6022      	str	r2, [r4, #0]
 8003d54:	220a      	movs	r2, #10
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e7ee      	b.n	8003d38 <_puts_r+0x88>
	...

08003d5c <puts>:
 8003d5c:	4b02      	ldr	r3, [pc, #8]	@ (8003d68 <puts+0xc>)
 8003d5e:	4601      	mov	r1, r0
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f7ff bfa5 	b.w	8003cb0 <_puts_r>
 8003d66:	bf00      	nop
 8003d68:	20000018 	.word	0x20000018

08003d6c <__sread>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	460c      	mov	r4, r1
 8003d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d74:	f000 f8fc 	bl	8003f70 <_read_r>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	bfab      	itete	ge
 8003d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d80:	181b      	addge	r3, r3, r0
 8003d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d86:	bfac      	ite	ge
 8003d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d8a:	81a3      	strhlt	r3, [r4, #12]
 8003d8c:	bd10      	pop	{r4, pc}

08003d8e <__swrite>:
 8003d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d92:	461f      	mov	r7, r3
 8003d94:	898b      	ldrh	r3, [r1, #12]
 8003d96:	05db      	lsls	r3, r3, #23
 8003d98:	4605      	mov	r5, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	d505      	bpl.n	8003dac <__swrite+0x1e>
 8003da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da4:	2302      	movs	r3, #2
 8003da6:	2200      	movs	r2, #0
 8003da8:	f000 f8d0 	bl	8003f4c <_lseek_r>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db6:	81a3      	strh	r3, [r4, #12]
 8003db8:	4632      	mov	r2, r6
 8003dba:	463b      	mov	r3, r7
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc2:	f000 b8e7 	b.w	8003f94 <_write_r>

08003dc6 <__sseek>:
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	460c      	mov	r4, r1
 8003dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dce:	f000 f8bd 	bl	8003f4c <_lseek_r>
 8003dd2:	1c43      	adds	r3, r0, #1
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	bf15      	itete	ne
 8003dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003de2:	81a3      	strheq	r3, [r4, #12]
 8003de4:	bf18      	it	ne
 8003de6:	81a3      	strhne	r3, [r4, #12]
 8003de8:	bd10      	pop	{r4, pc}

08003dea <__sclose>:
 8003dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dee:	f000 b89d 	b.w	8003f2c <_close_r>

08003df2 <__swbuf_r>:
 8003df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df4:	460e      	mov	r6, r1
 8003df6:	4614      	mov	r4, r2
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b118      	cbz	r0, 8003e04 <__swbuf_r+0x12>
 8003dfc:	6a03      	ldr	r3, [r0, #32]
 8003dfe:	b90b      	cbnz	r3, 8003e04 <__swbuf_r+0x12>
 8003e00:	f7ff ff0e 	bl	8003c20 <__sinit>
 8003e04:	69a3      	ldr	r3, [r4, #24]
 8003e06:	60a3      	str	r3, [r4, #8]
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	071a      	lsls	r2, r3, #28
 8003e0c:	d501      	bpl.n	8003e12 <__swbuf_r+0x20>
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	b943      	cbnz	r3, 8003e24 <__swbuf_r+0x32>
 8003e12:	4621      	mov	r1, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f000 f82b 	bl	8003e70 <__swsetup_r>
 8003e1a:	b118      	cbz	r0, 8003e24 <__swbuf_r+0x32>
 8003e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e20:	4638      	mov	r0, r7
 8003e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	6922      	ldr	r2, [r4, #16]
 8003e28:	1a98      	subs	r0, r3, r2
 8003e2a:	6963      	ldr	r3, [r4, #20]
 8003e2c:	b2f6      	uxtb	r6, r6
 8003e2e:	4283      	cmp	r3, r0
 8003e30:	4637      	mov	r7, r6
 8003e32:	dc05      	bgt.n	8003e40 <__swbuf_r+0x4e>
 8003e34:	4621      	mov	r1, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 fd36 	bl	80048a8 <_fflush_r>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1ed      	bne.n	8003e1c <__swbuf_r+0x2a>
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	60a3      	str	r3, [r4, #8]
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	701e      	strb	r6, [r3, #0]
 8003e4e:	6962      	ldr	r2, [r4, #20]
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d004      	beq.n	8003e60 <__swbuf_r+0x6e>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	07db      	lsls	r3, r3, #31
 8003e5a:	d5e1      	bpl.n	8003e20 <__swbuf_r+0x2e>
 8003e5c:	2e0a      	cmp	r6, #10
 8003e5e:	d1df      	bne.n	8003e20 <__swbuf_r+0x2e>
 8003e60:	4621      	mov	r1, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 fd20 	bl	80048a8 <_fflush_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d0d9      	beq.n	8003e20 <__swbuf_r+0x2e>
 8003e6c:	e7d6      	b.n	8003e1c <__swbuf_r+0x2a>
	...

08003e70 <__swsetup_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4b29      	ldr	r3, [pc, #164]	@ (8003f18 <__swsetup_r+0xa8>)
 8003e74:	4605      	mov	r5, r0
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	460c      	mov	r4, r1
 8003e7a:	b118      	cbz	r0, 8003e84 <__swsetup_r+0x14>
 8003e7c:	6a03      	ldr	r3, [r0, #32]
 8003e7e:	b90b      	cbnz	r3, 8003e84 <__swsetup_r+0x14>
 8003e80:	f7ff fece 	bl	8003c20 <__sinit>
 8003e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e88:	0719      	lsls	r1, r3, #28
 8003e8a:	d422      	bmi.n	8003ed2 <__swsetup_r+0x62>
 8003e8c:	06da      	lsls	r2, r3, #27
 8003e8e:	d407      	bmi.n	8003ea0 <__swsetup_r+0x30>
 8003e90:	2209      	movs	r2, #9
 8003e92:	602a      	str	r2, [r5, #0]
 8003e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9e:	e033      	b.n	8003f08 <__swsetup_r+0x98>
 8003ea0:	0758      	lsls	r0, r3, #29
 8003ea2:	d512      	bpl.n	8003eca <__swsetup_r+0x5a>
 8003ea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ea6:	b141      	cbz	r1, 8003eba <__swsetup_r+0x4a>
 8003ea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003eac:	4299      	cmp	r1, r3
 8003eae:	d002      	beq.n	8003eb6 <__swsetup_r+0x46>
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	f000 f8af 	bl	8004014 <_free_r>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6063      	str	r3, [r4, #4]
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	f043 0308 	orr.w	r3, r3, #8
 8003ed0:	81a3      	strh	r3, [r4, #12]
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	b94b      	cbnz	r3, 8003eea <__swsetup_r+0x7a>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee0:	d003      	beq.n	8003eea <__swsetup_r+0x7a>
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 fd2d 	bl	8004944 <__smakebuf_r>
 8003eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eee:	f013 0201 	ands.w	r2, r3, #1
 8003ef2:	d00a      	beq.n	8003f0a <__swsetup_r+0x9a>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60a2      	str	r2, [r4, #8]
 8003ef8:	6962      	ldr	r2, [r4, #20]
 8003efa:	4252      	negs	r2, r2
 8003efc:	61a2      	str	r2, [r4, #24]
 8003efe:	6922      	ldr	r2, [r4, #16]
 8003f00:	b942      	cbnz	r2, 8003f14 <__swsetup_r+0xa4>
 8003f02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f06:	d1c5      	bne.n	8003e94 <__swsetup_r+0x24>
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
 8003f0a:	0799      	lsls	r1, r3, #30
 8003f0c:	bf58      	it	pl
 8003f0e:	6962      	ldrpl	r2, [r4, #20]
 8003f10:	60a2      	str	r2, [r4, #8]
 8003f12:	e7f4      	b.n	8003efe <__swsetup_r+0x8e>
 8003f14:	2000      	movs	r0, #0
 8003f16:	e7f7      	b.n	8003f08 <__swsetup_r+0x98>
 8003f18:	20000018 	.word	0x20000018

08003f1c <memset>:
 8003f1c:	4402      	add	r2, r0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <_close_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4d06      	ldr	r5, [pc, #24]	@ (8003f48 <_close_r+0x1c>)
 8003f30:	2300      	movs	r3, #0
 8003f32:	4604      	mov	r4, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	f7fc fe06 	bl	8000b48 <_close>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d102      	bne.n	8003f46 <_close_r+0x1a>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	b103      	cbz	r3, 8003f46 <_close_r+0x1a>
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	20000274 	.word	0x20000274

08003f4c <_lseek_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	4d07      	ldr	r5, [pc, #28]	@ (8003f6c <_lseek_r+0x20>)
 8003f50:	4604      	mov	r4, r0
 8003f52:	4608      	mov	r0, r1
 8003f54:	4611      	mov	r1, r2
 8003f56:	2200      	movs	r2, #0
 8003f58:	602a      	str	r2, [r5, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f7fc fe1b 	bl	8000b96 <_lseek>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d102      	bne.n	8003f6a <_lseek_r+0x1e>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	b103      	cbz	r3, 8003f6a <_lseek_r+0x1e>
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	20000274 	.word	0x20000274

08003f70 <_read_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4d07      	ldr	r5, [pc, #28]	@ (8003f90 <_read_r+0x20>)
 8003f74:	4604      	mov	r4, r0
 8003f76:	4608      	mov	r0, r1
 8003f78:	4611      	mov	r1, r2
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	602a      	str	r2, [r5, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f7fc fda9 	bl	8000ad6 <_read>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	d102      	bne.n	8003f8e <_read_r+0x1e>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	b103      	cbz	r3, 8003f8e <_read_r+0x1e>
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	20000274 	.word	0x20000274

08003f94 <_write_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4d07      	ldr	r5, [pc, #28]	@ (8003fb4 <_write_r+0x20>)
 8003f98:	4604      	mov	r4, r0
 8003f9a:	4608      	mov	r0, r1
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	602a      	str	r2, [r5, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f7fc fdb4 	bl	8000b10 <_write>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_write_r+0x1e>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_write_r+0x1e>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	20000274 	.word	0x20000274

08003fb8 <__errno>:
 8003fb8:	4b01      	ldr	r3, [pc, #4]	@ (8003fc0 <__errno+0x8>)
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000018 	.word	0x20000018

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003ffc <__libc_init_array+0x38>)
 8003fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8004000 <__libc_init_array+0x3c>)
 8003fca:	1b64      	subs	r4, r4, r5
 8003fcc:	10a4      	asrs	r4, r4, #2
 8003fce:	2600      	movs	r6, #0
 8003fd0:	42a6      	cmp	r6, r4
 8003fd2:	d109      	bne.n	8003fe8 <__libc_init_array+0x24>
 8003fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8004004 <__libc_init_array+0x40>)
 8003fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8004008 <__libc_init_array+0x44>)
 8003fd8:	f000 fd22 	bl	8004a20 <_init>
 8003fdc:	1b64      	subs	r4, r4, r5
 8003fde:	10a4      	asrs	r4, r4, #2
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	42a6      	cmp	r6, r4
 8003fe4:	d105      	bne.n	8003ff2 <__libc_init_array+0x2e>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fec:	4798      	blx	r3
 8003fee:	3601      	adds	r6, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__libc_init_array+0xc>
 8003ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff6:	4798      	blx	r3
 8003ff8:	3601      	adds	r6, #1
 8003ffa:	e7f2      	b.n	8003fe2 <__libc_init_array+0x1e>
 8003ffc:	08004b20 	.word	0x08004b20
 8004000:	08004b20 	.word	0x08004b20
 8004004:	08004b20 	.word	0x08004b20
 8004008:	08004b24 	.word	0x08004b24

0800400c <__retarget_lock_init_recursive>:
 800400c:	4770      	bx	lr

0800400e <__retarget_lock_acquire_recursive>:
 800400e:	4770      	bx	lr

08004010 <__retarget_lock_release_recursive>:
 8004010:	4770      	bx	lr
	...

08004014 <_free_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4605      	mov	r5, r0
 8004018:	2900      	cmp	r1, #0
 800401a:	d041      	beq.n	80040a0 <_free_r+0x8c>
 800401c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004020:	1f0c      	subs	r4, r1, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfb8      	it	lt
 8004026:	18e4      	addlt	r4, r4, r3
 8004028:	f000 f8e0 	bl	80041ec <__malloc_lock>
 800402c:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <_free_r+0x90>)
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	b933      	cbnz	r3, 8004040 <_free_r+0x2c>
 8004032:	6063      	str	r3, [r4, #4]
 8004034:	6014      	str	r4, [r2, #0]
 8004036:	4628      	mov	r0, r5
 8004038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800403c:	f000 b8dc 	b.w	80041f8 <__malloc_unlock>
 8004040:	42a3      	cmp	r3, r4
 8004042:	d908      	bls.n	8004056 <_free_r+0x42>
 8004044:	6820      	ldr	r0, [r4, #0]
 8004046:	1821      	adds	r1, r4, r0
 8004048:	428b      	cmp	r3, r1
 800404a:	bf01      	itttt	eq
 800404c:	6819      	ldreq	r1, [r3, #0]
 800404e:	685b      	ldreq	r3, [r3, #4]
 8004050:	1809      	addeq	r1, r1, r0
 8004052:	6021      	streq	r1, [r4, #0]
 8004054:	e7ed      	b.n	8004032 <_free_r+0x1e>
 8004056:	461a      	mov	r2, r3
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	b10b      	cbz	r3, 8004060 <_free_r+0x4c>
 800405c:	42a3      	cmp	r3, r4
 800405e:	d9fa      	bls.n	8004056 <_free_r+0x42>
 8004060:	6811      	ldr	r1, [r2, #0]
 8004062:	1850      	adds	r0, r2, r1
 8004064:	42a0      	cmp	r0, r4
 8004066:	d10b      	bne.n	8004080 <_free_r+0x6c>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	4401      	add	r1, r0
 800406c:	1850      	adds	r0, r2, r1
 800406e:	4283      	cmp	r3, r0
 8004070:	6011      	str	r1, [r2, #0]
 8004072:	d1e0      	bne.n	8004036 <_free_r+0x22>
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	6053      	str	r3, [r2, #4]
 800407a:	4408      	add	r0, r1
 800407c:	6010      	str	r0, [r2, #0]
 800407e:	e7da      	b.n	8004036 <_free_r+0x22>
 8004080:	d902      	bls.n	8004088 <_free_r+0x74>
 8004082:	230c      	movs	r3, #12
 8004084:	602b      	str	r3, [r5, #0]
 8004086:	e7d6      	b.n	8004036 <_free_r+0x22>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	1821      	adds	r1, r4, r0
 800408c:	428b      	cmp	r3, r1
 800408e:	bf04      	itt	eq
 8004090:	6819      	ldreq	r1, [r3, #0]
 8004092:	685b      	ldreq	r3, [r3, #4]
 8004094:	6063      	str	r3, [r4, #4]
 8004096:	bf04      	itt	eq
 8004098:	1809      	addeq	r1, r1, r0
 800409a:	6021      	streq	r1, [r4, #0]
 800409c:	6054      	str	r4, [r2, #4]
 800409e:	e7ca      	b.n	8004036 <_free_r+0x22>
 80040a0:	bd38      	pop	{r3, r4, r5, pc}
 80040a2:	bf00      	nop
 80040a4:	20000280 	.word	0x20000280

080040a8 <sbrk_aligned>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4e0f      	ldr	r6, [pc, #60]	@ (80040e8 <sbrk_aligned+0x40>)
 80040ac:	460c      	mov	r4, r1
 80040ae:	6831      	ldr	r1, [r6, #0]
 80040b0:	4605      	mov	r5, r0
 80040b2:	b911      	cbnz	r1, 80040ba <sbrk_aligned+0x12>
 80040b4:	f000 fca4 	bl	8004a00 <_sbrk_r>
 80040b8:	6030      	str	r0, [r6, #0]
 80040ba:	4621      	mov	r1, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	f000 fc9f 	bl	8004a00 <_sbrk_r>
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	d103      	bne.n	80040ce <sbrk_aligned+0x26>
 80040c6:	f04f 34ff 	mov.w	r4, #4294967295
 80040ca:	4620      	mov	r0, r4
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	1cc4      	adds	r4, r0, #3
 80040d0:	f024 0403 	bic.w	r4, r4, #3
 80040d4:	42a0      	cmp	r0, r4
 80040d6:	d0f8      	beq.n	80040ca <sbrk_aligned+0x22>
 80040d8:	1a21      	subs	r1, r4, r0
 80040da:	4628      	mov	r0, r5
 80040dc:	f000 fc90 	bl	8004a00 <_sbrk_r>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d1f2      	bne.n	80040ca <sbrk_aligned+0x22>
 80040e4:	e7ef      	b.n	80040c6 <sbrk_aligned+0x1e>
 80040e6:	bf00      	nop
 80040e8:	2000027c 	.word	0x2000027c

080040ec <_malloc_r>:
 80040ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f0:	1ccd      	adds	r5, r1, #3
 80040f2:	f025 0503 	bic.w	r5, r5, #3
 80040f6:	3508      	adds	r5, #8
 80040f8:	2d0c      	cmp	r5, #12
 80040fa:	bf38      	it	cc
 80040fc:	250c      	movcc	r5, #12
 80040fe:	2d00      	cmp	r5, #0
 8004100:	4606      	mov	r6, r0
 8004102:	db01      	blt.n	8004108 <_malloc_r+0x1c>
 8004104:	42a9      	cmp	r1, r5
 8004106:	d904      	bls.n	8004112 <_malloc_r+0x26>
 8004108:	230c      	movs	r3, #12
 800410a:	6033      	str	r3, [r6, #0]
 800410c:	2000      	movs	r0, #0
 800410e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041e8 <_malloc_r+0xfc>
 8004116:	f000 f869 	bl	80041ec <__malloc_lock>
 800411a:	f8d8 3000 	ldr.w	r3, [r8]
 800411e:	461c      	mov	r4, r3
 8004120:	bb44      	cbnz	r4, 8004174 <_malloc_r+0x88>
 8004122:	4629      	mov	r1, r5
 8004124:	4630      	mov	r0, r6
 8004126:	f7ff ffbf 	bl	80040a8 <sbrk_aligned>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	4604      	mov	r4, r0
 800412e:	d158      	bne.n	80041e2 <_malloc_r+0xf6>
 8004130:	f8d8 4000 	ldr.w	r4, [r8]
 8004134:	4627      	mov	r7, r4
 8004136:	2f00      	cmp	r7, #0
 8004138:	d143      	bne.n	80041c2 <_malloc_r+0xd6>
 800413a:	2c00      	cmp	r4, #0
 800413c:	d04b      	beq.n	80041d6 <_malloc_r+0xea>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	4639      	mov	r1, r7
 8004142:	4630      	mov	r0, r6
 8004144:	eb04 0903 	add.w	r9, r4, r3
 8004148:	f000 fc5a 	bl	8004a00 <_sbrk_r>
 800414c:	4581      	cmp	r9, r0
 800414e:	d142      	bne.n	80041d6 <_malloc_r+0xea>
 8004150:	6821      	ldr	r1, [r4, #0]
 8004152:	1a6d      	subs	r5, r5, r1
 8004154:	4629      	mov	r1, r5
 8004156:	4630      	mov	r0, r6
 8004158:	f7ff ffa6 	bl	80040a8 <sbrk_aligned>
 800415c:	3001      	adds	r0, #1
 800415e:	d03a      	beq.n	80041d6 <_malloc_r+0xea>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	442b      	add	r3, r5
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	f8d8 3000 	ldr.w	r3, [r8]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	bb62      	cbnz	r2, 80041c8 <_malloc_r+0xdc>
 800416e:	f8c8 7000 	str.w	r7, [r8]
 8004172:	e00f      	b.n	8004194 <_malloc_r+0xa8>
 8004174:	6822      	ldr	r2, [r4, #0]
 8004176:	1b52      	subs	r2, r2, r5
 8004178:	d420      	bmi.n	80041bc <_malloc_r+0xd0>
 800417a:	2a0b      	cmp	r2, #11
 800417c:	d917      	bls.n	80041ae <_malloc_r+0xc2>
 800417e:	1961      	adds	r1, r4, r5
 8004180:	42a3      	cmp	r3, r4
 8004182:	6025      	str	r5, [r4, #0]
 8004184:	bf18      	it	ne
 8004186:	6059      	strne	r1, [r3, #4]
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	bf08      	it	eq
 800418c:	f8c8 1000 	streq.w	r1, [r8]
 8004190:	5162      	str	r2, [r4, r5]
 8004192:	604b      	str	r3, [r1, #4]
 8004194:	4630      	mov	r0, r6
 8004196:	f000 f82f 	bl	80041f8 <__malloc_unlock>
 800419a:	f104 000b 	add.w	r0, r4, #11
 800419e:	1d23      	adds	r3, r4, #4
 80041a0:	f020 0007 	bic.w	r0, r0, #7
 80041a4:	1ac2      	subs	r2, r0, r3
 80041a6:	bf1c      	itt	ne
 80041a8:	1a1b      	subne	r3, r3, r0
 80041aa:	50a3      	strne	r3, [r4, r2]
 80041ac:	e7af      	b.n	800410e <_malloc_r+0x22>
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	bf0c      	ite	eq
 80041b4:	f8c8 2000 	streq.w	r2, [r8]
 80041b8:	605a      	strne	r2, [r3, #4]
 80041ba:	e7eb      	b.n	8004194 <_malloc_r+0xa8>
 80041bc:	4623      	mov	r3, r4
 80041be:	6864      	ldr	r4, [r4, #4]
 80041c0:	e7ae      	b.n	8004120 <_malloc_r+0x34>
 80041c2:	463c      	mov	r4, r7
 80041c4:	687f      	ldr	r7, [r7, #4]
 80041c6:	e7b6      	b.n	8004136 <_malloc_r+0x4a>
 80041c8:	461a      	mov	r2, r3
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d1fb      	bne.n	80041c8 <_malloc_r+0xdc>
 80041d0:	2300      	movs	r3, #0
 80041d2:	6053      	str	r3, [r2, #4]
 80041d4:	e7de      	b.n	8004194 <_malloc_r+0xa8>
 80041d6:	230c      	movs	r3, #12
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 f80c 	bl	80041f8 <__malloc_unlock>
 80041e0:	e794      	b.n	800410c <_malloc_r+0x20>
 80041e2:	6005      	str	r5, [r0, #0]
 80041e4:	e7d6      	b.n	8004194 <_malloc_r+0xa8>
 80041e6:	bf00      	nop
 80041e8:	20000280 	.word	0x20000280

080041ec <__malloc_lock>:
 80041ec:	4801      	ldr	r0, [pc, #4]	@ (80041f4 <__malloc_lock+0x8>)
 80041ee:	f7ff bf0e 	b.w	800400e <__retarget_lock_acquire_recursive>
 80041f2:	bf00      	nop
 80041f4:	20000278 	.word	0x20000278

080041f8 <__malloc_unlock>:
 80041f8:	4801      	ldr	r0, [pc, #4]	@ (8004200 <__malloc_unlock+0x8>)
 80041fa:	f7ff bf09 	b.w	8004010 <__retarget_lock_release_recursive>
 80041fe:	bf00      	nop
 8004200:	20000278 	.word	0x20000278

08004204 <__sfputc_r>:
 8004204:	6893      	ldr	r3, [r2, #8]
 8004206:	3b01      	subs	r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	b410      	push	{r4}
 800420c:	6093      	str	r3, [r2, #8]
 800420e:	da08      	bge.n	8004222 <__sfputc_r+0x1e>
 8004210:	6994      	ldr	r4, [r2, #24]
 8004212:	42a3      	cmp	r3, r4
 8004214:	db01      	blt.n	800421a <__sfputc_r+0x16>
 8004216:	290a      	cmp	r1, #10
 8004218:	d103      	bne.n	8004222 <__sfputc_r+0x1e>
 800421a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800421e:	f7ff bde8 	b.w	8003df2 <__swbuf_r>
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	1c58      	adds	r0, r3, #1
 8004226:	6010      	str	r0, [r2, #0]
 8004228:	7019      	strb	r1, [r3, #0]
 800422a:	4608      	mov	r0, r1
 800422c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004230:	4770      	bx	lr

08004232 <__sfputs_r>:
 8004232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004234:	4606      	mov	r6, r0
 8004236:	460f      	mov	r7, r1
 8004238:	4614      	mov	r4, r2
 800423a:	18d5      	adds	r5, r2, r3
 800423c:	42ac      	cmp	r4, r5
 800423e:	d101      	bne.n	8004244 <__sfputs_r+0x12>
 8004240:	2000      	movs	r0, #0
 8004242:	e007      	b.n	8004254 <__sfputs_r+0x22>
 8004244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004248:	463a      	mov	r2, r7
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff ffda 	bl	8004204 <__sfputc_r>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d1f3      	bne.n	800423c <__sfputs_r+0xa>
 8004254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004258 <_vfiprintf_r>:
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	460d      	mov	r5, r1
 800425e:	b09d      	sub	sp, #116	@ 0x74
 8004260:	4614      	mov	r4, r2
 8004262:	4698      	mov	r8, r3
 8004264:	4606      	mov	r6, r0
 8004266:	b118      	cbz	r0, 8004270 <_vfiprintf_r+0x18>
 8004268:	6a03      	ldr	r3, [r0, #32]
 800426a:	b90b      	cbnz	r3, 8004270 <_vfiprintf_r+0x18>
 800426c:	f7ff fcd8 	bl	8003c20 <__sinit>
 8004270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004272:	07d9      	lsls	r1, r3, #31
 8004274:	d405      	bmi.n	8004282 <_vfiprintf_r+0x2a>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	059a      	lsls	r2, r3, #22
 800427a:	d402      	bmi.n	8004282 <_vfiprintf_r+0x2a>
 800427c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800427e:	f7ff fec6 	bl	800400e <__retarget_lock_acquire_recursive>
 8004282:	89ab      	ldrh	r3, [r5, #12]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	d501      	bpl.n	800428c <_vfiprintf_r+0x34>
 8004288:	692b      	ldr	r3, [r5, #16]
 800428a:	b99b      	cbnz	r3, 80042b4 <_vfiprintf_r+0x5c>
 800428c:	4629      	mov	r1, r5
 800428e:	4630      	mov	r0, r6
 8004290:	f7ff fdee 	bl	8003e70 <__swsetup_r>
 8004294:	b170      	cbz	r0, 80042b4 <_vfiprintf_r+0x5c>
 8004296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004298:	07dc      	lsls	r4, r3, #31
 800429a:	d504      	bpl.n	80042a6 <_vfiprintf_r+0x4e>
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	b01d      	add	sp, #116	@ 0x74
 80042a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	0598      	lsls	r0, r3, #22
 80042aa:	d4f7      	bmi.n	800429c <_vfiprintf_r+0x44>
 80042ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042ae:	f7ff feaf 	bl	8004010 <__retarget_lock_release_recursive>
 80042b2:	e7f3      	b.n	800429c <_vfiprintf_r+0x44>
 80042b4:	2300      	movs	r3, #0
 80042b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b8:	2320      	movs	r3, #32
 80042ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042be:	f8cd 800c 	str.w	r8, [sp, #12]
 80042c2:	2330      	movs	r3, #48	@ 0x30
 80042c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004474 <_vfiprintf_r+0x21c>
 80042c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042cc:	f04f 0901 	mov.w	r9, #1
 80042d0:	4623      	mov	r3, r4
 80042d2:	469a      	mov	sl, r3
 80042d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042d8:	b10a      	cbz	r2, 80042de <_vfiprintf_r+0x86>
 80042da:	2a25      	cmp	r2, #37	@ 0x25
 80042dc:	d1f9      	bne.n	80042d2 <_vfiprintf_r+0x7a>
 80042de:	ebba 0b04 	subs.w	fp, sl, r4
 80042e2:	d00b      	beq.n	80042fc <_vfiprintf_r+0xa4>
 80042e4:	465b      	mov	r3, fp
 80042e6:	4622      	mov	r2, r4
 80042e8:	4629      	mov	r1, r5
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7ff ffa1 	bl	8004232 <__sfputs_r>
 80042f0:	3001      	adds	r0, #1
 80042f2:	f000 80a7 	beq.w	8004444 <_vfiprintf_r+0x1ec>
 80042f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042f8:	445a      	add	r2, fp
 80042fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80042fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 809f 	beq.w	8004444 <_vfiprintf_r+0x1ec>
 8004306:	2300      	movs	r3, #0
 8004308:	f04f 32ff 	mov.w	r2, #4294967295
 800430c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004310:	f10a 0a01 	add.w	sl, sl, #1
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	9307      	str	r3, [sp, #28]
 8004318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800431c:	931a      	str	r3, [sp, #104]	@ 0x68
 800431e:	4654      	mov	r4, sl
 8004320:	2205      	movs	r2, #5
 8004322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004326:	4853      	ldr	r0, [pc, #332]	@ (8004474 <_vfiprintf_r+0x21c>)
 8004328:	f7fb ff52 	bl	80001d0 <memchr>
 800432c:	9a04      	ldr	r2, [sp, #16]
 800432e:	b9d8      	cbnz	r0, 8004368 <_vfiprintf_r+0x110>
 8004330:	06d1      	lsls	r1, r2, #27
 8004332:	bf44      	itt	mi
 8004334:	2320      	movmi	r3, #32
 8004336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800433a:	0713      	lsls	r3, r2, #28
 800433c:	bf44      	itt	mi
 800433e:	232b      	movmi	r3, #43	@ 0x2b
 8004340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004344:	f89a 3000 	ldrb.w	r3, [sl]
 8004348:	2b2a      	cmp	r3, #42	@ 0x2a
 800434a:	d015      	beq.n	8004378 <_vfiprintf_r+0x120>
 800434c:	9a07      	ldr	r2, [sp, #28]
 800434e:	4654      	mov	r4, sl
 8004350:	2000      	movs	r0, #0
 8004352:	f04f 0c0a 	mov.w	ip, #10
 8004356:	4621      	mov	r1, r4
 8004358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800435c:	3b30      	subs	r3, #48	@ 0x30
 800435e:	2b09      	cmp	r3, #9
 8004360:	d94b      	bls.n	80043fa <_vfiprintf_r+0x1a2>
 8004362:	b1b0      	cbz	r0, 8004392 <_vfiprintf_r+0x13a>
 8004364:	9207      	str	r2, [sp, #28]
 8004366:	e014      	b.n	8004392 <_vfiprintf_r+0x13a>
 8004368:	eba0 0308 	sub.w	r3, r0, r8
 800436c:	fa09 f303 	lsl.w	r3, r9, r3
 8004370:	4313      	orrs	r3, r2
 8004372:	9304      	str	r3, [sp, #16]
 8004374:	46a2      	mov	sl, r4
 8004376:	e7d2      	b.n	800431e <_vfiprintf_r+0xc6>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	1d19      	adds	r1, r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	9103      	str	r1, [sp, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfbb      	ittet	lt
 8004384:	425b      	neglt	r3, r3
 8004386:	f042 0202 	orrlt.w	r2, r2, #2
 800438a:	9307      	strge	r3, [sp, #28]
 800438c:	9307      	strlt	r3, [sp, #28]
 800438e:	bfb8      	it	lt
 8004390:	9204      	strlt	r2, [sp, #16]
 8004392:	7823      	ldrb	r3, [r4, #0]
 8004394:	2b2e      	cmp	r3, #46	@ 0x2e
 8004396:	d10a      	bne.n	80043ae <_vfiprintf_r+0x156>
 8004398:	7863      	ldrb	r3, [r4, #1]
 800439a:	2b2a      	cmp	r3, #42	@ 0x2a
 800439c:	d132      	bne.n	8004404 <_vfiprintf_r+0x1ac>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	9203      	str	r2, [sp, #12]
 80043a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043aa:	3402      	adds	r4, #2
 80043ac:	9305      	str	r3, [sp, #20]
 80043ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004484 <_vfiprintf_r+0x22c>
 80043b2:	7821      	ldrb	r1, [r4, #0]
 80043b4:	2203      	movs	r2, #3
 80043b6:	4650      	mov	r0, sl
 80043b8:	f7fb ff0a 	bl	80001d0 <memchr>
 80043bc:	b138      	cbz	r0, 80043ce <_vfiprintf_r+0x176>
 80043be:	9b04      	ldr	r3, [sp, #16]
 80043c0:	eba0 000a 	sub.w	r0, r0, sl
 80043c4:	2240      	movs	r2, #64	@ 0x40
 80043c6:	4082      	lsls	r2, r0
 80043c8:	4313      	orrs	r3, r2
 80043ca:	3401      	adds	r4, #1
 80043cc:	9304      	str	r3, [sp, #16]
 80043ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d2:	4829      	ldr	r0, [pc, #164]	@ (8004478 <_vfiprintf_r+0x220>)
 80043d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043d8:	2206      	movs	r2, #6
 80043da:	f7fb fef9 	bl	80001d0 <memchr>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d03f      	beq.n	8004462 <_vfiprintf_r+0x20a>
 80043e2:	4b26      	ldr	r3, [pc, #152]	@ (800447c <_vfiprintf_r+0x224>)
 80043e4:	bb1b      	cbnz	r3, 800442e <_vfiprintf_r+0x1d6>
 80043e6:	9b03      	ldr	r3, [sp, #12]
 80043e8:	3307      	adds	r3, #7
 80043ea:	f023 0307 	bic.w	r3, r3, #7
 80043ee:	3308      	adds	r3, #8
 80043f0:	9303      	str	r3, [sp, #12]
 80043f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f4:	443b      	add	r3, r7
 80043f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80043f8:	e76a      	b.n	80042d0 <_vfiprintf_r+0x78>
 80043fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80043fe:	460c      	mov	r4, r1
 8004400:	2001      	movs	r0, #1
 8004402:	e7a8      	b.n	8004356 <_vfiprintf_r+0xfe>
 8004404:	2300      	movs	r3, #0
 8004406:	3401      	adds	r4, #1
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 0c0a 	mov.w	ip, #10
 8004410:	4620      	mov	r0, r4
 8004412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004416:	3a30      	subs	r2, #48	@ 0x30
 8004418:	2a09      	cmp	r2, #9
 800441a:	d903      	bls.n	8004424 <_vfiprintf_r+0x1cc>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0c6      	beq.n	80043ae <_vfiprintf_r+0x156>
 8004420:	9105      	str	r1, [sp, #20]
 8004422:	e7c4      	b.n	80043ae <_vfiprintf_r+0x156>
 8004424:	fb0c 2101 	mla	r1, ip, r1, r2
 8004428:	4604      	mov	r4, r0
 800442a:	2301      	movs	r3, #1
 800442c:	e7f0      	b.n	8004410 <_vfiprintf_r+0x1b8>
 800442e:	ab03      	add	r3, sp, #12
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	462a      	mov	r2, r5
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <_vfiprintf_r+0x228>)
 8004436:	a904      	add	r1, sp, #16
 8004438:	4630      	mov	r0, r6
 800443a:	f3af 8000 	nop.w
 800443e:	4607      	mov	r7, r0
 8004440:	1c78      	adds	r0, r7, #1
 8004442:	d1d6      	bne.n	80043f2 <_vfiprintf_r+0x19a>
 8004444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004446:	07d9      	lsls	r1, r3, #31
 8004448:	d405      	bmi.n	8004456 <_vfiprintf_r+0x1fe>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	059a      	lsls	r2, r3, #22
 800444e:	d402      	bmi.n	8004456 <_vfiprintf_r+0x1fe>
 8004450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004452:	f7ff fddd 	bl	8004010 <__retarget_lock_release_recursive>
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	065b      	lsls	r3, r3, #25
 800445a:	f53f af1f 	bmi.w	800429c <_vfiprintf_r+0x44>
 800445e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004460:	e71e      	b.n	80042a0 <_vfiprintf_r+0x48>
 8004462:	ab03      	add	r3, sp, #12
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	462a      	mov	r2, r5
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <_vfiprintf_r+0x228>)
 800446a:	a904      	add	r1, sp, #16
 800446c:	4630      	mov	r0, r6
 800446e:	f000 f879 	bl	8004564 <_printf_i>
 8004472:	e7e4      	b.n	800443e <_vfiprintf_r+0x1e6>
 8004474:	08004ae4 	.word	0x08004ae4
 8004478:	08004aee 	.word	0x08004aee
 800447c:	00000000 	.word	0x00000000
 8004480:	08004233 	.word	0x08004233
 8004484:	08004aea 	.word	0x08004aea

08004488 <_printf_common>:
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	4616      	mov	r6, r2
 800448e:	4698      	mov	r8, r3
 8004490:	688a      	ldr	r2, [r1, #8]
 8004492:	690b      	ldr	r3, [r1, #16]
 8004494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004498:	4293      	cmp	r3, r2
 800449a:	bfb8      	it	lt
 800449c:	4613      	movlt	r3, r2
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044a4:	4607      	mov	r7, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	b10a      	cbz	r2, 80044ae <_printf_common+0x26>
 80044aa:	3301      	adds	r3, #1
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	0699      	lsls	r1, r3, #26
 80044b2:	bf42      	ittt	mi
 80044b4:	6833      	ldrmi	r3, [r6, #0]
 80044b6:	3302      	addmi	r3, #2
 80044b8:	6033      	strmi	r3, [r6, #0]
 80044ba:	6825      	ldr	r5, [r4, #0]
 80044bc:	f015 0506 	ands.w	r5, r5, #6
 80044c0:	d106      	bne.n	80044d0 <_printf_common+0x48>
 80044c2:	f104 0a19 	add.w	sl, r4, #25
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	6832      	ldr	r2, [r6, #0]
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dc26      	bgt.n	800451e <_printf_common+0x96>
 80044d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	3b00      	subs	r3, #0
 80044d8:	bf18      	it	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	0692      	lsls	r2, r2, #26
 80044de:	d42b      	bmi.n	8004538 <_printf_common+0xb0>
 80044e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044e4:	4641      	mov	r1, r8
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c8      	blx	r9
 80044ea:	3001      	adds	r0, #1
 80044ec:	d01e      	beq.n	800452c <_printf_common+0xa4>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	6922      	ldr	r2, [r4, #16]
 80044f2:	f003 0306 	and.w	r3, r3, #6
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	bf02      	ittt	eq
 80044fa:	68e5      	ldreq	r5, [r4, #12]
 80044fc:	6833      	ldreq	r3, [r6, #0]
 80044fe:	1aed      	subeq	r5, r5, r3
 8004500:	68a3      	ldr	r3, [r4, #8]
 8004502:	bf0c      	ite	eq
 8004504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004508:	2500      	movne	r5, #0
 800450a:	4293      	cmp	r3, r2
 800450c:	bfc4      	itt	gt
 800450e:	1a9b      	subgt	r3, r3, r2
 8004510:	18ed      	addgt	r5, r5, r3
 8004512:	2600      	movs	r6, #0
 8004514:	341a      	adds	r4, #26
 8004516:	42b5      	cmp	r5, r6
 8004518:	d11a      	bne.n	8004550 <_printf_common+0xc8>
 800451a:	2000      	movs	r0, #0
 800451c:	e008      	b.n	8004530 <_printf_common+0xa8>
 800451e:	2301      	movs	r3, #1
 8004520:	4652      	mov	r2, sl
 8004522:	4641      	mov	r1, r8
 8004524:	4638      	mov	r0, r7
 8004526:	47c8      	blx	r9
 8004528:	3001      	adds	r0, #1
 800452a:	d103      	bne.n	8004534 <_printf_common+0xac>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	3501      	adds	r5, #1
 8004536:	e7c6      	b.n	80044c6 <_printf_common+0x3e>
 8004538:	18e1      	adds	r1, r4, r3
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	2030      	movs	r0, #48	@ 0x30
 800453e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004542:	4422      	add	r2, r4
 8004544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800454c:	3302      	adds	r3, #2
 800454e:	e7c7      	b.n	80044e0 <_printf_common+0x58>
 8004550:	2301      	movs	r3, #1
 8004552:	4622      	mov	r2, r4
 8004554:	4641      	mov	r1, r8
 8004556:	4638      	mov	r0, r7
 8004558:	47c8      	blx	r9
 800455a:	3001      	adds	r0, #1
 800455c:	d0e6      	beq.n	800452c <_printf_common+0xa4>
 800455e:	3601      	adds	r6, #1
 8004560:	e7d9      	b.n	8004516 <_printf_common+0x8e>
	...

08004564 <_printf_i>:
 8004564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	7e0f      	ldrb	r7, [r1, #24]
 800456a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800456c:	2f78      	cmp	r7, #120	@ 0x78
 800456e:	4691      	mov	r9, r2
 8004570:	4680      	mov	r8, r0
 8004572:	460c      	mov	r4, r1
 8004574:	469a      	mov	sl, r3
 8004576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800457a:	d807      	bhi.n	800458c <_printf_i+0x28>
 800457c:	2f62      	cmp	r7, #98	@ 0x62
 800457e:	d80a      	bhi.n	8004596 <_printf_i+0x32>
 8004580:	2f00      	cmp	r7, #0
 8004582:	f000 80d1 	beq.w	8004728 <_printf_i+0x1c4>
 8004586:	2f58      	cmp	r7, #88	@ 0x58
 8004588:	f000 80b8 	beq.w	80046fc <_printf_i+0x198>
 800458c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004594:	e03a      	b.n	800460c <_printf_i+0xa8>
 8004596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800459a:	2b15      	cmp	r3, #21
 800459c:	d8f6      	bhi.n	800458c <_printf_i+0x28>
 800459e:	a101      	add	r1, pc, #4	@ (adr r1, 80045a4 <_printf_i+0x40>)
 80045a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	08004611 	.word	0x08004611
 80045ac:	0800458d 	.word	0x0800458d
 80045b0:	0800458d 	.word	0x0800458d
 80045b4:	0800458d 	.word	0x0800458d
 80045b8:	0800458d 	.word	0x0800458d
 80045bc:	08004611 	.word	0x08004611
 80045c0:	0800458d 	.word	0x0800458d
 80045c4:	0800458d 	.word	0x0800458d
 80045c8:	0800458d 	.word	0x0800458d
 80045cc:	0800458d 	.word	0x0800458d
 80045d0:	0800470f 	.word	0x0800470f
 80045d4:	0800463b 	.word	0x0800463b
 80045d8:	080046c9 	.word	0x080046c9
 80045dc:	0800458d 	.word	0x0800458d
 80045e0:	0800458d 	.word	0x0800458d
 80045e4:	08004731 	.word	0x08004731
 80045e8:	0800458d 	.word	0x0800458d
 80045ec:	0800463b 	.word	0x0800463b
 80045f0:	0800458d 	.word	0x0800458d
 80045f4:	0800458d 	.word	0x0800458d
 80045f8:	080046d1 	.word	0x080046d1
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800460c:	2301      	movs	r3, #1
 800460e:	e09c      	b.n	800474a <_printf_i+0x1e6>
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	1d19      	adds	r1, r3, #4
 8004616:	6031      	str	r1, [r6, #0]
 8004618:	0606      	lsls	r6, r0, #24
 800461a:	d501      	bpl.n	8004620 <_printf_i+0xbc>
 800461c:	681d      	ldr	r5, [r3, #0]
 800461e:	e003      	b.n	8004628 <_printf_i+0xc4>
 8004620:	0645      	lsls	r5, r0, #25
 8004622:	d5fb      	bpl.n	800461c <_printf_i+0xb8>
 8004624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004628:	2d00      	cmp	r5, #0
 800462a:	da03      	bge.n	8004634 <_printf_i+0xd0>
 800462c:	232d      	movs	r3, #45	@ 0x2d
 800462e:	426d      	negs	r5, r5
 8004630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004634:	4858      	ldr	r0, [pc, #352]	@ (8004798 <_printf_i+0x234>)
 8004636:	230a      	movs	r3, #10
 8004638:	e011      	b.n	800465e <_printf_i+0xfa>
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	0608      	lsls	r0, r1, #24
 8004640:	f853 5b04 	ldr.w	r5, [r3], #4
 8004644:	d402      	bmi.n	800464c <_printf_i+0xe8>
 8004646:	0649      	lsls	r1, r1, #25
 8004648:	bf48      	it	mi
 800464a:	b2ad      	uxthmi	r5, r5
 800464c:	2f6f      	cmp	r7, #111	@ 0x6f
 800464e:	4852      	ldr	r0, [pc, #328]	@ (8004798 <_printf_i+0x234>)
 8004650:	6033      	str	r3, [r6, #0]
 8004652:	bf14      	ite	ne
 8004654:	230a      	movne	r3, #10
 8004656:	2308      	moveq	r3, #8
 8004658:	2100      	movs	r1, #0
 800465a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800465e:	6866      	ldr	r6, [r4, #4]
 8004660:	60a6      	str	r6, [r4, #8]
 8004662:	2e00      	cmp	r6, #0
 8004664:	db05      	blt.n	8004672 <_printf_i+0x10e>
 8004666:	6821      	ldr	r1, [r4, #0]
 8004668:	432e      	orrs	r6, r5
 800466a:	f021 0104 	bic.w	r1, r1, #4
 800466e:	6021      	str	r1, [r4, #0]
 8004670:	d04b      	beq.n	800470a <_printf_i+0x1a6>
 8004672:	4616      	mov	r6, r2
 8004674:	fbb5 f1f3 	udiv	r1, r5, r3
 8004678:	fb03 5711 	mls	r7, r3, r1, r5
 800467c:	5dc7      	ldrb	r7, [r0, r7]
 800467e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004682:	462f      	mov	r7, r5
 8004684:	42bb      	cmp	r3, r7
 8004686:	460d      	mov	r5, r1
 8004688:	d9f4      	bls.n	8004674 <_printf_i+0x110>
 800468a:	2b08      	cmp	r3, #8
 800468c:	d10b      	bne.n	80046a6 <_printf_i+0x142>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	07df      	lsls	r7, r3, #31
 8004692:	d508      	bpl.n	80046a6 <_printf_i+0x142>
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	6861      	ldr	r1, [r4, #4]
 8004698:	4299      	cmp	r1, r3
 800469a:	bfde      	ittt	le
 800469c:	2330      	movle	r3, #48	@ 0x30
 800469e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046a6:	1b92      	subs	r2, r2, r6
 80046a8:	6122      	str	r2, [r4, #16]
 80046aa:	f8cd a000 	str.w	sl, [sp]
 80046ae:	464b      	mov	r3, r9
 80046b0:	aa03      	add	r2, sp, #12
 80046b2:	4621      	mov	r1, r4
 80046b4:	4640      	mov	r0, r8
 80046b6:	f7ff fee7 	bl	8004488 <_printf_common>
 80046ba:	3001      	adds	r0, #1
 80046bc:	d14a      	bne.n	8004754 <_printf_i+0x1f0>
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	b004      	add	sp, #16
 80046c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f043 0320 	orr.w	r3, r3, #32
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	4832      	ldr	r0, [pc, #200]	@ (800479c <_printf_i+0x238>)
 80046d2:	2778      	movs	r7, #120	@ 0x78
 80046d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	6831      	ldr	r1, [r6, #0]
 80046dc:	061f      	lsls	r7, r3, #24
 80046de:	f851 5b04 	ldr.w	r5, [r1], #4
 80046e2:	d402      	bmi.n	80046ea <_printf_i+0x186>
 80046e4:	065f      	lsls	r7, r3, #25
 80046e6:	bf48      	it	mi
 80046e8:	b2ad      	uxthmi	r5, r5
 80046ea:	6031      	str	r1, [r6, #0]
 80046ec:	07d9      	lsls	r1, r3, #31
 80046ee:	bf44      	itt	mi
 80046f0:	f043 0320 	orrmi.w	r3, r3, #32
 80046f4:	6023      	strmi	r3, [r4, #0]
 80046f6:	b11d      	cbz	r5, 8004700 <_printf_i+0x19c>
 80046f8:	2310      	movs	r3, #16
 80046fa:	e7ad      	b.n	8004658 <_printf_i+0xf4>
 80046fc:	4826      	ldr	r0, [pc, #152]	@ (8004798 <_printf_i+0x234>)
 80046fe:	e7e9      	b.n	80046d4 <_printf_i+0x170>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	f023 0320 	bic.w	r3, r3, #32
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	e7f6      	b.n	80046f8 <_printf_i+0x194>
 800470a:	4616      	mov	r6, r2
 800470c:	e7bd      	b.n	800468a <_printf_i+0x126>
 800470e:	6833      	ldr	r3, [r6, #0]
 8004710:	6825      	ldr	r5, [r4, #0]
 8004712:	6961      	ldr	r1, [r4, #20]
 8004714:	1d18      	adds	r0, r3, #4
 8004716:	6030      	str	r0, [r6, #0]
 8004718:	062e      	lsls	r6, r5, #24
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	d501      	bpl.n	8004722 <_printf_i+0x1be>
 800471e:	6019      	str	r1, [r3, #0]
 8004720:	e002      	b.n	8004728 <_printf_i+0x1c4>
 8004722:	0668      	lsls	r0, r5, #25
 8004724:	d5fb      	bpl.n	800471e <_printf_i+0x1ba>
 8004726:	8019      	strh	r1, [r3, #0]
 8004728:	2300      	movs	r3, #0
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	4616      	mov	r6, r2
 800472e:	e7bc      	b.n	80046aa <_printf_i+0x146>
 8004730:	6833      	ldr	r3, [r6, #0]
 8004732:	1d1a      	adds	r2, r3, #4
 8004734:	6032      	str	r2, [r6, #0]
 8004736:	681e      	ldr	r6, [r3, #0]
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	2100      	movs	r1, #0
 800473c:	4630      	mov	r0, r6
 800473e:	f7fb fd47 	bl	80001d0 <memchr>
 8004742:	b108      	cbz	r0, 8004748 <_printf_i+0x1e4>
 8004744:	1b80      	subs	r0, r0, r6
 8004746:	6060      	str	r0, [r4, #4]
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	2300      	movs	r3, #0
 800474e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004752:	e7aa      	b.n	80046aa <_printf_i+0x146>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	4632      	mov	r2, r6
 8004758:	4649      	mov	r1, r9
 800475a:	4640      	mov	r0, r8
 800475c:	47d0      	blx	sl
 800475e:	3001      	adds	r0, #1
 8004760:	d0ad      	beq.n	80046be <_printf_i+0x15a>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	079b      	lsls	r3, r3, #30
 8004766:	d413      	bmi.n	8004790 <_printf_i+0x22c>
 8004768:	68e0      	ldr	r0, [r4, #12]
 800476a:	9b03      	ldr	r3, [sp, #12]
 800476c:	4298      	cmp	r0, r3
 800476e:	bfb8      	it	lt
 8004770:	4618      	movlt	r0, r3
 8004772:	e7a6      	b.n	80046c2 <_printf_i+0x15e>
 8004774:	2301      	movs	r3, #1
 8004776:	4632      	mov	r2, r6
 8004778:	4649      	mov	r1, r9
 800477a:	4640      	mov	r0, r8
 800477c:	47d0      	blx	sl
 800477e:	3001      	adds	r0, #1
 8004780:	d09d      	beq.n	80046be <_printf_i+0x15a>
 8004782:	3501      	adds	r5, #1
 8004784:	68e3      	ldr	r3, [r4, #12]
 8004786:	9903      	ldr	r1, [sp, #12]
 8004788:	1a5b      	subs	r3, r3, r1
 800478a:	42ab      	cmp	r3, r5
 800478c:	dcf2      	bgt.n	8004774 <_printf_i+0x210>
 800478e:	e7eb      	b.n	8004768 <_printf_i+0x204>
 8004790:	2500      	movs	r5, #0
 8004792:	f104 0619 	add.w	r6, r4, #25
 8004796:	e7f5      	b.n	8004784 <_printf_i+0x220>
 8004798:	08004af5 	.word	0x08004af5
 800479c:	08004b06 	.word	0x08004b06

080047a0 <__sflush_r>:
 80047a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a8:	0716      	lsls	r6, r2, #28
 80047aa:	4605      	mov	r5, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	d454      	bmi.n	800485a <__sflush_r+0xba>
 80047b0:	684b      	ldr	r3, [r1, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	dc02      	bgt.n	80047bc <__sflush_r+0x1c>
 80047b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	dd48      	ble.n	800484e <__sflush_r+0xae>
 80047bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d045      	beq.n	800484e <__sflush_r+0xae>
 80047c2:	2300      	movs	r3, #0
 80047c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047c8:	682f      	ldr	r7, [r5, #0]
 80047ca:	6a21      	ldr	r1, [r4, #32]
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	d030      	beq.n	8004832 <__sflush_r+0x92>
 80047d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0759      	lsls	r1, r3, #29
 80047d6:	d505      	bpl.n	80047e4 <__sflush_r+0x44>
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047de:	b10b      	cbz	r3, 80047e4 <__sflush_r+0x44>
 80047e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	2300      	movs	r3, #0
 80047e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047e8:	6a21      	ldr	r1, [r4, #32]
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b0      	blx	r6
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	d106      	bne.n	8004802 <__sflush_r+0x62>
 80047f4:	6829      	ldr	r1, [r5, #0]
 80047f6:	291d      	cmp	r1, #29
 80047f8:	d82b      	bhi.n	8004852 <__sflush_r+0xb2>
 80047fa:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <__sflush_r+0x104>)
 80047fc:	40ca      	lsrs	r2, r1
 80047fe:	07d6      	lsls	r6, r2, #31
 8004800:	d527      	bpl.n	8004852 <__sflush_r+0xb2>
 8004802:	2200      	movs	r2, #0
 8004804:	6062      	str	r2, [r4, #4]
 8004806:	04d9      	lsls	r1, r3, #19
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	6022      	str	r2, [r4, #0]
 800480c:	d504      	bpl.n	8004818 <__sflush_r+0x78>
 800480e:	1c42      	adds	r2, r0, #1
 8004810:	d101      	bne.n	8004816 <__sflush_r+0x76>
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	b903      	cbnz	r3, 8004818 <__sflush_r+0x78>
 8004816:	6560      	str	r0, [r4, #84]	@ 0x54
 8004818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800481a:	602f      	str	r7, [r5, #0]
 800481c:	b1b9      	cbz	r1, 800484e <__sflush_r+0xae>
 800481e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004822:	4299      	cmp	r1, r3
 8004824:	d002      	beq.n	800482c <__sflush_r+0x8c>
 8004826:	4628      	mov	r0, r5
 8004828:	f7ff fbf4 	bl	8004014 <_free_r>
 800482c:	2300      	movs	r3, #0
 800482e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004830:	e00d      	b.n	800484e <__sflush_r+0xae>
 8004832:	2301      	movs	r3, #1
 8004834:	4628      	mov	r0, r5
 8004836:	47b0      	blx	r6
 8004838:	4602      	mov	r2, r0
 800483a:	1c50      	adds	r0, r2, #1
 800483c:	d1c9      	bne.n	80047d2 <__sflush_r+0x32>
 800483e:	682b      	ldr	r3, [r5, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0c6      	beq.n	80047d2 <__sflush_r+0x32>
 8004844:	2b1d      	cmp	r3, #29
 8004846:	d001      	beq.n	800484c <__sflush_r+0xac>
 8004848:	2b16      	cmp	r3, #22
 800484a:	d11e      	bne.n	800488a <__sflush_r+0xea>
 800484c:	602f      	str	r7, [r5, #0]
 800484e:	2000      	movs	r0, #0
 8004850:	e022      	b.n	8004898 <__sflush_r+0xf8>
 8004852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004856:	b21b      	sxth	r3, r3
 8004858:	e01b      	b.n	8004892 <__sflush_r+0xf2>
 800485a:	690f      	ldr	r7, [r1, #16]
 800485c:	2f00      	cmp	r7, #0
 800485e:	d0f6      	beq.n	800484e <__sflush_r+0xae>
 8004860:	0793      	lsls	r3, r2, #30
 8004862:	680e      	ldr	r6, [r1, #0]
 8004864:	bf08      	it	eq
 8004866:	694b      	ldreq	r3, [r1, #20]
 8004868:	600f      	str	r7, [r1, #0]
 800486a:	bf18      	it	ne
 800486c:	2300      	movne	r3, #0
 800486e:	eba6 0807 	sub.w	r8, r6, r7
 8004872:	608b      	str	r3, [r1, #8]
 8004874:	f1b8 0f00 	cmp.w	r8, #0
 8004878:	dde9      	ble.n	800484e <__sflush_r+0xae>
 800487a:	6a21      	ldr	r1, [r4, #32]
 800487c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800487e:	4643      	mov	r3, r8
 8004880:	463a      	mov	r2, r7
 8004882:	4628      	mov	r0, r5
 8004884:	47b0      	blx	r6
 8004886:	2800      	cmp	r0, #0
 8004888:	dc08      	bgt.n	800489c <__sflush_r+0xfc>
 800488a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004892:	81a3      	strh	r3, [r4, #12]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800489c:	4407      	add	r7, r0
 800489e:	eba8 0800 	sub.w	r8, r8, r0
 80048a2:	e7e7      	b.n	8004874 <__sflush_r+0xd4>
 80048a4:	20400001 	.word	0x20400001

080048a8 <_fflush_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	4605      	mov	r5, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	b913      	cbnz	r3, 80048b8 <_fflush_r+0x10>
 80048b2:	2500      	movs	r5, #0
 80048b4:	4628      	mov	r0, r5
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	b118      	cbz	r0, 80048c2 <_fflush_r+0x1a>
 80048ba:	6a03      	ldr	r3, [r0, #32]
 80048bc:	b90b      	cbnz	r3, 80048c2 <_fflush_r+0x1a>
 80048be:	f7ff f9af 	bl	8003c20 <__sinit>
 80048c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f3      	beq.n	80048b2 <_fflush_r+0xa>
 80048ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048cc:	07d0      	lsls	r0, r2, #31
 80048ce:	d404      	bmi.n	80048da <_fflush_r+0x32>
 80048d0:	0599      	lsls	r1, r3, #22
 80048d2:	d402      	bmi.n	80048da <_fflush_r+0x32>
 80048d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048d6:	f7ff fb9a 	bl	800400e <__retarget_lock_acquire_recursive>
 80048da:	4628      	mov	r0, r5
 80048dc:	4621      	mov	r1, r4
 80048de:	f7ff ff5f 	bl	80047a0 <__sflush_r>
 80048e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048e4:	07da      	lsls	r2, r3, #31
 80048e6:	4605      	mov	r5, r0
 80048e8:	d4e4      	bmi.n	80048b4 <_fflush_r+0xc>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	059b      	lsls	r3, r3, #22
 80048ee:	d4e1      	bmi.n	80048b4 <_fflush_r+0xc>
 80048f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048f2:	f7ff fb8d 	bl	8004010 <__retarget_lock_release_recursive>
 80048f6:	e7dd      	b.n	80048b4 <_fflush_r+0xc>

080048f8 <__swhatbuf_r>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	460c      	mov	r4, r1
 80048fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004900:	2900      	cmp	r1, #0
 8004902:	b096      	sub	sp, #88	@ 0x58
 8004904:	4615      	mov	r5, r2
 8004906:	461e      	mov	r6, r3
 8004908:	da0d      	bge.n	8004926 <__swhatbuf_r+0x2e>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	bf14      	ite	ne
 8004916:	2340      	movne	r3, #64	@ 0x40
 8004918:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800491c:	2000      	movs	r0, #0
 800491e:	6031      	str	r1, [r6, #0]
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	b016      	add	sp, #88	@ 0x58
 8004924:	bd70      	pop	{r4, r5, r6, pc}
 8004926:	466a      	mov	r2, sp
 8004928:	f000 f848 	bl	80049bc <_fstat_r>
 800492c:	2800      	cmp	r0, #0
 800492e:	dbec      	blt.n	800490a <__swhatbuf_r+0x12>
 8004930:	9901      	ldr	r1, [sp, #4]
 8004932:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004936:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800493a:	4259      	negs	r1, r3
 800493c:	4159      	adcs	r1, r3
 800493e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004942:	e7eb      	b.n	800491c <__swhatbuf_r+0x24>

08004944 <__smakebuf_r>:
 8004944:	898b      	ldrh	r3, [r1, #12]
 8004946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004948:	079d      	lsls	r5, r3, #30
 800494a:	4606      	mov	r6, r0
 800494c:	460c      	mov	r4, r1
 800494e:	d507      	bpl.n	8004960 <__smakebuf_r+0x1c>
 8004950:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	2301      	movs	r3, #1
 800495a:	6163      	str	r3, [r4, #20]
 800495c:	b003      	add	sp, #12
 800495e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004960:	ab01      	add	r3, sp, #4
 8004962:	466a      	mov	r2, sp
 8004964:	f7ff ffc8 	bl	80048f8 <__swhatbuf_r>
 8004968:	9f00      	ldr	r7, [sp, #0]
 800496a:	4605      	mov	r5, r0
 800496c:	4639      	mov	r1, r7
 800496e:	4630      	mov	r0, r6
 8004970:	f7ff fbbc 	bl	80040ec <_malloc_r>
 8004974:	b948      	cbnz	r0, 800498a <__smakebuf_r+0x46>
 8004976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497a:	059a      	lsls	r2, r3, #22
 800497c:	d4ee      	bmi.n	800495c <__smakebuf_r+0x18>
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	f043 0302 	orr.w	r3, r3, #2
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	e7e2      	b.n	8004950 <__smakebuf_r+0xc>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	6020      	str	r0, [r4, #0]
 800498e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800499a:	b15b      	cbz	r3, 80049b4 <__smakebuf_r+0x70>
 800499c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f81d 	bl	80049e0 <_isatty_r>
 80049a6:	b128      	cbz	r0, 80049b4 <__smakebuf_r+0x70>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	431d      	orrs	r5, r3
 80049b8:	81a5      	strh	r5, [r4, #12]
 80049ba:	e7cf      	b.n	800495c <__smakebuf_r+0x18>

080049bc <_fstat_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4d07      	ldr	r5, [pc, #28]	@ (80049dc <_fstat_r+0x20>)
 80049c0:	2300      	movs	r3, #0
 80049c2:	4604      	mov	r4, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	f7fc f8c9 	bl	8000b60 <_fstat>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d102      	bne.n	80049d8 <_fstat_r+0x1c>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	b103      	cbz	r3, 80049d8 <_fstat_r+0x1c>
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	bf00      	nop
 80049dc:	20000274 	.word	0x20000274

080049e0 <_isatty_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d06      	ldr	r5, [pc, #24]	@ (80049fc <_isatty_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc f8c8 	bl	8000b80 <_isatty>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_isatty_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_isatty_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000274 	.word	0x20000274

08004a00 <_sbrk_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d06      	ldr	r5, [pc, #24]	@ (8004a1c <_sbrk_r+0x1c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fc f8d0 	bl	8000bb0 <_sbrk>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_sbrk_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_sbrk_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	20000274 	.word	0x20000274

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
