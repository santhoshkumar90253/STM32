
09_UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003920  08003920  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003920  08003920  00004920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003928  08003928  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800392c  0800392c  0000492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003930  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000024  08003954  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003954  000050d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7f9  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179b  00000000  00000000  0000f84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00010fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ba  00000000  00000000  000118b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c78  00000000  00000000  00011f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a351  00000000  00000000  00036be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ccd  00000000  00000000  00040f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124c00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  00124c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00126f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038c0 	.word	0x080038c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080038c0 	.word	0x080038c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	db0b      	blt.n	800051e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 021f 	and.w	r2, r3, #31
 800050c:	4907      	ldr	r1, [pc, #28]	@ (800052c <__NVIC_EnableIRQ+0x38>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	2001      	movs	r0, #1
 8000516:	fa00 f202 	lsl.w	r2, r0, r2
 800051a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000e100 	.word	0xe000e100

08000530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db0a      	blt.n	800055a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	490c      	ldr	r1, [pc, #48]	@ (800057c <__NVIC_SetPriority+0x4c>)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	0112      	lsls	r2, r2, #4
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	440b      	add	r3, r1
 8000554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000558:	e00a      	b.n	8000570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4908      	ldr	r1, [pc, #32]	@ (8000580 <__NVIC_SetPriority+0x50>)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	f003 030f 	and.w	r3, r3, #15
 8000566:	3b04      	subs	r3, #4
 8000568:	0112      	lsls	r2, r2, #4
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	440b      	add	r3, r1
 800056e:	761a      	strb	r2, [r3, #24]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000e100 	.word	0xe000e100
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fa0a 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f816 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8ae 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f864 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, uartTxMsg, sizeof(uartTxMsg)-1);
 8000598:	2216      	movs	r2, #22
 800059a:	4905      	ldr	r1, [pc, #20]	@ (80005b0 <main+0x2c>)
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <main+0x30>)
 800059e:	f002 f891 	bl	80026c4 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &uartRxmsg, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <main+0x34>)
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <main+0x30>)
 80005a8:	f002 f8ea 	bl	8002780 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x28>
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000040 	.word	0x20000040
 80005b8:	200000c8 	.word	0x200000c8

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	@ 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	@ 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f94c 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005e2:	f000 fd0f 	bl	8001004 <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ec:	f000 f8e6 	bl	80007bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2310      	movs	r3, #16
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800060a:	230a      	movs	r3, #10
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd46 	bl	80010b0 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800062a:	f000 f8c7 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f90e 	bl	8001868 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000652:	f000 f8b3 	bl	80007bc <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	@ 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
  __HAL_RCC_USART2_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_USART2_UART_Init+0x84>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066a:	4a1e      	ldr	r2, [pc, #120]	@ (80006e4 <MX_USART2_UART_Init+0x84>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	6593      	str	r3, [r2, #88]	@ 0x58
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_USART2_UART_Init+0x84>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 8000680:	4a1a      	ldr	r2, [pc, #104]	@ (80006ec <MX_USART2_UART_Init+0x8c>)
 8000682:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 8000686:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006a0:	220c      	movs	r2, #12
 80006a2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006bc:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006be:	f001 ffb3 	bl	8002628 <HAL_UART_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80006c8:	f000 f878 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  NVIC_SetPriority(USART2_IRQn,0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2026      	movs	r0, #38	@ 0x26
 80006d0:	f7ff ff2e 	bl	8000530 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80006d4:	2026      	movs	r0, #38	@ 0x26
 80006d6:	f7ff ff0d 	bl	80004f4 <__NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	20000040 	.word	0x20000040
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f000 fc23 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000778:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0xc8>)
 800078a:	f000 fa6b 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078e:	2320      	movs	r3, #32
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 fa5c 	bl	8000c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000800 	.word	0x48000800

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	@ (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0ac      	sub	sp, #176	@ 0xb0
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2288      	movs	r2, #136	@ 0x88
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f003 f819 	bl	8003868 <memset>
  if(huart->Instance==USART2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a21      	ldr	r2, [pc, #132]	@ (80008c0 <HAL_UART_MspInit+0xb0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d13b      	bne.n	80008b8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000844:	2300      	movs	r3, #0
 8000846:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fa2f 	bl	8001cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000858:	f7ff ffb0 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <HAL_UART_MspInit+0xb4>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000860:	4a18      	ldr	r2, [pc, #96]	@ (80008c4 <HAL_UART_MspInit+0xb4>)
 8000862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000866:	6593      	str	r3, [r2, #88]	@ 0x58
 8000868:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <HAL_UART_MspInit+0xb4>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <HAL_UART_MspInit+0xb4>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <HAL_UART_MspInit+0xb4>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_UART_MspInit+0xb4>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088c:	230c      	movs	r3, #12
 800088e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	2307      	movs	r3, #7
 80008a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 f9d6 	bl	8000c64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008b8:	bf00      	nop
 80008ba:	37b0      	adds	r7, #176	@ 0xb0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40004400 	.word	0x40004400
 80008c4:	40021000 	.word	0x40021000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091e:	f000 f89b 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	@ (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff ffea 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 ff7d 	bl	8003878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fe01 	bl	8000584 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000990:	08003930 	.word	0x08003930
  ldr r2, =_sbss
 8000994:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000998:	200000d0 	.word	0x200000d0

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_Init+0x3c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0b      	ldr	r2, [pc, #44]	@ (80009dc <HAL_Init+0x3c>)
 80009b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 f920 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f80f 	bl	80009e0 <HAL_InitTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f7ff fefb 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <HAL_InitTick+0x6c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d023      	beq.n	8000a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009f4:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <HAL_InitTick+0x70>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_InitTick+0x6c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f91d 	bl	8000c4a <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d10f      	bne.n	8000a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d809      	bhi.n	8000a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f8f5 	bl	8000c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_InitTick+0x74>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	e007      	b.n	8000a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e004      	b.n	8000a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	e001      	b.n	8000a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000020 	.word	0x20000020
 8000a50:	20000018 	.word	0x20000018
 8000a54:	2000001c 	.word	0x2000001c

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000020 	.word	0x20000020
 8000a7c:	200000cc 	.word	0x200000cc

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000cc 	.word	0x200000cc

08000a98 <__NVIC_SetPriorityGrouping>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_SetPriority>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	@ (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	@ 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff47 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff5c 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff8e 	bl	8000b50 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffb0 	bl	8000bb8 <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e17f      	b.n	8000f74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8171 	beq.w	8000f6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d005      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d130      	bne.n	8000d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	f003 0201 	and.w	r2, r3, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d118      	bne.n	8000d44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	f003 0201 	and.w	r2, r3, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d017      	beq.n	8000d80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d123      	bne.n	8000dd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0203 	and.w	r2, r3, #3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80ac 	beq.w	8000f6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b5f      	ldr	r3, [pc, #380]	@ (8000f94 <HAL_GPIO_Init+0x330>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8000f94 <HAL_GPIO_Init+0x330>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e22:	4b5c      	ldr	r3, [pc, #368]	@ (8000f94 <HAL_GPIO_Init+0x330>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8000f98 <HAL_GPIO_Init+0x334>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x242>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f9c <HAL_GPIO_Init+0x338>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x23e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa0 <HAL_GPIO_Init+0x33c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x23a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa4 <HAL_GPIO_Init+0x340>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x236>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa8 <HAL_GPIO_Init+0x344>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x232>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000fac <HAL_GPIO_Init+0x348>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb0 <HAL_GPIO_Init+0x34c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	e00c      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb8:	4937      	ldr	r1, [pc, #220]	@ (8000f98 <HAL_GPIO_Init+0x334>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eea:	4a32      	ldr	r2, [pc, #200]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f14:	4a27      	ldr	r2, [pc, #156]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f68:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f ae78 	bne.w	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000c00 	.word	0x48000c00
 8000fa8:	48001000 	.word	0x48001000
 8000fac:	48001400 	.word	0x48001400
 8000fb0:	48001800 	.word	0x48001800
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001012:	d130      	bne.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001014:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800101c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001020:	d038      	beq.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800102a:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2232      	movs	r2, #50	@ 0x32
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	e002      	b.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3b01      	subs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800105c:	d102      	bne.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f2      	bne.n	800104a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001070:	d110      	bne.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e00f      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001082:	d007      	beq.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800108c:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000
 80010a8:	20000018 	.word	0x20000018
 80010ac:	431bde83 	.word	0x431bde83

080010b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e3ca      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c2:	4b97      	ldr	r3, [pc, #604]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010cc:	4b94      	ldr	r3, [pc, #592]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80e4 	beq.w	80012ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_RCC_OscConfig+0x4a>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	f040 808b 	bne.w	8001208 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	f040 8087 	bne.w	8001208 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fa:	4b89      	ldr	r3, [pc, #548]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x62>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e3a2      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1a      	ldr	r2, [r3, #32]
 8001116:	4b82      	ldr	r3, [pc, #520]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <HAL_RCC_OscConfig+0x7c>
 8001122:	4b7f      	ldr	r3, [pc, #508]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800112a:	e005      	b.n	8001138 <HAL_RCC_OscConfig+0x88>
 800112c:	4b7c      	ldr	r3, [pc, #496]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800112e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001138:	4293      	cmp	r3, r2
 800113a:	d223      	bcs.n	8001184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fd55 	bl	8001bf0 <RCC_SetFlashLatencyFromMSIRange>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e383      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001150:	4b73      	ldr	r3, [pc, #460]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a72      	ldr	r2, [pc, #456]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b70      	ldr	r3, [pc, #448]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	496d      	ldr	r1, [pc, #436]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116e:	4b6c      	ldr	r3, [pc, #432]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	4968      	ldr	r1, [pc, #416]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
 8001182:	e025      	b.n	80011d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001184:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b63      	ldr	r3, [pc, #396]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4960      	ldr	r1, [pc, #384]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	495b      	ldr	r1, [pc, #364]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd15 	bl	8001bf0 <RCC_SetFlashLatencyFromMSIRange>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e343      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011d0:	f000 fc4a 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b52      	ldr	r3, [pc, #328]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	4950      	ldr	r1, [pc, #320]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_RCC_OscConfig+0x278>)
 80011ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011f0:	4b4e      	ldr	r3, [pc, #312]	@ (800132c <HAL_RCC_OscConfig+0x27c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fbf3 	bl	80009e0 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d052      	beq.n	80012aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	e327      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d032      	beq.n	8001276 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001210:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a42      	ldr	r2, [pc, #264]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121c:	f7ff fc30 	bl	8000a80 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001224:	f7ff fc2c 	bl	8000a80 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e310      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001236:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	4b37      	ldr	r3, [pc, #220]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a36      	ldr	r2, [pc, #216]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4931      	ldr	r1, [pc, #196]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	492c      	ldr	r1, [pc, #176]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e01a      	b.n	80012ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001282:	f7ff fbfd 	bl	8000a80 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128a:	f7ff fbf9 	bl	8000a80 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e2dd      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x1da>
 80012a8:	e000      	b.n	80012ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d074      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x21a>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d10e      	bne.n	80012e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d160      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e2ba      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x24a>
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e026      	b.n	8001348 <HAL_RCC_OscConfig+0x298>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001302:	d115      	bne.n	8001330 <HAL_RCC_OscConfig+0x280>
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800130a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a02      	ldr	r2, [pc, #8]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x298>
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	080038d8 	.word	0x080038d8
 8001328:	20000018 	.word	0x20000018
 800132c:	2000001c 	.word	0x2000001c
 8001330:	4ba0      	ldr	r3, [pc, #640]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a9f      	ldr	r2, [pc, #636]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b9d      	ldr	r3, [pc, #628]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a9c      	ldr	r2, [pc, #624]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb96 	bl	8000a80 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fb92 	bl	8000a80 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e276      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	4b92      	ldr	r3, [pc, #584]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x2a8>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb82 	bl	8000a80 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fb7e 	bl	8000a80 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e262      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001392:	4b88      	ldr	r3, [pc, #544]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x2d0>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d060      	beq.n	8001470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x310>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d119      	bne.n	80013ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d116      	bne.n	80013ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	4b7c      	ldr	r3, [pc, #496]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x328>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e23f      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b76      	ldr	r3, [pc, #472]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	4973      	ldr	r1, [pc, #460]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	e040      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d023      	beq.n	800143e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f6:	4b6f      	ldr	r3, [pc, #444]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fb3d 	bl	8000a80 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fb39 	bl	8000a80 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e21d      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141c:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	495f      	ldr	r1, [pc, #380]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e018      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b5d      	ldr	r3, [pc, #372]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a5c      	ldr	r2, [pc, #368]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fb19 	bl	8000a80 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fb15 	bl	8000a80 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1f9      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001464:	4b53      	ldr	r3, [pc, #332]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d03c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01c      	beq.n	80014be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001484:	4b4b      	ldr	r3, [pc, #300]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800148a:	4a4a      	ldr	r2, [pc, #296]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff faf4 	bl	8000a80 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff faf0 	bl	8000a80 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1d4      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ae:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ef      	beq.n	800149c <HAL_RCC_OscConfig+0x3ec>
 80014bc:	e01b      	b.n	80014f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c4:	4a3b      	ldr	r2, [pc, #236]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fad7 	bl	8000a80 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fad3 	bl	8000a80 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1b7      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ef      	bne.n	80014d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80a6 	beq.w	8001650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	4a26      	ldr	r2, [pc, #152]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152c:	2301      	movs	r3, #1
 800152e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d118      	bne.n	800156e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001548:	f7ff fa9a 	bl	8000a80 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fa96 	bl	8000a80 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e17a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_RCC_OscConfig+0x4d8>
 8001576:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001586:	e029      	b.n	80015dc <HAL_RCC_OscConfig+0x52c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d115      	bne.n	80015bc <HAL_RCC_OscConfig+0x50c>
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001596:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	4a03      	ldr	r2, [pc, #12]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x52c>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40007000 	.word	0x40007000
 80015bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c2:	4a9b      	ldr	r2, [pc, #620]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015cc:	4b98      	ldr	r3, [pc, #608]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d2:	4a97      	ldr	r2, [pc, #604]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa4c 	bl	8000a80 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fa48 	bl	8000a80 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e12a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	4b8b      	ldr	r3, [pc, #556]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ed      	beq.n	80015ec <HAL_RCC_OscConfig+0x53c>
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fa35 	bl	8000a80 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fa31 	bl	8000a80 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e113      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001630:	4b7f      	ldr	r3, [pc, #508]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ed      	bne.n	800161a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	4a79      	ldr	r2, [pc, #484]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80fe 	beq.w	8001856 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	2b02      	cmp	r3, #2
 8001660:	f040 80d0 	bne.w	8001804 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001664:	4b72      	ldr	r3, [pc, #456]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	429a      	cmp	r2, r3
 8001676:	d130      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	3b01      	subs	r3, #1
 8001684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d127      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11f      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016a4:	2a07      	cmp	r2, #7
 80016a6:	bf14      	ite	ne
 80016a8:	2201      	movne	r2, #1
 80016aa:	2200      	moveq	r2, #0
 80016ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d113      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d109      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d06e      	beq.n	80017b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d069      	beq.n	80017b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016e0:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ec:	4b50      	ldr	r3, [pc, #320]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0ad      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4b      	ldr	r2, [pc, #300]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001708:	f7ff f9ba 	bl	8000a80 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f9b6 	bl	8000a80 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e09a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001722:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172e:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	4b40      	ldr	r3, [pc, #256]	@ (8001834 <HAL_RCC_OscConfig+0x784>)
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800173e:	3a01      	subs	r2, #1
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001750:	0852      	lsrs	r2, r2, #1
 8001752:	3a01      	subs	r2, #1
 8001754:	0552      	lsls	r2, r2, #21
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800175c:	0852      	lsrs	r2, r2, #1
 800175e:	3a01      	subs	r2, #1
 8001760:	0652      	lsls	r2, r2, #25
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001768:	0912      	lsrs	r2, r2, #4
 800176a:	0452      	lsls	r2, r2, #17
 800176c:	430a      	orrs	r2, r1
 800176e:	4930      	ldr	r1, [pc, #192]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800177e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a2a      	ldr	r2, [pc, #168]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7ff f978 	bl	8000a80 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f974 	bl	8000a80 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e058      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b2:	e050      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e04f      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d148      	bne.n	8001856 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017dc:	f7ff f950 	bl	8000a80 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f94c 	bl	8000a80 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e030      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x734>
 8001802:	e028      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d023      	beq.n	8001852 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff f933 	bl	8000a80 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	e00c      	b.n	8001838 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f92f 	bl	8000a80 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d905      	bls.n	8001838 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
 8001830:	40021000 	.word	0x40021000
 8001834:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x7b0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ec      	bne.n	800181e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_RCC_OscConfig+0x7b0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4905      	ldr	r1, [pc, #20]	@ (8001860 <HAL_RCC_OscConfig+0x7b0>)
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_RCC_OscConfig+0x7b4>)
 800184c:	4013      	ands	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e001      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	feeefffc 	.word	0xfeeefffc

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0e7      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d910      	bls.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b72      	ldr	r3, [pc, #456]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	4970      	ldr	r1, [pc, #448]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cf      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b66      	ldr	r3, [pc, #408]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d908      	bls.n	80018da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4960      	ldr	r1, [pc, #384]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04c      	beq.n	8001980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d121      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0a6      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b54      	ldr	r3, [pc, #336]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d115      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e09a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e08e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e086      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b46      	ldr	r3, [pc, #280]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4943      	ldr	r1, [pc, #268]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff f896 	bl	8000a80 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff f892 	bl	8000a80 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e06e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d010      	beq.n	80019ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001998:	429a      	cmp	r2, r3
 800199a:	d208      	bcs.n	80019ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	492b      	ldr	r1, [pc, #172]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d210      	bcs.n	80019de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019bc:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0207 	bic.w	r2, r3, #7
 80019c4:	4923      	ldr	r1, [pc, #140]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e036      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4918      	ldr	r1, [pc, #96]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4910      	ldr	r1, [pc, #64]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1c:	f000 f824 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	490b      	ldr	r1, [pc, #44]	@ (8001a5c <HAL_RCC_ClockConfig+0x1f4>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_ClockConfig+0x1fc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe ffcd 	bl	80009e0 <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	080038d8 	.word	0x080038d8
 8001a60:	20000018 	.word	0x20000018
 8001a64:	2000001c 	.word	0x2000001c

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a80:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d121      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d11e      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e004      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d134      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d003      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0xac>
 8001b0c:	e005      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	e005      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b16:	617b      	str	r3, [r7, #20]
      break;
 8001b18:	e002      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	fb03 f202 	mul.w	r2, r3, r2
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	0e5b      	lsrs	r3, r3, #25
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	3301      	adds	r3, #1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b60:	69bb      	ldr	r3, [r7, #24]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	080038f0 	.word	0x080038f0
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000018 	.word	0x20000018

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4904      	ldr	r1, [pc, #16]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	080038e8 	.word	0x080038e8

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bc8:	f7ff ffda 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0adb      	lsrs	r3, r3, #11
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4904      	ldr	r1, [pc, #16]	@ (8001bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	080038e8 	.word	0x080038e8

08001bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c08:	f7ff f9ee 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8001c0c:	6178      	str	r0, [r7, #20]
 8001c0e:	e014      	b.n	8001c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	4a24      	ldr	r2, [pc, #144]	@ (8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c28:	f7ff f9de 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8001c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c40:	d10b      	bne.n	8001c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b80      	cmp	r3, #128	@ 0x80
 8001c46:	d919      	bls.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c4c:	d902      	bls.n	8001c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c4e:	2302      	movs	r3, #2
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e013      	b.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c54:	2301      	movs	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e010      	b.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b80      	cmp	r3, #128	@ 0x80
 8001c5e:	d902      	bls.n	8001c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c60:	2303      	movs	r3, #3
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e00a      	b.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b80      	cmp	r3, #128	@ 0x80
 8001c6a:	d102      	bne.n	8001c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	e004      	b.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b70      	cmp	r3, #112	@ 0x70
 8001c76:	d101      	bne.n	8001c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c78:	2301      	movs	r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 0207 	bic.w	r2, r3, #7
 8001c84:	4909      	ldr	r1, [pc, #36]	@ (8001cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d001      	beq.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40022000 	.word	0x40022000

08001cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cb8:	2300      	movs	r3, #0
 8001cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d041      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001cd4:	d02a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001cda:	d824      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ce0:	d008      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ce6:	d81e      	bhi.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cf2:	e018      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cf4:	4b86      	ldr	r3, [pc, #536]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a85      	ldr	r2, [pc, #532]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d00:	e015      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fabb 	bl	8002284 <RCCEx_PLLSAI1_Config>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d12:	e00c      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3320      	adds	r3, #32
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fba6 	bl	800246c <RCCEx_PLLSAI2_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d24:	e003      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	74fb      	strb	r3, [r7, #19]
      break;
 8001d2a:	e000      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d2e:	7cfb      	ldrb	r3, [r7, #19]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d34:	4b76      	ldr	r3, [pc, #472]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d42:	4973      	ldr	r1, [pc, #460]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d4a:	e001      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d041      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d64:	d02a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d6a:	d824      	bhi.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d70:	d008      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d76:	d81e      	bhi.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d80:	d010      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d82:	e018      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d84:	4b62      	ldr	r3, [pc, #392]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a61      	ldr	r2, [pc, #388]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d90:	e015      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fa73 	bl	8002284 <RCCEx_PLLSAI1_Config>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001da2:	e00c      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3320      	adds	r3, #32
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fb5e 	bl	800246c <RCCEx_PLLSAI2_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001db4:	e003      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dba:	e000      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dc4:	4b52      	ldr	r3, [pc, #328]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dd2:	494f      	ldr	r1, [pc, #316]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dda:	e001      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a0 	beq.w	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001df2:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00d      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	4a40      	ldr	r2, [pc, #256]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e14:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a3a      	ldr	r2, [pc, #232]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e30:	f7fe fe26 	bl	8000a80 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e36:	e009      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e38:	f7fe fe22 	bl	8000a80 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d902      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	74fb      	strb	r3, [r7, #19]
        break;
 8001e4a:	e005      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e4c:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ef      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d15c      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01f      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d019      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8e:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe fde1 	bl	8000a80 <HAL_GetTick>
 8001ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec0:	e00b      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe fddd 	bl	8000a80 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d902      	bls.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ed8:	e006      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ec      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001efe:	4904      	ldr	r1, [pc, #16]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f06:	e009      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	74bb      	strb	r3, [r7, #18]
 8001f0c:	e006      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1c:	7c7b      	ldrb	r3, [r7, #17]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b9e      	ldr	r3, [pc, #632]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	4a9d      	ldr	r2, [pc, #628]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f3a:	4b98      	ldr	r3, [pc, #608]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f40:	f023 0203 	bic.w	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f48:	4994      	ldr	r1, [pc, #592]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f62:	f023 020c 	bic.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6a:	498c      	ldr	r1, [pc, #560]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f7e:	4b87      	ldr	r3, [pc, #540]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	4983      	ldr	r1, [pc, #524]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	497b      	ldr	r1, [pc, #492]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fc2:	4b76      	ldr	r3, [pc, #472]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd0:	4972      	ldr	r1, [pc, #456]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fe4:	4b6d      	ldr	r3, [pc, #436]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	496a      	ldr	r1, [pc, #424]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002006:	4b65      	ldr	r3, [pc, #404]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	4961      	ldr	r1, [pc, #388]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002028:	4b5c      	ldr	r3, [pc, #368]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	4959      	ldr	r1, [pc, #356]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800204a:	4b54      	ldr	r3, [pc, #336]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002050:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002058:	4950      	ldr	r1, [pc, #320]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800206c:	4b4b      	ldr	r3, [pc, #300]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207a:	4948      	ldr	r1, [pc, #288]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800208e:	4b43      	ldr	r3, [pc, #268]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	493f      	ldr	r1, [pc, #252]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d028      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b0:	4b3a      	ldr	r3, [pc, #232]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	4937      	ldr	r1, [pc, #220]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ce:	d106      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4b32      	ldr	r3, [pc, #200]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a31      	ldr	r2, [pc, #196]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020da:	60d3      	str	r3, [r2, #12]
 80020dc:	e011      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020e6:	d10c      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f8c8 	bl	8002284 <RCCEx_PLLSAI1_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d028      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800210e:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002114:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	491f      	ldr	r1, [pc, #124]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800212c:	d106      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a1a      	ldr	r2, [pc, #104]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002138:	60d3      	str	r3, [r2, #12]
 800213a:	e011      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002144:	d10c      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f899 	bl	8002284 <RCCEx_PLLSAI1_Config>
 8002152:	4603      	mov	r3, r0
 8002154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02b      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217a:	4908      	ldr	r1, [pc, #32]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800218a:	d109      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a02      	ldr	r2, [pc, #8]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	60d3      	str	r3, [r2, #12]
 8002198:	e014      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f867 	bl	8002284 <RCCEx_PLLSAI1_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02f      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021de:	4928      	ldr	r1, [pc, #160]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ee:	d10d      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3304      	adds	r3, #4
 80021f4:	2102      	movs	r1, #2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f844 	bl	8002284 <RCCEx_PLLSAI1_Config>
 80021fc:	4603      	mov	r3, r0
 80021fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d014      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002206:	7cfb      	ldrb	r3, [r7, #19]
 8002208:	74bb      	strb	r3, [r7, #18]
 800220a:	e011      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002214:	d10c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3320      	adds	r3, #32
 800221a:	2102      	movs	r1, #2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f925 	bl	800246c <RCCEx_PLLSAI2_Config>
 8002222:	4603      	mov	r3, r0
 8002224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800223c:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800224a:	490d      	ldr	r1, [pc, #52]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800225e:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002264:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800226e:	4904      	ldr	r1, [pc, #16]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002276:	7cbb      	ldrb	r3, [r7, #18]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002292:	4b75      	ldr	r3, [pc, #468]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d018      	beq.n	80022d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800229e:	4b72      	ldr	r3, [pc, #456]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0203 	and.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d10d      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
       ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
       ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d047      	beq.n	800235a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e044      	b.n	800235a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d018      	beq.n	800230a <RCCEx_PLLSAI1_Config+0x86>
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d825      	bhi.n	8002328 <RCCEx_PLLSAI1_Config+0xa4>
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d002      	beq.n	80022e6 <RCCEx_PLLSAI1_Config+0x62>
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d009      	beq.n	80022f8 <RCCEx_PLLSAI1_Config+0x74>
 80022e4:	e020      	b.n	8002328 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022e6:	4b60      	ldr	r3, [pc, #384]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11d      	bne.n	800232e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f6:	e01a      	b.n	800232e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d116      	bne.n	8002332 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e013      	b.n	8002332 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800230a:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002316:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002326:	e006      	b.n	8002336 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      break;
 800232c:	e004      	b.n	8002338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800232e:	bf00      	nop
 8002330:	e002      	b.n	8002338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002336:	bf00      	nop
    }

    if(status == HAL_OK)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800233e:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	430b      	orrs	r3, r1
 8002354:	4944      	ldr	r1, [pc, #272]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d17d      	bne.n	800245c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002360:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a40      	ldr	r2, [pc, #256]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800236a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236c:	f7fe fb88 	bl	8000a80 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002372:	e009      	b.n	8002388 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002374:	f7fe fb84 	bl	8000a80 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d902      	bls.n	8002388 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	73fb      	strb	r3, [r7, #15]
        break;
 8002386:	e005      	b.n	8002394 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002388:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ef      	bne.n	8002374 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d160      	bne.n	800245c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a0:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80023a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	0211      	lsls	r1, r2, #8
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68d2      	ldr	r2, [r2, #12]
 80023b6:	0912      	lsrs	r2, r2, #4
 80023b8:	0452      	lsls	r2, r2, #17
 80023ba:	430a      	orrs	r2, r1
 80023bc:	492a      	ldr	r1, [pc, #168]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	610b      	str	r3, [r1, #16]
 80023c2:	e027      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d112      	bne.n	80023f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ca:	4b27      	ldr	r3, [pc, #156]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023d2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6892      	ldr	r2, [r2, #8]
 80023da:	0211      	lsls	r1, r2, #8
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6912      	ldr	r2, [r2, #16]
 80023e0:	0852      	lsrs	r2, r2, #1
 80023e2:	3a01      	subs	r2, #1
 80023e4:	0552      	lsls	r2, r2, #21
 80023e6:	430a      	orrs	r2, r1
 80023e8:	491f      	ldr	r1, [pc, #124]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	610b      	str	r3, [r1, #16]
 80023ee:	e011      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6892      	ldr	r2, [r2, #8]
 8002400:	0211      	lsls	r1, r2, #8
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6952      	ldr	r2, [r2, #20]
 8002406:	0852      	lsrs	r2, r2, #1
 8002408:	3a01      	subs	r2, #1
 800240a:	0652      	lsls	r2, r2, #25
 800240c:	430a      	orrs	r2, r1
 800240e:	4916      	ldr	r1, [pc, #88]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002414:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a13      	ldr	r2, [pc, #76]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800241e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fb2e 	bl	8000a80 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002426:	e009      	b.n	800243c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002428:	f7fe fb2a 	bl	8000a80 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d902      	bls.n	800243c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	73fb      	strb	r3, [r7, #15]
          break;
 800243a:	e005      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800243c:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ef      	beq.n	8002428 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	4904      	ldr	r1, [pc, #16]	@ (8002468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800247a:	4b6a      	ldr	r3, [pc, #424]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002486:	4b67      	ldr	r3, [pc, #412]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d10d      	bne.n	80024b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
       ||
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800249e:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
       ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d047      	beq.n	8002542 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e044      	b.n	8002542 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d018      	beq.n	80024f2 <RCCEx_PLLSAI2_Config+0x86>
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d825      	bhi.n	8002510 <RCCEx_PLLSAI2_Config+0xa4>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d002      	beq.n	80024ce <RCCEx_PLLSAI2_Config+0x62>
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d009      	beq.n	80024e0 <RCCEx_PLLSAI2_Config+0x74>
 80024cc:	e020      	b.n	8002510 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024ce:	4b55      	ldr	r3, [pc, #340]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024de:	e01a      	b.n	8002516 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024e0:	4b50      	ldr	r3, [pc, #320]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d116      	bne.n	800251a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e013      	b.n	800251a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024fe:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800250e:	e006      	b.n	800251e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e004      	b.n	8002520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800251e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002526:	4b3f      	ldr	r3, [pc, #252]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	430b      	orrs	r3, r1
 800253c:	4939      	ldr	r1, [pc, #228]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d167      	bne.n	8002618 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002548:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a35      	ldr	r2, [pc, #212]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002554:	f7fe fa94 	bl	8000a80 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800255a:	e009      	b.n	8002570 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800255c:	f7fe fa90 	bl	8000a80 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	73fb      	strb	r3, [r7, #15]
        break;
 800256e:	e005      	b.n	800257c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002570:	4b2c      	ldr	r3, [pc, #176]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ef      	bne.n	800255c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d14a      	bne.n	8002618 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6892      	ldr	r2, [r2, #8]
 8002598:	0211      	lsls	r1, r2, #8
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68d2      	ldr	r2, [r2, #12]
 800259e:	0912      	lsrs	r2, r2, #4
 80025a0:	0452      	lsls	r2, r2, #17
 80025a2:	430a      	orrs	r2, r1
 80025a4:	491f      	ldr	r1, [pc, #124]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	614b      	str	r3, [r1, #20]
 80025aa:	e011      	b.n	80025d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6892      	ldr	r2, [r2, #8]
 80025bc:	0211      	lsls	r1, r2, #8
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6912      	ldr	r2, [r2, #16]
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	3a01      	subs	r2, #1
 80025c6:	0652      	lsls	r2, r2, #25
 80025c8:	430a      	orrs	r2, r1
 80025ca:	4916      	ldr	r1, [pc, #88]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025d0:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a13      	ldr	r2, [pc, #76]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fa50 	bl	8000a80 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025e2:	e009      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025e4:	f7fe fa4c 	bl	8000a80 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	73fb      	strb	r3, [r7, #15]
          break;
 80025f6:	e005      	b.n	8002604 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	4904      	ldr	r1, [pc, #16]	@ (8002624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e040      	b.n	80026bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe f8e0 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fba0 	bl	8002db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8e5 	bl	8002844 <UART_SetConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e01b      	b.n	80026bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fc1f 	bl	8002ef8 <UART_CheckIdleState>
 80026ba:	4603      	mov	r3, r0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b08b      	sub	sp, #44	@ 0x2c
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d147      	bne.n	800276a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_UART_Transmit_IT+0x22>
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e040      	b.n	800276c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2221      	movs	r2, #33	@ 0x21
 8002712:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271c:	d107      	bne.n	800272e <HAL_UART_Transmit_IT+0x6a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a13      	ldr	r2, [pc, #76]	@ (8002778 <HAL_UART_Transmit_IT+0xb4>)
 800272a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800272c:	e002      	b.n	8002734 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a12      	ldr	r2, [pc, #72]	@ (800277c <HAL_UART_Transmit_IT+0xb8>)
 8002732:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	613b      	str	r3, [r7, #16]
   return(result);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	69f9      	ldr	r1, [r7, #28]
 8002758:	6a3a      	ldr	r2, [r7, #32]
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e6      	bne.n	8002734 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
  }
}
 800276c:	4618      	mov	r0, r3
 800276e:	372c      	adds	r7, #44	@ 0x2c
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	0800342f 	.word	0x0800342f
 800277c:	08003379 	.word	0x08003379

08002780 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002794:	2b20      	cmp	r3, #32
 8002796:	d137      	bne.n	8002808 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_UART_Receive_IT+0x24>
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e030      	b.n	800280a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a18      	ldr	r2, [pc, #96]	@ (8002814 <HAL_UART_Receive_IT+0x94>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01f      	beq.n	80027f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	613b      	str	r3, [r7, #16]
   return(result);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	6a3a      	ldr	r2, [r7, #32]
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e6      	bne.n	80027c6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fc90 	bl	8003124 <UART_Start_Receive_IT>
 8002804:	4603      	mov	r3, r0
 8002806:	e000      	b.n	800280a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40008000 	.word	0x40008000

08002818 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b08a      	sub	sp, #40	@ 0x28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	431a      	orrs	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	431a      	orrs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	4313      	orrs	r3, r2
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4ba4      	ldr	r3, [pc, #656]	@ (8002b04 <UART_SetConfig+0x2c0>)
 8002874:	4013      	ands	r3, r2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800287c:	430b      	orrs	r3, r1
 800287e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a99      	ldr	r2, [pc, #612]	@ (8002b08 <UART_SetConfig+0x2c4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ac:	4313      	orrs	r3, r2
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a90      	ldr	r2, [pc, #576]	@ (8002b0c <UART_SetConfig+0x2c8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d126      	bne.n	800291c <UART_SetConfig+0xd8>
 80028ce:	4b90      	ldr	r3, [pc, #576]	@ (8002b10 <UART_SetConfig+0x2cc>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d81b      	bhi.n	8002914 <UART_SetConfig+0xd0>
 80028dc:	a201      	add	r2, pc, #4	@ (adr r2, 80028e4 <UART_SetConfig+0xa0>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	08002905 	.word	0x08002905
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	0800290d 	.word	0x0800290d
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028fa:	e116      	b.n	8002b2a <UART_SetConfig+0x2e6>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002902:	e112      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002904:	2304      	movs	r3, #4
 8002906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290a:	e10e      	b.n	8002b2a <UART_SetConfig+0x2e6>
 800290c:	2308      	movs	r3, #8
 800290e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002912:	e10a      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002914:	2310      	movs	r3, #16
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291a:	e106      	b.n	8002b2a <UART_SetConfig+0x2e6>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a7c      	ldr	r2, [pc, #496]	@ (8002b14 <UART_SetConfig+0x2d0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d138      	bne.n	8002998 <UART_SetConfig+0x154>
 8002926:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <UART_SetConfig+0x2cc>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b0c      	cmp	r3, #12
 8002932:	d82d      	bhi.n	8002990 <UART_SetConfig+0x14c>
 8002934:	a201      	add	r2, pc, #4	@ (adr r2, 800293c <UART_SetConfig+0xf8>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	08002971 	.word	0x08002971
 8002940:	08002991 	.word	0x08002991
 8002944:	08002991 	.word	0x08002991
 8002948:	08002991 	.word	0x08002991
 800294c:	08002981 	.word	0x08002981
 8002950:	08002991 	.word	0x08002991
 8002954:	08002991 	.word	0x08002991
 8002958:	08002991 	.word	0x08002991
 800295c:	08002979 	.word	0x08002979
 8002960:	08002991 	.word	0x08002991
 8002964:	08002991 	.word	0x08002991
 8002968:	08002991 	.word	0x08002991
 800296c:	08002989 	.word	0x08002989
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002976:	e0d8      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002978:	2302      	movs	r3, #2
 800297a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297e:	e0d4      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002980:	2304      	movs	r3, #4
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e0d0      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002988:	2308      	movs	r3, #8
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298e:	e0cc      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002990:	2310      	movs	r3, #16
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002996:	e0c8      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	@ (8002b18 <UART_SetConfig+0x2d4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d125      	bne.n	80029ee <UART_SetConfig+0x1aa>
 80029a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <UART_SetConfig+0x2cc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029ac:	2b30      	cmp	r3, #48	@ 0x30
 80029ae:	d016      	beq.n	80029de <UART_SetConfig+0x19a>
 80029b0:	2b30      	cmp	r3, #48	@ 0x30
 80029b2:	d818      	bhi.n	80029e6 <UART_SetConfig+0x1a2>
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d00a      	beq.n	80029ce <UART_SetConfig+0x18a>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d814      	bhi.n	80029e6 <UART_SetConfig+0x1a2>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <UART_SetConfig+0x182>
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d008      	beq.n	80029d6 <UART_SetConfig+0x192>
 80029c4:	e00f      	b.n	80029e6 <UART_SetConfig+0x1a2>
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029cc:	e0ad      	b.n	8002b2a <UART_SetConfig+0x2e6>
 80029ce:	2302      	movs	r3, #2
 80029d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d4:	e0a9      	b.n	8002b2a <UART_SetConfig+0x2e6>
 80029d6:	2304      	movs	r3, #4
 80029d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029dc:	e0a5      	b.n	8002b2a <UART_SetConfig+0x2e6>
 80029de:	2308      	movs	r3, #8
 80029e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e4:	e0a1      	b.n	8002b2a <UART_SetConfig+0x2e6>
 80029e6:	2310      	movs	r3, #16
 80029e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ec:	e09d      	b.n	8002b2a <UART_SetConfig+0x2e6>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <UART_SetConfig+0x2d8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d125      	bne.n	8002a44 <UART_SetConfig+0x200>
 80029f8:	4b45      	ldr	r3, [pc, #276]	@ (8002b10 <UART_SetConfig+0x2cc>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a04:	d016      	beq.n	8002a34 <UART_SetConfig+0x1f0>
 8002a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a08:	d818      	bhi.n	8002a3c <UART_SetConfig+0x1f8>
 8002a0a:	2b80      	cmp	r3, #128	@ 0x80
 8002a0c:	d00a      	beq.n	8002a24 <UART_SetConfig+0x1e0>
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d814      	bhi.n	8002a3c <UART_SetConfig+0x1f8>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <UART_SetConfig+0x1d8>
 8002a16:	2b40      	cmp	r3, #64	@ 0x40
 8002a18:	d008      	beq.n	8002a2c <UART_SetConfig+0x1e8>
 8002a1a:	e00f      	b.n	8002a3c <UART_SetConfig+0x1f8>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a22:	e082      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2a:	e07e      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a32:	e07a      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a34:	2308      	movs	r3, #8
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3a:	e076      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a42:	e072      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a35      	ldr	r2, [pc, #212]	@ (8002b20 <UART_SetConfig+0x2dc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d12a      	bne.n	8002aa4 <UART_SetConfig+0x260>
 8002a4e:	4b30      	ldr	r3, [pc, #192]	@ (8002b10 <UART_SetConfig+0x2cc>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a5c:	d01a      	beq.n	8002a94 <UART_SetConfig+0x250>
 8002a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a62:	d81b      	bhi.n	8002a9c <UART_SetConfig+0x258>
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a68:	d00c      	beq.n	8002a84 <UART_SetConfig+0x240>
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a6e:	d815      	bhi.n	8002a9c <UART_SetConfig+0x258>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <UART_SetConfig+0x238>
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a78:	d008      	beq.n	8002a8c <UART_SetConfig+0x248>
 8002a7a:	e00f      	b.n	8002a9c <UART_SetConfig+0x258>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a82:	e052      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8a:	e04e      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a92:	e04a      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a94:	2308      	movs	r3, #8
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9a:	e046      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa2:	e042      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <UART_SetConfig+0x2c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d13a      	bne.n	8002b24 <UART_SetConfig+0x2e0>
 8002aae:	4b18      	ldr	r3, [pc, #96]	@ (8002b10 <UART_SetConfig+0x2cc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002abc:	d01a      	beq.n	8002af4 <UART_SetConfig+0x2b0>
 8002abe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ac2:	d81b      	bhi.n	8002afc <UART_SetConfig+0x2b8>
 8002ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ac8:	d00c      	beq.n	8002ae4 <UART_SetConfig+0x2a0>
 8002aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ace:	d815      	bhi.n	8002afc <UART_SetConfig+0x2b8>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <UART_SetConfig+0x298>
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad8:	d008      	beq.n	8002aec <UART_SetConfig+0x2a8>
 8002ada:	e00f      	b.n	8002afc <UART_SetConfig+0x2b8>
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae2:	e022      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aea:	e01e      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002aec:	2304      	movs	r3, #4
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af2:	e01a      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002af4:	2308      	movs	r3, #8
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afa:	e016      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002afc:	2310      	movs	r3, #16
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b02:	e012      	b.n	8002b2a <UART_SetConfig+0x2e6>
 8002b04:	efff69f3 	.word	0xefff69f3
 8002b08:	40008000 	.word	0x40008000
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	40004c00 	.word	0x40004c00
 8002b20:	40005000 	.word	0x40005000
 8002b24:	2310      	movs	r3, #16
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a9f      	ldr	r2, [pc, #636]	@ (8002dac <UART_SetConfig+0x568>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d17a      	bne.n	8002c2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d824      	bhi.n	8002b86 <UART_SetConfig+0x342>
 8002b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <UART_SetConfig+0x300>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002b87 	.word	0x08002b87
 8002b4c:	08002b71 	.word	0x08002b71
 8002b50:	08002b87 	.word	0x08002b87
 8002b54:	08002b77 	.word	0x08002b77
 8002b58:	08002b87 	.word	0x08002b87
 8002b5c:	08002b87 	.word	0x08002b87
 8002b60:	08002b87 	.word	0x08002b87
 8002b64:	08002b7f 	.word	0x08002b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b68:	f7ff f816 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	61f8      	str	r0, [r7, #28]
        break;
 8002b6e:	e010      	b.n	8002b92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b70:	4b8f      	ldr	r3, [pc, #572]	@ (8002db0 <UART_SetConfig+0x56c>)
 8002b72:	61fb      	str	r3, [r7, #28]
        break;
 8002b74:	e00d      	b.n	8002b92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b76:	f7fe ff77 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8002b7a:	61f8      	str	r0, [r7, #28]
        break;
 8002b7c:	e009      	b.n	8002b92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b82:	61fb      	str	r3, [r7, #28]
        break;
 8002b84:	e005      	b.n	8002b92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80fb 	beq.w	8002d90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d305      	bcc.n	8002bb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d903      	bls.n	8002bbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bbc:	e0e8      	b.n	8002d90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	461c      	mov	r4, r3
 8002bc4:	4615      	mov	r5, r2
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	022b      	lsls	r3, r5, #8
 8002bd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bd4:	0222      	lsls	r2, r4, #8
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	6849      	ldr	r1, [r1, #4]
 8002bda:	0849      	lsrs	r1, r1, #1
 8002bdc:	2000      	movs	r0, #0
 8002bde:	4688      	mov	r8, r1
 8002be0:	4681      	mov	r9, r0
 8002be2:	eb12 0a08 	adds.w	sl, r2, r8
 8002be6:	eb43 0b09 	adc.w	fp, r3, r9
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf8:	4650      	mov	r0, sl
 8002bfa:	4659      	mov	r1, fp
 8002bfc:	f7fd fae4 	bl	80001c8 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c0e:	d308      	bcc.n	8002c22 <UART_SetConfig+0x3de>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c16:	d204      	bcs.n	8002c22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	e0b6      	b.n	8002d90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c28:	e0b2      	b.n	8002d90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c32:	d15e      	bne.n	8002cf2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d828      	bhi.n	8002c8e <UART_SetConfig+0x44a>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <UART_SetConfig+0x400>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c69 	.word	0x08002c69
 8002c48:	08002c71 	.word	0x08002c71
 8002c4c:	08002c79 	.word	0x08002c79
 8002c50:	08002c8f 	.word	0x08002c8f
 8002c54:	08002c7f 	.word	0x08002c7f
 8002c58:	08002c8f 	.word	0x08002c8f
 8002c5c:	08002c8f 	.word	0x08002c8f
 8002c60:	08002c8f 	.word	0x08002c8f
 8002c64:	08002c87 	.word	0x08002c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7fe ff96 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	61f8      	str	r0, [r7, #28]
        break;
 8002c6e:	e014      	b.n	8002c9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c70:	f7fe ffa8 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002c74:	61f8      	str	r0, [r7, #28]
        break;
 8002c76:	e010      	b.n	8002c9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <UART_SetConfig+0x56c>)
 8002c7a:	61fb      	str	r3, [r7, #28]
        break;
 8002c7c:	e00d      	b.n	8002c9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7e:	f7fe fef3 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8002c82:	61f8      	str	r0, [r7, #28]
        break;
 8002c84:	e009      	b.n	8002c9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c8a:	61fb      	str	r3, [r7, #28]
        break;
 8002c8c:	e005      	b.n	8002c9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d077      	beq.n	8002d90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005a      	lsls	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	441a      	add	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d916      	bls.n	8002cea <UART_SetConfig+0x4a6>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc2:	d212      	bcs.n	8002cea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	8afb      	ldrh	r3, [r7, #22]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	8afa      	ldrh	r2, [r7, #22]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	e052      	b.n	8002d90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cf0:	e04e      	b.n	8002d90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d827      	bhi.n	8002d4a <UART_SetConfig+0x506>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <UART_SetConfig+0x4bc>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d25 	.word	0x08002d25
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	08002d35 	.word	0x08002d35
 8002d0c:	08002d4b 	.word	0x08002d4b
 8002d10:	08002d3b 	.word	0x08002d3b
 8002d14:	08002d4b 	.word	0x08002d4b
 8002d18:	08002d4b 	.word	0x08002d4b
 8002d1c:	08002d4b 	.word	0x08002d4b
 8002d20:	08002d43 	.word	0x08002d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d24:	f7fe ff38 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8002d28:	61f8      	str	r0, [r7, #28]
        break;
 8002d2a:	e014      	b.n	8002d56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7fe ff4a 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002d30:	61f8      	str	r0, [r7, #28]
        break;
 8002d32:	e010      	b.n	8002d56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d34:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <UART_SetConfig+0x56c>)
 8002d36:	61fb      	str	r3, [r7, #28]
        break;
 8002d38:	e00d      	b.n	8002d56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3a:	f7fe fe95 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8002d3e:	61f8      	str	r0, [r7, #28]
        break;
 8002d40:	e009      	b.n	8002d56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d46:	61fb      	str	r3, [r7, #28]
        break;
 8002d48:	e005      	b.n	8002d56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d54:	bf00      	nop
    }

    if (pclk != 0U)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d019      	beq.n	8002d90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	085a      	lsrs	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	441a      	add	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	d909      	bls.n	8002d8a <UART_SetConfig+0x546>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7c:	d205      	bcs.n	8002d8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	e002      	b.n	8002d90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3728      	adds	r7, #40	@ 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002daa:	bf00      	nop
 8002dac:	40008000 	.word	0x40008000
 8002db0:	00f42400 	.word	0x00f42400

08002db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01a      	beq.n	8002eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb2:	d10a      	bne.n	8002eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b098      	sub	sp, #96	@ 0x60
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f08:	f7fd fdba 	bl	8000a80 <HAL_GetTick>
 8002f0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d12e      	bne.n	8002f7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f24:	2200      	movs	r2, #0
 8002f26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f88c 	bl	8003048 <UART_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e6      	bne.n	8002f36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e062      	b.n	8003040 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d149      	bne.n	800301c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f856 	bl	8003048 <UART_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d03c      	beq.n	800301c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	623b      	str	r3, [r7, #32]
   return(result);
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e6      	bne.n	8002fa2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ff4:	61fa      	str	r2, [r7, #28]
 8002ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	69b9      	ldr	r1, [r7, #24]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	617b      	str	r3, [r7, #20]
   return(result);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e011      	b.n	8003040 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3758      	adds	r7, #88	@ 0x58
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003058:	e04f      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d04b      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fd fd0d 	bl	8000a80 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <UART_WaitOnFlagUntilTimeout+0x30>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e04e      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d037      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b80      	cmp	r3, #128	@ 0x80
 800308e:	d034      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b40      	cmp	r3, #64	@ 0x40
 8003094:	d031      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d110      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f8ff 	bl	80032b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2208      	movs	r2, #8
 80030b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e029      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d4:	d111      	bne.n	80030fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f8e5 	bl	80032b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e00f      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	429a      	cmp	r2, r3
 8003116:	d0a0      	beq.n	800305a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003124:	b480      	push	{r7}
 8003126:	b097      	sub	sp, #92	@ 0x5c
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003156:	d10e      	bne.n	8003176 <UART_Start_Receive_IT+0x52>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <UART_Start_Receive_IT+0x48>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003166:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800316a:	e02d      	b.n	80031c8 <UART_Start_Receive_IT+0xa4>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	22ff      	movs	r2, #255	@ 0xff
 8003170:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003174:	e028      	b.n	80031c8 <UART_Start_Receive_IT+0xa4>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <UART_Start_Receive_IT+0x76>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <UART_Start_Receive_IT+0x6c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	@ 0xff
 800318a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800318e:	e01b      	b.n	80031c8 <UART_Start_Receive_IT+0xa4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	227f      	movs	r2, #127	@ 0x7f
 8003194:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003198:	e016      	b.n	80031c8 <UART_Start_Receive_IT+0xa4>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a2:	d10d      	bne.n	80031c0 <UART_Start_Receive_IT+0x9c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <UART_Start_Receive_IT+0x92>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	227f      	movs	r2, #127	@ 0x7f
 80031b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031b4:	e008      	b.n	80031c8 <UART_Start_Receive_IT+0xa4>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	223f      	movs	r2, #63	@ 0x3f
 80031ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031be:	e003      	b.n	80031c8 <UART_Start_Receive_IT+0xa4>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2222      	movs	r2, #34	@ 0x22
 80031d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031f8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003214:	d107      	bne.n	8003226 <UART_Start_Receive_IT+0x102>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a21      	ldr	r2, [pc, #132]	@ (80032a8 <UART_Start_Receive_IT+0x184>)
 8003222:	669a      	str	r2, [r3, #104]	@ 0x68
 8003224:	e002      	b.n	800322c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a20      	ldr	r2, [pc, #128]	@ (80032ac <UART_Start_Receive_IT+0x188>)
 800322a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d019      	beq.n	8003268 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
 8003254:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e6      	bne.n	8003234 <UART_Start_Receive_IT+0x110>
 8003266:	e018      	b.n	800329a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	613b      	str	r3, [r7, #16]
   return(result);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f043 0320 	orr.w	r3, r3, #32
 800327c:	653b      	str	r3, [r7, #80]	@ 0x50
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	69f9      	ldr	r1, [r7, #28]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	61bb      	str	r3, [r7, #24]
   return(result);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e6      	bne.n	8003268 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	375c      	adds	r7, #92	@ 0x5c
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	080036ad 	.word	0x080036ad
 80032ac:	080034f1 	.word	0x080034f1

080032b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b095      	sub	sp, #84	@ 0x54
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e6      	bne.n	80032b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800330a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e5      	bne.n	80032ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	2b01      	cmp	r3, #1
 8003324:	d118      	bne.n	8003358 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60bb      	str	r3, [r7, #8]
   return(result);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	647b      	str	r3, [r7, #68]	@ 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6979      	ldr	r1, [r7, #20]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	613b      	str	r3, [r7, #16]
   return(result);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e6      	bne.n	8003326 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800336c:	bf00      	nop
 800336e:	3754      	adds	r7, #84	@ 0x54
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b08f      	sub	sp, #60	@ 0x3c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003384:	2b21      	cmp	r3, #33	@ 0x21
 8003386:	d14c      	bne.n	8003422 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d132      	bne.n	80033fa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e6      	bne.n	8003394 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033da:	633b      	str	r3, [r7, #48]	@ 0x30
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6979      	ldr	r1, [r7, #20]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	613b      	str	r3, [r7, #16]
   return(result);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80033f8:	e013      	b.n	8003422 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003422:	bf00      	nop
 8003424:	373c      	adds	r7, #60	@ 0x3c
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800342e:	b480      	push	{r7}
 8003430:	b091      	sub	sp, #68	@ 0x44
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800343a:	2b21      	cmp	r3, #33	@ 0x21
 800343c:	d151      	bne.n	80034e2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d132      	bne.n	80034b0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	623b      	str	r3, [r7, #32]
   return(result);
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
 800346a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800346e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e6      	bne.n	800344a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	60fb      	str	r3, [r7, #12]
   return(result);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003490:	637b      	str	r3, [r7, #52]	@ 0x34
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	69b9      	ldr	r1, [r7, #24]
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	617b      	str	r3, [r7, #20]
   return(result);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e6      	bne.n	800347c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80034ae:	e018      	b.n	80034e2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80034b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c2:	b292      	uxth	r2, r2
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80034e2:	bf00      	nop
 80034e4:	3744      	adds	r7, #68	@ 0x44
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b09c      	sub	sp, #112	@ 0x70
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003508:	2b22      	cmp	r3, #34	@ 0x22
 800350a:	f040 80be 	bne.w	800368a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003514:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003518:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800351c:	b2d9      	uxtb	r1, r3
 800351e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003522:	b2da      	uxtb	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003528:	400a      	ands	r2, r1
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 80a3 	bne.w	800369e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003576:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003578:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800357c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e6      	bne.n	8003558 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3308      	adds	r3, #8
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80035aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80035ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a34      	ldr	r2, [pc, #208]	@ (80036a8 <UART_RxISR_8BIT+0x1b8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01f      	beq.n	800361c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	623b      	str	r3, [r7, #32]
   return(result);
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
 800360a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800360e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e6      	bne.n	80035ea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	2b01      	cmp	r3, #1
 8003622:	d12e      	bne.n	8003682 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	60fb      	str	r3, [r7, #12]
   return(result);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0310 	bic.w	r3, r3, #16
 800363e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	617b      	str	r3, [r7, #20]
   return(result);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b10      	cmp	r3, #16
 8003668:	d103      	bne.n	8003672 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003678:	4619      	mov	r1, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff f8d6 	bl	800282c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003680:	e00d      	b.n	800369e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff f8c8 	bl	8002818 <HAL_UART_RxCpltCallback>
}
 8003688:	e009      	b.n	800369e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	8b1b      	ldrh	r3, [r3, #24]
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	b292      	uxth	r2, r2
 800369c:	831a      	strh	r2, [r3, #24]
}
 800369e:	bf00      	nop
 80036a0:	3770      	adds	r7, #112	@ 0x70
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40008000 	.word	0x40008000

080036ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b09c      	sub	sp, #112	@ 0x70
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80036ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c4:	2b22      	cmp	r3, #34	@ 0x22
 80036c6:	f040 80be 	bne.w	8003846 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80036d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80036da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80036de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 80a3 	bne.w	800385a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003728:	667b      	str	r3, [r7, #100]	@ 0x64
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003732:	657b      	str	r3, [r7, #84]	@ 0x54
 8003734:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003738:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e6      	bne.n	8003714 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3308      	adds	r3, #8
 800374c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	663b      	str	r3, [r7, #96]	@ 0x60
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003766:	643a      	str	r2, [r7, #64]	@ 0x40
 8003768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800376c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e5      	bne.n	8003746 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a34      	ldr	r2, [pc, #208]	@ (8003864 <UART_RxISR_16BIT+0x1b8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01f      	beq.n	80037d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d018      	beq.n	80037d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d12e      	bne.n	800383e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f023 0310 	bic.w	r3, r3, #16
 80037fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6979      	ldr	r1, [r7, #20]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	613b      	str	r3, [r7, #16]
   return(result);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e6      	bne.n	80037e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b10      	cmp	r3, #16
 8003824:	d103      	bne.n	800382e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003834:	4619      	mov	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe fff8 	bl	800282c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800383c:	e00d      	b.n	800385a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe ffea 	bl	8002818 <HAL_UART_RxCpltCallback>
}
 8003844:	e009      	b.n	800385a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	8b1b      	ldrh	r3, [r3, #24]
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0208 	orr.w	r2, r2, #8
 8003856:	b292      	uxth	r2, r2
 8003858:	831a      	strh	r2, [r3, #24]
}
 800385a:	bf00      	nop
 800385c:	3770      	adds	r7, #112	@ 0x70
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40008000 	.word	0x40008000

08003868 <memset>:
 8003868:	4402      	add	r2, r0
 800386a:	4603      	mov	r3, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <__libc_init_array>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4d0d      	ldr	r5, [pc, #52]	@ (80038b0 <__libc_init_array+0x38>)
 800387c:	4c0d      	ldr	r4, [pc, #52]	@ (80038b4 <__libc_init_array+0x3c>)
 800387e:	1b64      	subs	r4, r4, r5
 8003880:	10a4      	asrs	r4, r4, #2
 8003882:	2600      	movs	r6, #0
 8003884:	42a6      	cmp	r6, r4
 8003886:	d109      	bne.n	800389c <__libc_init_array+0x24>
 8003888:	4d0b      	ldr	r5, [pc, #44]	@ (80038b8 <__libc_init_array+0x40>)
 800388a:	4c0c      	ldr	r4, [pc, #48]	@ (80038bc <__libc_init_array+0x44>)
 800388c:	f000 f818 	bl	80038c0 <_init>
 8003890:	1b64      	subs	r4, r4, r5
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	2600      	movs	r6, #0
 8003896:	42a6      	cmp	r6, r4
 8003898:	d105      	bne.n	80038a6 <__libc_init_array+0x2e>
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a0:	4798      	blx	r3
 80038a2:	3601      	adds	r6, #1
 80038a4:	e7ee      	b.n	8003884 <__libc_init_array+0xc>
 80038a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038aa:	4798      	blx	r3
 80038ac:	3601      	adds	r6, #1
 80038ae:	e7f2      	b.n	8003896 <__libc_init_array+0x1e>
 80038b0:	08003928 	.word	0x08003928
 80038b4:	08003928 	.word	0x08003928
 80038b8:	08003928 	.word	0x08003928
 80038bc:	0800392c 	.word	0x0800392c

080038c0 <_init>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr

080038cc <_fini>:
 80038cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ce:	bf00      	nop
 80038d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d2:	bc08      	pop	{r3}
 80038d4:	469e      	mov	lr, r3
 80038d6:	4770      	bx	lr
