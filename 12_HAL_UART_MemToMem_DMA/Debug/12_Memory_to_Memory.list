
12_Memory_to_Memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040cc  080040cc  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d4  080040d4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d4  080040d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  080040e8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080040e8  00006254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c334  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2f  00000000  00000000  00012370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  000140a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077f  00000000  00000000  00014a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd0  00000000  00000000  000151e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc63  00000000  00000000  0003a1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4121  00000000  00000000  00045e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002714  00000000  00000000  00129f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012c694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004060 	.word	0x08004060

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004060 	.word	0x08004060

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:




int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 faf9 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f90d 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f8bd 	bl	8000684 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f88b 	bl	8000624 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Fill source buffer with test values
    for (int i = 0; i < 27; i++) {
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	e00b      	b.n	800052c <main+0x38>
      src_buffer[i] =  i+ 'A';
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	3341      	adds	r3, #65	@ 0x41
 800051a:	b2d9      	uxtb	r1, r3
 800051c:	4a13      	ldr	r2, [pc, #76]	@ (800056c <main+0x78>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	460a      	mov	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 27; i++) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b1a      	cmp	r3, #26
 8000530:	ddf0      	ble.n	8000514 <main+0x20>
    }

    HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)src_buffer,(uint32_t)dst_buffer,100);
 8000532:	490e      	ldr	r1, [pc, #56]	@ (800056c <main+0x78>)
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <main+0x7c>)
 8000536:	2364      	movs	r3, #100	@ 0x64
 8000538:	480e      	ldr	r0, [pc, #56]	@ (8000574 <main+0x80>)
 800053a:	f000 fd1f 	bl	8000f7c <HAL_DMA_Start>


        // Wait until the DMA transfer on DMA1 Channel1 is fully complete
        HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 800053e:	f04f 32ff 	mov.w	r2, #4294967295
 8000542:	2100      	movs	r1, #0
 8000544:	480b      	ldr	r0, [pc, #44]	@ (8000574 <main+0x80>)
 8000546:	f000 fddb 	bl	8001100 <HAL_DMA_PollForTransfer>

        // Send a message over UART2 indicating that DMA transfer is done
        HAL_UART_Transmit(&huart2, (uint8_t *)"DMA Done\r\n", 10, HAL_MAX_DELAY);
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	220a      	movs	r2, #10
 8000550:	4909      	ldr	r1, [pc, #36]	@ (8000578 <main+0x84>)
 8000552:	480a      	ldr	r0, [pc, #40]	@ (800057c <main+0x88>)
 8000554:	f002 fc8a 	bl	8002e6c <HAL_UART_Transmit>

        // Send the contents of the destination buffer over UART2
        HAL_UART_Transmit(&huart2, dst_buffer, 100, HAL_MAX_DELAY);
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	2264      	movs	r2, #100	@ 0x64
 800055e:	4904      	ldr	r1, [pc, #16]	@ (8000570 <main+0x7c>)
 8000560:	4806      	ldr	r0, [pc, #24]	@ (800057c <main+0x88>)
 8000562:	f002 fc83 	bl	8002e6c <HAL_UART_Transmit>

  while (1)
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <main+0x72>
 800056a:	bf00      	nop
 800056c:	20000188 	.word	0x20000188
 8000570:	200001ec 	.word	0x200001ec
 8000574:	20000140 	.word	0x20000140
 8000578:	08004078 	.word	0x08004078
 800057c:	20000028 	.word	0x20000028

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	@ 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	@ 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fd39 	bl	8004006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a6:	f001 f901 	bl	80017ac <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 f92a 	bl	8000808 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2310      	movs	r3, #16
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ce:	230a      	movs	r3, #10
 80005d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f938 	bl	8001858 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ee:	f000 f90b 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	2104      	movs	r1, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fd00 	bl	8002010 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000616:	f000 f8f7 	bl	8000808 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3758      	adds	r7, #88	@ 0x58
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <MX_USART2_UART_Init+0x5c>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b13      	ldr	r3, [pc, #76]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_USART2_UART_Init+0x58>)
 8000668:	f002 fbb2 	bl	8002dd0 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000672:	f000 f8c9 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40004400 	.word	0x40004400

08000684 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <MX_DMA_Init+0x90>)
 800068c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800068e:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <MX_DMA_Init+0x90>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6493      	str	r3, [r2, #72]	@ 0x48
 8000696:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_DMA_Init+0x90>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_DMA_Init+0x94>)
 80006a4:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <MX_DMA_Init+0x98>)
 80006a6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_DMA_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_DMA_Init+0x94>)
 80006b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006b4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_DMA_Init+0x94>)
 80006b8:	2240      	movs	r2, #64	@ 0x40
 80006ba:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_DMA_Init+0x94>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_DMA_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <MX_DMA_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_DMA_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80006d4:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <MX_DMA_Init+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80006da:	480f      	ldr	r0, [pc, #60]	@ (8000718 <MX_DMA_Init+0x94>)
 80006dc:	f000 fb96 	bl	8000e0c <HAL_DMA_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_DMA_Init+0x66>
  {
    Error_Handler( );
 80006e6:	f000 f88f 	bl	8000808 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2010      	movs	r0, #16
 80006f0:	f000 fb55 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006f4:	2010      	movs	r0, #16
 80006f6:	f000 fb6e 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2011      	movs	r0, #17
 8000700:	f000 fb4d 	bl	8000d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000704:	2011      	movs	r0, #17
 8000706:	f000 fb66 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	20000140 	.word	0x20000140
 800071c:	40020008 	.word	0x40020008

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	@ 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a30      	ldr	r2, [pc, #192]	@ (80007fc <MX_GPIO_Init+0xdc>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <MX_GPIO_Init+0xdc>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <MX_GPIO_Init+0xdc>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <MX_GPIO_Init+0xdc>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_GPIO_Init+0xdc>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f000 ffdf 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_GPIO_Init+0xe0>)
 80007ba:	f000 fe27 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007be:	2320      	movs	r3, #32
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f000 fe18 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_GPIO_Init+0xe4>)
 80007f0:	f000 fe0c 	bl	800140c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000800 	.word	0x48000800
 8000804:	48000400 	.word	0x48000400

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6613      	str	r3, [r2, #96]	@ 0x60
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x44>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6593      	str	r3, [r2, #88]	@ 0x58
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0ac      	sub	sp, #176	@ 0xb0
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2288      	movs	r2, #136	@ 0x88
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fbc2 	bl	8004006 <memset>
  if(huart->Instance==USART2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a4f      	ldr	r2, [pc, #316]	@ (80009c4 <HAL_UART_MspInit+0x168>)
 8000888:	4293      	cmp	r3, r2
 800088a:	f040 8096 	bne.w	80009ba <HAL_UART_MspInit+0x15e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000892:	2300      	movs	r3, #0
 8000894:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fddc 	bl	8002458 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008a6:	f7ff ffaf 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	4b47      	ldr	r3, [pc, #284]	@ (80009c8 <HAL_UART_MspInit+0x16c>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a46      	ldr	r2, [pc, #280]	@ (80009c8 <HAL_UART_MspInit+0x16c>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b44      	ldr	r3, [pc, #272]	@ (80009c8 <HAL_UART_MspInit+0x16c>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b41      	ldr	r3, [pc, #260]	@ (80009c8 <HAL_UART_MspInit+0x16c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4a40      	ldr	r2, [pc, #256]	@ (80009c8 <HAL_UART_MspInit+0x16c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <HAL_UART_MspInit+0x16c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008da:	230c      	movs	r3, #12
 80008dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f000 fd83 	bl	800140c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000906:	4b31      	ldr	r3, [pc, #196]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000908:	4a31      	ldr	r2, [pc, #196]	@ (80009d0 <HAL_UART_MspInit+0x174>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800090c:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <HAL_UART_MspInit+0x170>)
 800090e:	2202      	movs	r2, #2
 8000910:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000912:	4b2e      	ldr	r3, [pc, #184]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000914:	2210      	movs	r2, #16
 8000916:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <HAL_UART_MspInit+0x170>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b2b      	ldr	r3, [pc, #172]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000920:	2280      	movs	r2, #128	@ 0x80
 8000922:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000924:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <HAL_UART_MspInit+0x170>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000930:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800093c:	4823      	ldr	r0, [pc, #140]	@ (80009cc <HAL_UART_MspInit+0x170>)
 800093e:	f000 fa65 	bl	8000e0c <HAL_DMA_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000948:	f7ff ff5e 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000950:	671a      	str	r2, [r3, #112]	@ 0x70
 8000952:	4a1e      	ldr	r2, [pc, #120]	@ (80009cc <HAL_UART_MspInit+0x170>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000958:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	@ (80009d8 <HAL_UART_MspInit+0x17c>)
 800095c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 8000960:	2202      	movs	r2, #2
 8000962:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 8000972:	2280      	movs	r2, #128	@ 0x80
 8000974:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800098e:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 8000990:	f000 fa3c 	bl	8000e0c <HAL_DMA_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800099a:	f7ff ff35 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 80009a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80009a4:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <HAL_UART_MspInit+0x178>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2026      	movs	r0, #38	@ 0x26
 80009b0:	f000 f9f5 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b4:	2026      	movs	r0, #38	@ 0x26
 80009b6:	f000 fa0e 	bl	8000dd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ba:	bf00      	nop
 80009bc:	37b0      	adds	r7, #176	@ 0xb0
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	40020080 	.word	0x40020080
 80009d4:	200000f8 	.word	0x200000f8
 80009d8:	4002006c 	.word	0x4002006c

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f8b9 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <DMA1_Channel6_IRQHandler+0x10>)
 8000a42:	f000 fc04 	bl	800124e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000f8 	.word	0x200000f8

08000a50 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <DMA1_Channel7_IRQHandler+0x10>)
 8000a56:	f000 fbfa 	bl	800124e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000b0 	.word	0x200000b0

08000a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <USART2_IRQHandler+0x10>)
 8000a6a:	f002 fa89 	bl	8002f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000028 	.word	0x20000028

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f003 faa5 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fd11 	bl	80004f4 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae0:	080040dc 	.word	0x080040dc
  ldr r2, =_sbss
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae8:	20000254 	.word	0x20000254

08000aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <HAL_Init+0x3c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <HAL_Init+0x3c>)
 8000b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 f93e 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f80f 	bl	8000b30 <HAL_InitTick>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	e001      	b.n	8000b22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1e:	f7ff fe79 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40022000 	.word	0x40022000

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_InitTick+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d023      	beq.n	8000b8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_InitTick+0x70>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_InitTick+0x6c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f949 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d809      	bhi.n	8000b80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f913 	bl	8000d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <HAL_InitTick+0x74>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e004      	b.n	8000b90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e001      	b.n	8000b90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000250 	.word	0x20000250

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000250 	.word	0x20000250

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff3e 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff8e 	bl	8000cdc <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff31 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e098      	b.n	8000f50 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b4d      	ldr	r3, [pc, #308]	@ (8000f5c <HAL_DMA_Init+0x150>)
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d80f      	bhi.n	8000e4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <HAL_DMA_Init+0x154>)
 8000e32:	4413      	add	r3, r2
 8000e34:	4a4b      	ldr	r2, [pc, #300]	@ (8000f64 <HAL_DMA_Init+0x158>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	009a      	lsls	r2, r3, #2
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a48      	ldr	r2, [pc, #288]	@ (8000f68 <HAL_DMA_Init+0x15c>)
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e48:	e00e      	b.n	8000e68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b46      	ldr	r3, [pc, #280]	@ (8000f6c <HAL_DMA_Init+0x160>)
 8000e52:	4413      	add	r3, r2
 8000e54:	4a43      	ldr	r2, [pc, #268]	@ (8000f64 <HAL_DMA_Init+0x158>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	009a      	lsls	r2, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a42      	ldr	r2, [pc, #264]	@ (8000f70 <HAL_DMA_Init+0x164>)
 8000e66:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ec2:	d039      	beq.n	8000f38 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <HAL_DMA_Init+0x15c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d11a      	bne.n	8000f04 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <HAL_DMA_Init+0x168>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f003 031c 	and.w	r3, r3, #28
 8000eda:	210f      	movs	r1, #15
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4924      	ldr	r1, [pc, #144]	@ (8000f74 <HAL_DMA_Init+0x168>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <HAL_DMA_Init+0x168>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6859      	ldr	r1, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef4:	f003 031c 	and.w	r3, r3, #28
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	491d      	ldr	r1, [pc, #116]	@ (8000f74 <HAL_DMA_Init+0x168>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
 8000f02:	e019      	b.n	8000f38 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f04:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <HAL_DMA_Init+0x16c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0c:	f003 031c 	and.w	r3, r3, #28
 8000f10:	210f      	movs	r1, #15
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4917      	ldr	r1, [pc, #92]	@ (8000f78 <HAL_DMA_Init+0x16c>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_DMA_Init+0x16c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6859      	ldr	r1, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	f003 031c 	and.w	r3, r3, #28
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	4911      	ldr	r1, [pc, #68]	@ (8000f78 <HAL_DMA_Init+0x16c>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40020407 	.word	0x40020407
 8000f60:	bffdfff8 	.word	0xbffdfff8
 8000f64:	cccccccd 	.word	0xcccccccd
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	bffdfbf8 	.word	0xbffdfbf8
 8000f70:	40020400 	.word	0x40020400
 8000f74:	400200a8 	.word	0x400200a8
 8000f78:	400204a8 	.word	0x400204a8

08000f7c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_DMA_Start+0x20>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e02e      	b.n	8000ffa <HAL_DMA_Start+0x7e>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d11d      	bne.n	8000fec <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 f9e9 	bl	80013ac <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e005      	b.n	8000ff8 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d008      	beq.n	800102c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e022      	b.n	8001072 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001050:	f003 021c 	and.w	r2, r3, #28
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d005      	beq.n	80010a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2204      	movs	r2, #4
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e029      	b.n	80010f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 020e 	bic.w	r2, r2, #14
 80010b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f003 021c 	and.w	r2, r3, #28
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	4798      	blx	r3
    }
  }
  return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	460b      	mov	r3, r1
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d008      	beq.n	800112c <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2204      	movs	r2, #4
 800111e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e08c      	b.n	8001246 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07f      	b.n	8001246 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d108      	bne.n	800115e <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001150:	f003 031c 	and.w	r3, r3, #28
 8001154:	2202      	movs	r2, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e007      	b.n	800116e <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f003 031c 	and.w	r3, r3, #28
 8001166:	2204      	movs	r2, #4
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800116e:	f7ff fd2f 	bl	8000bd0 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

  while ((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8001174:	e03f      	b.n	80011f6 <HAL_DMA_PollForTransfer+0xf6>
  {
    if ((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001180:	f003 031c 	and.w	r3, r3, #28
 8001184:	2108      	movs	r1, #8
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d016      	beq.n	80011be <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001194:	f003 021c 	and.w	r2, r3, #28
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2201      	movs	r2, #1
 80011a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e043      	b.n	8001246 <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d017      	beq.n	80011f6 <HAL_DMA_PollForTransfer+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011c6:	f7ff fd03 	bl	8000bd0 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d302      	bcc.n	80011dc <HAL_DMA_PollForTransfer+0xdc>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10c      	bne.n	80011f6 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2220      	movs	r2, #32
 80011e0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e027      	b.n	8001246 <HAL_DMA_PollForTransfer+0x146>
  while ((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0b8      	beq.n	8001176 <HAL_DMA_PollForTransfer+0x76>
    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
  }
#endif /* DMAMUX1 */

  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <HAL_DMA_PollForTransfer+0x130>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f003 021c 	and.w	r2, r3, #28
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	2102      	movs	r1, #2
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800122e:	e009      	b.n	8001244 <HAL_DMA_PollForTransfer+0x144>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001234:	f003 021c 	and.w	r2, r3, #28
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	2104      	movs	r1, #4
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f003 031c 	and.w	r3, r3, #28
 800126e:	2204      	movs	r2, #4
 8001270:	409a      	lsls	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d026      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x7a>
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	2b00      	cmp	r3, #0
 8001290:	d107      	bne.n	80012a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0204 	bic.w	r2, r2, #4
 80012a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f003 021c 	and.w	r2, r3, #28
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	2104      	movs	r1, #4
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d071      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012c6:	e06c      	b.n	80013a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	f003 031c 	and.w	r3, r3, #28
 80012d0:	2202      	movs	r2, #2
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d02e      	beq.n	800133a <HAL_DMA_IRQHandler+0xec>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d029      	beq.n	800133a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 020a 	bic.w	r2, r2, #10
 8001302:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	f003 021c 	and.w	r2, r3, #28
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	2102      	movs	r1, #2
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132c:	2b00      	cmp	r3, #0
 800132e:	d038      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001338:	e033      	b.n	80013a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	f003 031c 	and.w	r3, r3, #28
 8001342:	2208      	movs	r2, #8
 8001344:	409a      	lsls	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d02a      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x156>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d025      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020e 	bic.w	r2, r2, #14
 8001366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136c:	f003 021c 	and.w	r2, r3, #28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	2101      	movs	r1, #1
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
}
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f003 021c 	and.w	r2, r3, #28
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d108      	bne.n	80013f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013ee:	e007      	b.n	8001400 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	60da      	str	r2, [r3, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e17f      	b.n	800171c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8171 	beq.w	8001716 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <HAL_GPIO_Init+0x40>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d130      	bne.n	80014ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001482:	2201      	movs	r2, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d118      	bne.n	80014ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d017      	beq.n	8001528 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	6939      	ldr	r1, [r7, #16]
 8001578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80ac 	beq.w	8001716 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <HAL_GPIO_Init+0x330>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	4a5e      	ldr	r2, [pc, #376]	@ (800173c <HAL_GPIO_Init+0x330>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ca:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <HAL_GPIO_Init+0x330>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001740 <HAL_GPIO_Init+0x334>)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001600:	d025      	beq.n	800164e <HAL_GPIO_Init+0x242>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4f      	ldr	r2, [pc, #316]	@ (8001744 <HAL_GPIO_Init+0x338>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01f      	beq.n	800164a <HAL_GPIO_Init+0x23e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4e      	ldr	r2, [pc, #312]	@ (8001748 <HAL_GPIO_Init+0x33c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x23a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4d      	ldr	r2, [pc, #308]	@ (800174c <HAL_GPIO_Init+0x340>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x236>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4c      	ldr	r2, [pc, #304]	@ (8001750 <HAL_GPIO_Init+0x344>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x232>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4b      	ldr	r2, [pc, #300]	@ (8001754 <HAL_GPIO_Init+0x348>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x22e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4a      	ldr	r2, [pc, #296]	@ (8001758 <HAL_GPIO_Init+0x34c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x22a>
 8001632:	2306      	movs	r3, #6
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_Init+0x244>
 8001636:	2307      	movs	r3, #7
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x244>
 800163a:	2305      	movs	r3, #5
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x244>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x244>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x244>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x244>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x244>
 800164e:	2300      	movs	r3, #0
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001660:	4937      	ldr	r1, [pc, #220]	@ (8001740 <HAL_GPIO_Init+0x334>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <HAL_GPIO_Init+0x350>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001692:	4a32      	ldr	r2, [pc, #200]	@ (800175c <HAL_GPIO_Init+0x350>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001698:	4b30      	ldr	r3, [pc, #192]	@ (800175c <HAL_GPIO_Init+0x350>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016bc:	4a27      	ldr	r2, [pc, #156]	@ (800175c <HAL_GPIO_Init+0x350>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_GPIO_Init+0x350>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e6:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_GPIO_Init+0x350>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_GPIO_Init+0x350>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001710:	4a12      	ldr	r2, [pc, #72]	@ (800175c <HAL_GPIO_Init+0x350>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ae78 	bne.w	800141c <HAL_GPIO_Init+0x10>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800
 800174c:	48000c00 	.word	0x48000c00
 8001750:	48001000 	.word	0x48001000
 8001754:	48001400 	.word	0x48001400
 8001758:	48001800 	.word	0x48001800
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800177c:	e002      	b.n	8001784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000

080017ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017ba:	d130      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c8:	d038      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d2:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2232      	movs	r2, #50	@ 0x32
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001854 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f0:	e002      	b.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001804:	d102      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f2      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001818:	d110      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e00f      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182a:	d007      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001834:	4a05      	ldr	r2, [pc, #20]	@ (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40007000 	.word	0x40007000
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e3ca      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b97      	ldr	r3, [pc, #604]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b94      	ldr	r3, [pc, #592]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80e4 	beq.w	8001a54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4a>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	f040 808b 	bne.w	80019b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 8087 	bne.w	80019b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a2:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e3a2      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	4b82      	ldr	r3, [pc, #520]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <HAL_RCC_OscConfig+0x7c>
 80018ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018d2:	e005      	b.n	80018e0 <HAL_RCC_OscConfig+0x88>
 80018d4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d223      	bcs.n	800192c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd55 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e383      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f8:	4b73      	ldr	r3, [pc, #460]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a72      	ldr	r2, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b70      	ldr	r3, [pc, #448]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	496d      	ldr	r1, [pc, #436]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001916:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4968      	ldr	r1, [pc, #416]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
 800192a:	e025      	b.n	8001978 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a65      	ldr	r2, [pc, #404]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4960      	ldr	r1, [pc, #384]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	495b      	ldr	r1, [pc, #364]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fd15 	bl	8002398 <RCC_SetFlashLatencyFromMSIRange>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e343      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001978:	f000 fc4a 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4950      	ldr	r1, [pc, #320]	@ (8001acc <HAL_RCC_OscConfig+0x274>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad0 <HAL_RCC_OscConfig+0x278>)
 8001996:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001998:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad4 <HAL_RCC_OscConfig+0x27c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f8c7 	bl	8000b30 <HAL_InitTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d052      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	e327      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d032      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019b8:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a42      	ldr	r2, [pc, #264]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f904 	bl	8000bd0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019cc:	f7ff f900 	bl	8000bd0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e310      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019de:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ea:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a36      	ldr	r2, [pc, #216]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4931      	ldr	r1, [pc, #196]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	492c      	ldr	r1, [pc, #176]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e01a      	b.n	8001a54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f8d1 	bl	8000bd0 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a32:	f7ff f8cd 	bl	8000bd0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e2dd      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1da>
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d074      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x21a>
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d10e      	bne.n	8001a8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d064      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d160      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e2ba      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e026      	b.n	8001af0 <HAL_RCC_OscConfig+0x298>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aaa:	d115      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x280>
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a02      	ldr	r2, [pc, #8]	@ (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x298>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08004084 	.word	0x08004084
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004
 8001ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a9f      	ldr	r2, [pc, #636]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b9d      	ldr	r3, [pc, #628]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d013      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f86a 	bl	8000bd0 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f866 	bl	8000bd0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e276      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b92      	ldr	r3, [pc, #584]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2a8>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f856 	bl	8000bd0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f852 	bl	8000bd0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	@ 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e262      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2d0>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d060      	beq.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x310>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d116      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	4b7c      	ldr	r3, [pc, #496]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x328>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e23f      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b76      	ldr	r3, [pc, #472]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	4973      	ldr	r1, [pc, #460]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	e040      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d023      	beq.n	8001be6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f811 	bl	8000bd0 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f80d 	bl	8000bd0 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e21d      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	4b65      	ldr	r3, [pc, #404]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b62      	ldr	r3, [pc, #392]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	495f      	ldr	r1, [pc, #380]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
 8001be4:	e018      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5c      	ldr	r2, [pc, #368]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7fe ffed 	bl	8000bd0 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7fe ffe9 	bl	8000bd0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1f9      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c32:	4a4a      	ldr	r2, [pc, #296]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ffc8 	bl	8000bd0 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7fe ffc4 	bl	8000bd0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1d4      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c56:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ef      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3ec>
 8001c64:	e01b      	b.n	8001c9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7fe ffab 	bl	8000bd0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7fe ffa7 	bl	8000bd0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1b7      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ef      	bne.n	8001c7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80a6 	beq.w	8001df8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc8:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd8:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d118      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf0:	f7fe ff6e 	bl	8000bd0 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7fe ff6a 	bl	8000bd0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e17a      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <HAL_RCC_OscConfig+0x508>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d8>
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d2e:	e029      	b.n	8001d84 <HAL_RCC_OscConfig+0x52c>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d115      	bne.n	8001d64 <HAL_RCC_OscConfig+0x50c>
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3e:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4e:	4a03      	ldr	r2, [pc, #12]	@ (8001d5c <HAL_RCC_OscConfig+0x504>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d58:	e014      	b.n	8001d84 <HAL_RCC_OscConfig+0x52c>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
 8001d64:	4b9c      	ldr	r3, [pc, #624]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6a:	4a9b      	ldr	r2, [pc, #620]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d74:	4b98      	ldr	r3, [pc, #608]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7a:	4a97      	ldr	r2, [pc, #604]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d016      	beq.n	8001dba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7fe ff20 	bl	8000bd0 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7fe ff1c 	bl	8000bd0 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e12a      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001daa:	4b8b      	ldr	r3, [pc, #556]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ed      	beq.n	8001d94 <HAL_RCC_OscConfig+0x53c>
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7fe ff09 	bl	8000bd0 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe ff05 	bl	8000bd0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e113      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ed      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4b7a      	ldr	r3, [pc, #488]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	4a79      	ldr	r2, [pc, #484]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80fe 	beq.w	8001ffe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 80d0 	bne.w	8001fac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e0c:	4b72      	ldr	r3, [pc, #456]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d130      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d127      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d11f      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e4c:	2a07      	cmp	r2, #7
 8001e4e:	bf14      	ite	ne
 8001e50:	2201      	movne	r2, #1
 8001e52:	2200      	moveq	r2, #0
 8001e54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d06e      	beq.n	8001f60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d069      	beq.n	8001f5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e88:	4b53      	ldr	r3, [pc, #332]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e94:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0ad      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb0:	f7fe fe8e 	bl	8000bd0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fe8a 	bl	8000bd0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e09a      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed6:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_RCC_OscConfig+0x784>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ef0:	0212      	lsls	r2, r2, #8
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ef8:	0852      	lsrs	r2, r2, #1
 8001efa:	3a01      	subs	r2, #1
 8001efc:	0552      	lsls	r2, r2, #21
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f04:	0852      	lsrs	r2, r2, #1
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0652      	lsls	r2, r2, #25
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f10:	0912      	lsrs	r2, r2, #4
 8001f12:	0452      	lsls	r2, r2, #17
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4930      	ldr	r1, [pc, #192]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f34:	f7fe fe4c 	bl	8000bd0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe fe48 	bl	8000bd0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e058      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f5a:	e050      	b.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e04f      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d148      	bne.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a16      	ldr	r2, [pc, #88]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f84:	f7fe fe24 	bl	8000bd0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe fe20 	bl	8000bd0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e030      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x734>
 8001faa:	e028      	b.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d023      	beq.n	8001ffa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a08      	ldr	r2, [pc, #32]	@ (8001fd8 <HAL_RCC_OscConfig+0x780>)
 8001fb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fe07 	bl	8000bd0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	e00c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe fe03 	bl	8000bd0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d905      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e013      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_OscConfig+0x7b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ec      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_RCC_OscConfig+0x7b0>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4905      	ldr	r1, [pc, #20]	@ (8002008 <HAL_RCC_OscConfig+0x7b0>)
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_RCC_OscConfig+0x7b4>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e001      	b.n	8001ffe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	feeefffc 	.word	0xfeeefffc

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0e7      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b75      	ldr	r3, [pc, #468]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b72      	ldr	r3, [pc, #456]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4970      	ldr	r1, [pc, #448]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b6e      	ldr	r3, [pc, #440]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0cf      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d010      	beq.n	8002082 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b66      	ldr	r3, [pc, #408]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800206c:	429a      	cmp	r2, r3
 800206e:	d908      	bls.n	8002082 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4960      	ldr	r1, [pc, #384]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d04c      	beq.n	8002128 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	4b5a      	ldr	r3, [pc, #360]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0a6      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e09a      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08e      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e086      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4943      	ldr	r1, [pc, #268]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f8:	f7fe fd6a 	bl	8000bd0 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe fd66 	bl	8000bd0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e06e      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002140:	429a      	cmp	r2, r3
 8002142:	d208      	bcs.n	8002156 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b2e      	ldr	r3, [pc, #184]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	492b      	ldr	r1, [pc, #172]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002156:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d210      	bcs.n	8002186 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002164:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0207 	bic.w	r2, r3, #7
 800216c:	4923      	ldr	r1, [pc, #140]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <HAL_RCC_ClockConfig+0x1ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e036      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4918      	ldr	r1, [pc, #96]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c4:	f000 f824 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_RCC_ClockConfig+0x1f0>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	490b      	ldr	r1, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1f4>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <HAL_RCC_ClockConfig+0x1f8>)
 80021e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1fc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fca1 	bl	8000b30 <HAL_InitTick>
 80021ee:	4603      	mov	r3, r0
 80021f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80021f2:	7afb      	ldrb	r3, [r7, #11]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40022000 	.word	0x40022000
 8002200:	40021000 	.word	0x40021000
 8002204:	08004084 	.word	0x08004084
 8002208:	20000000 	.word	0x20000000
 800220c:	20000004 	.word	0x20000004

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4b3e      	ldr	r3, [pc, #248]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x34>
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d121      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d11e      	bne.n	8002282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002244:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	e005      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002260:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800226c:	4a2b      	ldr	r2, [pc, #172]	@ (800231c <HAL_RCC_GetSysClockFreq+0x10c>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d102      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x110>)
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	e004      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d101      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x114>)
 8002296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d134      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0xac>
 80022b4:	e005      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x110>)
 80022b8:	617b      	str	r3, [r7, #20]
      break;
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x114>)
 80022be:	617b      	str	r3, [r7, #20]
      break;
 80022c0:	e002      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	617b      	str	r3, [r7, #20]
      break;
 80022c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	3301      	adds	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	0e5b      	lsrs	r3, r3, #25
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	3301      	adds	r3, #1
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002308:	69bb      	ldr	r3, [r7, #24]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	0800409c 	.word	0x0800409c
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200

08002328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_RCC_GetHCLKFreq+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000000 	.word	0x20000000

08002340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002344:	f7ff fff0 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4904      	ldr	r1, [pc, #16]	@ (8002368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08004094 	.word	0x08004094

0800236c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002370:	f7ff ffda 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0adb      	lsrs	r3, r3, #11
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4904      	ldr	r1, [pc, #16]	@ (8002394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	08004094 	.word	0x08004094

08002398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f9ee 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
 80023b6:	e014      	b.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d0:	f7ff f9de 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 80023d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023e8:	d10b      	bne.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b80      	cmp	r3, #128	@ 0x80
 80023ee:	d919      	bls.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80023f4:	d902      	bls.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e013      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023fc:	2301      	movs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e010      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b80      	cmp	r3, #128	@ 0x80
 8002406:	d902      	bls.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002408:	2303      	movs	r3, #3
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e00a      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	@ 0x80
 8002412:	d102      	bne.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e004      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b70      	cmp	r3, #112	@ 0x70
 800241e:	d101      	bne.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 0207 	bic.w	r2, r3, #7
 800242c:	4909      	ldr	r1, [pc, #36]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002434:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002460:	2300      	movs	r3, #0
 8002462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002464:	2300      	movs	r3, #0
 8002466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d041      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002478:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800247c:	d02a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800247e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002482:	d824      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002488:	d008      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800248a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800248e:	d81e      	bhi.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002498:	d010      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800249a:	e018      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800249c:	4b86      	ldr	r3, [pc, #536]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a85      	ldr	r2, [pc, #532]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a8:	e015      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fabb 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ba:	e00c      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3320      	adds	r3, #32
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fba6 	bl	8002c14 <RCCEx_PLLSAI2_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024cc:	e003      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	74fb      	strb	r3, [r7, #19]
      break;
 80024d2:	e000      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024dc:	4b76      	ldr	r3, [pc, #472]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ea:	4973      	ldr	r1, [pc, #460]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024f2:	e001      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d041      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002508:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800250c:	d02a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800250e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002512:	d824      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800251a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800251e:	d81e      	bhi.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002528:	d010      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800252a:	e018      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800252c:	4b62      	ldr	r3, [pc, #392]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a61      	ldr	r2, [pc, #388]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002536:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002538:	e015      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3304      	adds	r3, #4
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fa73 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800254a:	e00c      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3320      	adds	r3, #32
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fb5e 	bl	8002c14 <RCCEx_PLLSAI2_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800255c:	e003      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	74fb      	strb	r3, [r7, #19]
      break;
 8002562:	e000      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800256c:	4b52      	ldr	r3, [pc, #328]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002572:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800257a:	494f      	ldr	r1, [pc, #316]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002582:	e001      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a0 	beq.w	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	4a40      	ldr	r2, [pc, #256]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80025bc:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025cc:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3a      	ldr	r2, [pc, #232]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025d8:	f7fe fafa 	bl	8000bd0 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025de:	e009      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe faf6 	bl	8000bd0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	74fb      	strb	r3, [r7, #19]
        break;
 80025f2:	e005      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f4:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ef      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15c      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002606:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002610:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01f      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	d019      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002624:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	4a20      	ldr	r2, [pc, #128]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002640:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002650:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fab5 	bl	8000bd0 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002668:	e00b      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fab1 	bl	8000bd0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d902      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	74fb      	strb	r3, [r7, #19]
            break;
 8002680:	e006      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ec      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a6:	4904      	ldr	r1, [pc, #16]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026ae:	e009      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
 80026b4:	e006      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c4:	7c7b      	ldrb	r3, [r7, #17]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e2:	4b98      	ldr	r3, [pc, #608]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e8:	f023 0203 	bic.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f0:	4994      	ldr	r1, [pc, #592]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002704:	4b8f      	ldr	r3, [pc, #572]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002712:	498c      	ldr	r1, [pc, #560]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002726:	4b87      	ldr	r3, [pc, #540]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	4983      	ldr	r1, [pc, #524]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002748:	4b7e      	ldr	r3, [pc, #504]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	497b      	ldr	r1, [pc, #492]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800276a:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	4972      	ldr	r1, [pc, #456]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800278c:	4b6d      	ldr	r3, [pc, #436]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	496a      	ldr	r1, [pc, #424]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ae:	4b65      	ldr	r3, [pc, #404]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	4961      	ldr	r1, [pc, #388]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	4959      	ldr	r1, [pc, #356]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f2:	4b54      	ldr	r3, [pc, #336]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002800:	4950      	ldr	r1, [pc, #320]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002814:	4b4b      	ldr	r3, [pc, #300]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	4948      	ldr	r1, [pc, #288]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002836:	4b43      	ldr	r3, [pc, #268]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	493f      	ldr	r1, [pc, #252]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d028      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002858:	4b3a      	ldr	r3, [pc, #232]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002866:	4937      	ldr	r1, [pc, #220]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002876:	d106      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a31      	ldr	r2, [pc, #196]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
 8002884:	e011      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800288a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800288e:	d10c      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f8c8 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d028      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	491f      	ldr	r1, [pc, #124]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d4:	d106      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4a1a      	ldr	r2, [pc, #104]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e0:	60d3      	str	r3, [r2, #12]
 80028e2:	e011      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f899 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02b      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002922:	4908      	ldr	r1, [pc, #32]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002932:	d109      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b03      	ldr	r3, [pc, #12]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a02      	ldr	r2, [pc, #8]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
 8002940:	e014      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002950:	d10c      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f867 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d02f      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002986:	4928      	ldr	r1, [pc, #160]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002996:	d10d      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f844 	bl	8002a2c <RCCEx_PLLSAI1_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d014      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
 80029b0:	74bb      	strb	r3, [r7, #18]
 80029b2:	e011      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3320      	adds	r3, #32
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f925 	bl	8002c14 <RCCEx_PLLSAI2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029e4:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029f2:	490d      	ldr	r1, [pc, #52]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a16:	4904      	ldr	r1, [pc, #16]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000

08002a2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a3a:	4b75      	ldr	r3, [pc, #468]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d018      	beq.n	8002a78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a46:	4b72      	ldr	r3, [pc, #456]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0203 	and.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10d      	bne.n	8002a72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
       ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d047      	beq.n	8002b02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e044      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d018      	beq.n	8002ab2 <RCCEx_PLLSAI1_Config+0x86>
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d825      	bhi.n	8002ad0 <RCCEx_PLLSAI1_Config+0xa4>
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d002      	beq.n	8002a8e <RCCEx_PLLSAI1_Config+0x62>
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d009      	beq.n	8002aa0 <RCCEx_PLLSAI1_Config+0x74>
 8002a8c:	e020      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a8e:	4b60      	ldr	r3, [pc, #384]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11d      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9e:	e01a      	b.n	8002ad6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d116      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e013      	b.n	8002ada <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ace:	e006      	b.n	8002ade <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad4:	e004      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	430b      	orrs	r3, r1
 8002afc:	4944      	ldr	r1, [pc, #272]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d17d      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b08:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a40      	ldr	r2, [pc, #256]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7fe f85c 	bl	8000bd0 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b1a:	e009      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b1c:	f7fe f858 	bl	8000bd0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d902      	bls.n	8002b30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b2e:	e005      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b30:	4b37      	ldr	r3, [pc, #220]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ef      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d160      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	0211      	lsls	r1, r2, #8
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68d2      	ldr	r2, [r2, #12]
 8002b5e:	0912      	lsrs	r2, r2, #4
 8002b60:	0452      	lsls	r2, r2, #17
 8002b62:	430a      	orrs	r2, r1
 8002b64:	492a      	ldr	r1, [pc, #168]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	610b      	str	r3, [r1, #16]
 8002b6a:	e027      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d112      	bne.n	8002b98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b72:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	0211      	lsls	r1, r2, #8
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6912      	ldr	r2, [r2, #16]
 8002b88:	0852      	lsrs	r2, r2, #1
 8002b8a:	3a01      	subs	r2, #1
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	491f      	ldr	r1, [pc, #124]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	610b      	str	r3, [r1, #16]
 8002b96:	e011      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b98:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ba0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6892      	ldr	r2, [r2, #8]
 8002ba8:	0211      	lsls	r1, r2, #8
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6952      	ldr	r2, [r2, #20]
 8002bae:	0852      	lsrs	r2, r2, #1
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	0652      	lsls	r2, r2, #25
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	4916      	ldr	r1, [pc, #88]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe f802 	bl	8000bd0 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bce:	e009      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd0:	f7fd fffe 	bl	8000bd0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
          break;
 8002be2:	e005      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ef      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	4904      	ldr	r1, [pc, #16]	@ (8002c10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000

08002c14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c22:	4b6a      	ldr	r3, [pc, #424]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c2e:	4b67      	ldr	r3, [pc, #412]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0203 	and.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d10d      	bne.n	8002c5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
       ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c46:	4b61      	ldr	r3, [pc, #388]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
       ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d047      	beq.n	8002cea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e044      	b.n	8002cea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d018      	beq.n	8002c9a <RCCEx_PLLSAI2_Config+0x86>
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d825      	bhi.n	8002cb8 <RCCEx_PLLSAI2_Config+0xa4>
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d002      	beq.n	8002c76 <RCCEx_PLLSAI2_Config+0x62>
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d009      	beq.n	8002c88 <RCCEx_PLLSAI2_Config+0x74>
 8002c74:	e020      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c76:	4b55      	ldr	r3, [pc, #340]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11d      	bne.n	8002cbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c86:	e01a      	b.n	8002cbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c88:	4b50      	ldr	r3, [pc, #320]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e013      	b.n	8002cc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ca6:	4b49      	ldr	r3, [pc, #292]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cb6:	e006      	b.n	8002cc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e004      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cce:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	4939      	ldr	r1, [pc, #228]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d167      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cf0:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a35      	ldr	r2, [pc, #212]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fd ff68 	bl	8000bd0 <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d02:	e009      	b.n	8002d18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d04:	f7fd ff64 	bl	8000bd0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d902      	bls.n	8002d18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	73fb      	strb	r3, [r7, #15]
        break;
 8002d16:	e005      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d18:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ef      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d14a      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d30:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6892      	ldr	r2, [r2, #8]
 8002d40:	0211      	lsls	r1, r2, #8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	0912      	lsrs	r2, r2, #4
 8002d48:	0452      	lsls	r2, r2, #17
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	491f      	ldr	r1, [pc, #124]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	614b      	str	r3, [r1, #20]
 8002d52:	e011      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d54:	4b1d      	ldr	r3, [pc, #116]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6892      	ldr	r2, [r2, #8]
 8002d64:	0211      	lsls	r1, r2, #8
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6912      	ldr	r2, [r2, #16]
 8002d6a:	0852      	lsrs	r2, r2, #1
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	0652      	lsls	r2, r2, #25
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4916      	ldr	r1, [pc, #88]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d78:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fd ff24 	bl	8000bd0 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d8a:	e009      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d8c:	f7fd ff20 	bl	8000bd0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d902      	bls.n	8002da0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d9e:	e005      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	4904      	ldr	r1, [pc, #16]	@ (8002dcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e040      	b.n	8002e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fd32 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	@ 0x24
 8002dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fe90 	bl	8003b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fbd5 	bl	80035cc <UART_SetConfig>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e01b      	b.n	8002e64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 ff0f 	bl	8003c80 <UART_CheckIdleState>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d177      	bne.n	8002f74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Transmit+0x24>
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e070      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2221      	movs	r2, #33	@ 0x21
 8002ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea2:	f7fd fe95 	bl	8000bd0 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec0:	d108      	bne.n	8002ed4 <HAL_UART_Transmit+0x68>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e003      	b.n	8002edc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002edc:	e02f      	b.n	8002f3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 ff71 	bl	8003dd0 <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e03b      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	b292      	uxth	r2, r2
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	3302      	adds	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e007      	b.n	8002f2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1c9      	bne.n	8002ede <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2140      	movs	r1, #64	@ 0x40
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 ff3b 	bl	8003dd0 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e005      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0ba      	sub	sp, #232	@ 0xe8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002faa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002fae:	4013      	ands	r3, r2
 8002fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d115      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00f      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 82ca 	beq.w	8003572 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
      }
      return;
 8002fe6:	e2c4      	b.n	8003572 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8117 	beq.w	8003220 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ffe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003002:	4b85      	ldr	r3, [pc, #532]	@ (8003218 <HAL_UART_IRQHandler+0x298>)
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 810a 	beq.w	8003220 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d011      	beq.n	800303c <HAL_UART_IRQHandler+0xbc>
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d011      	beq.n	800306c <HAL_UART_IRQHandler+0xec>
 8003048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2202      	movs	r2, #2
 800305a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d011      	beq.n	800309c <HAL_UART_IRQHandler+0x11c>
 8003078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2204      	movs	r2, #4
 800308a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800309c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d017      	beq.n	80030d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2208      	movs	r2, #8
 80030c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ce:	f043 0208 	orr.w	r2, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <HAL_UART_IRQHandler+0x18a>
 80030e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8230 	beq.w	8003576 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003144:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b40      	cmp	r3, #64	@ 0x40
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800315a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800315e:	2b00      	cmp	r3, #0
 8003160:	d04f      	beq.n	8003202 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fea1 	bl	8003eaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003172:	2b40      	cmp	r3, #64	@ 0x40
 8003174:	d141      	bne.n	80031fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3308      	adds	r3, #8
 800317c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800318c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3308      	adds	r3, #8
 800319e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1d9      	bne.n	8003176 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d013      	beq.n	80031f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ce:	4a13      	ldr	r2, [pc, #76]	@ (800321c <HAL_UART_IRQHandler+0x29c>)
 80031d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd ff51 	bl	800107e <HAL_DMA_Abort_IT>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d017      	beq.n	8003212 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ec:	4610      	mov	r0, r2
 80031ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f0:	e00f      	b.n	8003212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9d4 	bl	80035a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	e00b      	b.n	8003212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f9d0 	bl	80035a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	e007      	b.n	8003212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9cc 	bl	80035a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003210:	e1b1      	b.n	8003576 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003212:	bf00      	nop
    return;
 8003214:	e1af      	b.n	8003576 <HAL_UART_IRQHandler+0x5f6>
 8003216:	bf00      	nop
 8003218:	04000120 	.word	0x04000120
 800321c:	08003f73 	.word	0x08003f73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 816a 	bne.w	80034fe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8163 	beq.w	80034fe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 815c 	beq.w	80034fe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2210      	movs	r2, #16
 800324c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	f040 80d4 	bne.w	8003406 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800326a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80ad 	beq.w	80033ce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800327a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800327e:	429a      	cmp	r2, r3
 8003280:	f080 80a5 	bcs.w	80033ce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800328a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8086 	bne.w	80033ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80032ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1da      	bne.n	80032a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3308      	adds	r3, #8
 80032f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f4:	e853 3f00 	ldrex	r3, [r3]
 80032f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3308      	adds	r3, #8
 800330a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800330e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003312:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003316:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e1      	bne.n	80032ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3308      	adds	r3, #8
 800332c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800333c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3308      	adds	r3, #8
 8003346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800334a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800334c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003350:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e3      	bne.n	8003326 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800337a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800337c:	f023 0310 	bic.w	r3, r3, #16
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800338e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003390:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800339c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e4      	bne.n	800336c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fe2b 	bl	8001002 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f4 	bl	80035b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80033cc:	e0d5      	b.n	800357a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 80ce 	bne.w	800357a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	f040 80c5 	bne.w	800357a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8d8 	bl	80035b4 <HAL_UARTEx_RxEventCallback>
      return;
 8003404:	e0b9      	b.n	800357a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003412:	b29b      	uxth	r3, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80ab 	beq.w	800357e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a6 	beq.w	800357e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003446:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
 8003456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800345a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e4      	bne.n	8003432 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	623b      	str	r3, [r7, #32]
   return(result);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800348c:	633a      	str	r2, [r7, #48]	@ 0x30
 800348e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e3      	bne.n	8003468 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f023 0310 	bic.w	r3, r3, #16
 80034c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	69b9      	ldr	r1, [r7, #24]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	617b      	str	r3, [r7, #20]
   return(result);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e4      	bne.n	80034b4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f85c 	bl	80035b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034fc:	e03f      	b.n	800357e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <HAL_UART_IRQHandler+0x5a8>
 800350a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800351e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fd66 	bl	8003ff2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003526:	e02d      	b.n	8003584 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
    }
    return;
 8003550:	e017      	b.n	8003582 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <HAL_UART_IRQHandler+0x604>
 800355e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fd17 	bl	8003f9e <UART_EndTransmit_IT>
    return;
 8003570:	e008      	b.n	8003584 <HAL_UART_IRQHandler+0x604>
      return;
 8003572:	bf00      	nop
 8003574:	e006      	b.n	8003584 <HAL_UART_IRQHandler+0x604>
    return;
 8003576:	bf00      	nop
 8003578:	e004      	b.n	8003584 <HAL_UART_IRQHandler+0x604>
      return;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <HAL_UART_IRQHandler+0x604>
      return;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <HAL_UART_IRQHandler+0x604>
    return;
 8003582:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003584:	37e8      	adds	r7, #232	@ 0xe8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop

0800358c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b08a      	sub	sp, #40	@ 0x28
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4ba4      	ldr	r3, [pc, #656]	@ (800388c <UART_SetConfig+0x2c0>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003604:	430b      	orrs	r3, r1
 8003606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a99      	ldr	r2, [pc, #612]	@ (8003890 <UART_SetConfig+0x2c4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003634:	4313      	orrs	r3, r2
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a90      	ldr	r2, [pc, #576]	@ (8003894 <UART_SetConfig+0x2c8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d126      	bne.n	80036a4 <UART_SetConfig+0xd8>
 8003656:	4b90      	ldr	r3, [pc, #576]	@ (8003898 <UART_SetConfig+0x2cc>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b03      	cmp	r3, #3
 8003662:	d81b      	bhi.n	800369c <UART_SetConfig+0xd0>
 8003664:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <UART_SetConfig+0xa0>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	0800367d 	.word	0x0800367d
 8003670:	0800368d 	.word	0x0800368d
 8003674:	08003685 	.word	0x08003685
 8003678:	08003695 	.word	0x08003695
 800367c:	2301      	movs	r3, #1
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003682:	e116      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003684:	2302      	movs	r3, #2
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368a:	e112      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800368c:	2304      	movs	r3, #4
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003692:	e10e      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003694:	2308      	movs	r3, #8
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369a:	e10a      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800369c:	2310      	movs	r3, #16
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a2:	e106      	b.n	80038b2 <UART_SetConfig+0x2e6>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7c      	ldr	r2, [pc, #496]	@ (800389c <UART_SetConfig+0x2d0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d138      	bne.n	8003720 <UART_SetConfig+0x154>
 80036ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003898 <UART_SetConfig+0x2cc>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d82d      	bhi.n	8003718 <UART_SetConfig+0x14c>
 80036bc:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <UART_SetConfig+0xf8>)
 80036be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c2:	bf00      	nop
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003719 	.word	0x08003719
 80036cc:	08003719 	.word	0x08003719
 80036d0:	08003719 	.word	0x08003719
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003719 	.word	0x08003719
 80036dc:	08003719 	.word	0x08003719
 80036e0:	08003719 	.word	0x08003719
 80036e4:	08003701 	.word	0x08003701
 80036e8:	08003719 	.word	0x08003719
 80036ec:	08003719 	.word	0x08003719
 80036f0:	08003719 	.word	0x08003719
 80036f4:	08003711 	.word	0x08003711
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fe:	e0d8      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003700:	2302      	movs	r3, #2
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e0d4      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003708:	2304      	movs	r3, #4
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370e:	e0d0      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003710:	2308      	movs	r3, #8
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003716:	e0cc      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003718:	2310      	movs	r3, #16
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371e:	e0c8      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5e      	ldr	r2, [pc, #376]	@ (80038a0 <UART_SetConfig+0x2d4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d125      	bne.n	8003776 <UART_SetConfig+0x1aa>
 800372a:	4b5b      	ldr	r3, [pc, #364]	@ (8003898 <UART_SetConfig+0x2cc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003734:	2b30      	cmp	r3, #48	@ 0x30
 8003736:	d016      	beq.n	8003766 <UART_SetConfig+0x19a>
 8003738:	2b30      	cmp	r3, #48	@ 0x30
 800373a:	d818      	bhi.n	800376e <UART_SetConfig+0x1a2>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d00a      	beq.n	8003756 <UART_SetConfig+0x18a>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d814      	bhi.n	800376e <UART_SetConfig+0x1a2>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <UART_SetConfig+0x182>
 8003748:	2b10      	cmp	r3, #16
 800374a:	d008      	beq.n	800375e <UART_SetConfig+0x192>
 800374c:	e00f      	b.n	800376e <UART_SetConfig+0x1a2>
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003754:	e0ad      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003756:	2302      	movs	r3, #2
 8003758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375c:	e0a9      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800375e:	2304      	movs	r3, #4
 8003760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003764:	e0a5      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003766:	2308      	movs	r3, #8
 8003768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376c:	e0a1      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800376e:	2310      	movs	r3, #16
 8003770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003774:	e09d      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <UART_SetConfig+0x2d8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d125      	bne.n	80037cc <UART_SetConfig+0x200>
 8003780:	4b45      	ldr	r3, [pc, #276]	@ (8003898 <UART_SetConfig+0x2cc>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800378a:	2bc0      	cmp	r3, #192	@ 0xc0
 800378c:	d016      	beq.n	80037bc <UART_SetConfig+0x1f0>
 800378e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003790:	d818      	bhi.n	80037c4 <UART_SetConfig+0x1f8>
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d00a      	beq.n	80037ac <UART_SetConfig+0x1e0>
 8003796:	2b80      	cmp	r3, #128	@ 0x80
 8003798:	d814      	bhi.n	80037c4 <UART_SetConfig+0x1f8>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <UART_SetConfig+0x1d8>
 800379e:	2b40      	cmp	r3, #64	@ 0x40
 80037a0:	d008      	beq.n	80037b4 <UART_SetConfig+0x1e8>
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x1f8>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e082      	b.n	80038b2 <UART_SetConfig+0x2e6>
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e07e      	b.n	80038b2 <UART_SetConfig+0x2e6>
 80037b4:	2304      	movs	r3, #4
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ba:	e07a      	b.n	80038b2 <UART_SetConfig+0x2e6>
 80037bc:	2308      	movs	r3, #8
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c2:	e076      	b.n	80038b2 <UART_SetConfig+0x2e6>
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ca:	e072      	b.n	80038b2 <UART_SetConfig+0x2e6>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a35      	ldr	r2, [pc, #212]	@ (80038a8 <UART_SetConfig+0x2dc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d12a      	bne.n	800382c <UART_SetConfig+0x260>
 80037d6:	4b30      	ldr	r3, [pc, #192]	@ (8003898 <UART_SetConfig+0x2cc>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e4:	d01a      	beq.n	800381c <UART_SetConfig+0x250>
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ea:	d81b      	bhi.n	8003824 <UART_SetConfig+0x258>
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f0:	d00c      	beq.n	800380c <UART_SetConfig+0x240>
 80037f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f6:	d815      	bhi.n	8003824 <UART_SetConfig+0x258>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <UART_SetConfig+0x238>
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003800:	d008      	beq.n	8003814 <UART_SetConfig+0x248>
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x258>
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e052      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800380c:	2302      	movs	r3, #2
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003812:	e04e      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003814:	2304      	movs	r3, #4
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381a:	e04a      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800381c:	2308      	movs	r3, #8
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003822:	e046      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003824:	2310      	movs	r3, #16
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382a:	e042      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a17      	ldr	r2, [pc, #92]	@ (8003890 <UART_SetConfig+0x2c4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d13a      	bne.n	80038ac <UART_SetConfig+0x2e0>
 8003836:	4b18      	ldr	r3, [pc, #96]	@ (8003898 <UART_SetConfig+0x2cc>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003840:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003844:	d01a      	beq.n	800387c <UART_SetConfig+0x2b0>
 8003846:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800384a:	d81b      	bhi.n	8003884 <UART_SetConfig+0x2b8>
 800384c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003850:	d00c      	beq.n	800386c <UART_SetConfig+0x2a0>
 8003852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003856:	d815      	bhi.n	8003884 <UART_SetConfig+0x2b8>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <UART_SetConfig+0x298>
 800385c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003860:	d008      	beq.n	8003874 <UART_SetConfig+0x2a8>
 8003862:	e00f      	b.n	8003884 <UART_SetConfig+0x2b8>
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e022      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800386c:	2302      	movs	r3, #2
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e01e      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003874:	2304      	movs	r3, #4
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e01a      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800387c:	2308      	movs	r3, #8
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003882:	e016      	b.n	80038b2 <UART_SetConfig+0x2e6>
 8003884:	2310      	movs	r3, #16
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800388a:	e012      	b.n	80038b2 <UART_SetConfig+0x2e6>
 800388c:	efff69f3 	.word	0xefff69f3
 8003890:	40008000 	.word	0x40008000
 8003894:	40013800 	.word	0x40013800
 8003898:	40021000 	.word	0x40021000
 800389c:	40004400 	.word	0x40004400
 80038a0:	40004800 	.word	0x40004800
 80038a4:	40004c00 	.word	0x40004c00
 80038a8:	40005000 	.word	0x40005000
 80038ac:	2310      	movs	r3, #16
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a9f      	ldr	r2, [pc, #636]	@ (8003b34 <UART_SetConfig+0x568>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d17a      	bne.n	80039b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d824      	bhi.n	800390e <UART_SetConfig+0x342>
 80038c4:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <UART_SetConfig+0x300>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	0800390f 	.word	0x0800390f
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	0800390f 	.word	0x0800390f
 80038dc:	080038ff 	.word	0x080038ff
 80038e0:	0800390f 	.word	0x0800390f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800390f 	.word	0x0800390f
 80038ec:	08003907 	.word	0x08003907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7fe fd26 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 80038f4:	61f8      	str	r0, [r7, #28]
        break;
 80038f6:	e010      	b.n	800391a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003b38 <UART_SetConfig+0x56c>)
 80038fa:	61fb      	str	r3, [r7, #28]
        break;
 80038fc:	e00d      	b.n	800391a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fe:	f7fe fc87 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8003902:	61f8      	str	r0, [r7, #28]
        break;
 8003904:	e009      	b.n	800391a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800390a:	61fb      	str	r3, [r7, #28]
        break;
 800390c:	e005      	b.n	800391a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80fb 	beq.w	8003b18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	429a      	cmp	r2, r3
 8003930:	d305      	bcc.n	800393e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	429a      	cmp	r2, r3
 800393c:	d903      	bls.n	8003946 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003944:	e0e8      	b.n	8003b18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2200      	movs	r2, #0
 800394a:	461c      	mov	r4, r3
 800394c:	4615      	mov	r5, r2
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	022b      	lsls	r3, r5, #8
 8003958:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800395c:	0222      	lsls	r2, r4, #8
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6849      	ldr	r1, [r1, #4]
 8003962:	0849      	lsrs	r1, r1, #1
 8003964:	2000      	movs	r0, #0
 8003966:	4688      	mov	r8, r1
 8003968:	4681      	mov	r9, r0
 800396a:	eb12 0a08 	adds.w	sl, r2, r8
 800396e:	eb43 0b09 	adc.w	fp, r3, r9
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003980:	4650      	mov	r0, sl
 8003982:	4659      	mov	r1, fp
 8003984:	f7fc fc20 	bl	80001c8 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003996:	d308      	bcc.n	80039aa <UART_SetConfig+0x3de>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800399e:	d204      	bcs.n	80039aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	e0b6      	b.n	8003b18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039b0:	e0b2      	b.n	8003b18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ba:	d15e      	bne.n	8003a7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d828      	bhi.n	8003a16 <UART_SetConfig+0x44a>
 80039c4:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <UART_SetConfig+0x400>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	08003a01 	.word	0x08003a01
 80039d8:	08003a17 	.word	0x08003a17
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a17 	.word	0x08003a17
 80039e8:	08003a17 	.word	0x08003a17
 80039ec:	08003a0f 	.word	0x08003a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7fe fca6 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 80039f4:	61f8      	str	r0, [r7, #28]
        break;
 80039f6:	e014      	b.n	8003a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7fe fcb8 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 80039fc:	61f8      	str	r0, [r7, #28]
        break;
 80039fe:	e010      	b.n	8003a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b4d      	ldr	r3, [pc, #308]	@ (8003b38 <UART_SetConfig+0x56c>)
 8003a02:	61fb      	str	r3, [r7, #28]
        break;
 8003a04:	e00d      	b.n	8003a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe fc03 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8003a0a:	61f8      	str	r0, [r7, #28]
        break;
 8003a0c:	e009      	b.n	8003a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a12:	61fb      	str	r3, [r7, #28]
        break;
 8003a14:	e005      	b.n	8003a22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d077      	beq.n	8003b18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005a      	lsls	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b0f      	cmp	r3, #15
 8003a42:	d916      	bls.n	8003a72 <UART_SetConfig+0x4a6>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4a:	d212      	bcs.n	8003a72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f023 030f 	bic.w	r3, r3, #15
 8003a54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	8afa      	ldrh	r2, [r7, #22]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	e052      	b.n	8003b18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a78:	e04e      	b.n	8003b18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d827      	bhi.n	8003ad2 <UART_SetConfig+0x506>
 8003a82:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <UART_SetConfig+0x4bc>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003ac3 	.word	0x08003ac3
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ad3 	.word	0x08003ad3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe fc48 	bl	8002340 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	61f8      	str	r0, [r7, #28]
        break;
 8003ab2:	e014      	b.n	8003ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fc5a 	bl	800236c <HAL_RCC_GetPCLK2Freq>
 8003ab8:	61f8      	str	r0, [r7, #28]
        break;
 8003aba:	e010      	b.n	8003ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <UART_SetConfig+0x56c>)
 8003abe:	61fb      	str	r3, [r7, #28]
        break;
 8003ac0:	e00d      	b.n	8003ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe fba5 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8003ac6:	61f8      	str	r0, [r7, #28]
        break;
 8003ac8:	e009      	b.n	8003ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ace:	61fb      	str	r3, [r7, #28]
        break;
 8003ad0:	e005      	b.n	8003ade <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003adc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	085a      	lsrs	r2, r3, #1
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	441a      	add	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d909      	bls.n	8003b12 <UART_SetConfig+0x546>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b04:	d205      	bcs.n	8003b12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	e002      	b.n	8003b18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3728      	adds	r7, #40	@ 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b32:	bf00      	nop
 8003b34:	40008000 	.word	0x40008000
 8003b38:	00f42400 	.word	0x00f42400

08003b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01a      	beq.n	8003c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c3a:	d10a      	bne.n	8003c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b098      	sub	sp, #96	@ 0x60
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c90:	f7fc ff9e 	bl	8000bd0 <HAL_GetTick>
 8003c94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d12e      	bne.n	8003d02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	2200      	movs	r2, #0
 8003cae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f88c 	bl	8003dd0 <UART_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d021      	beq.n	8003d02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e6      	bne.n	8003cbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e062      	b.n	8003dc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d149      	bne.n	8003da4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f856 	bl	8003dd0 <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03c      	beq.n	8003da4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	623b      	str	r3, [r7, #32]
   return(result);
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d7c:	61fa      	str	r2, [r7, #28]
 8003d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	617b      	str	r3, [r7, #20]
   return(result);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e011      	b.n	8003dc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3758      	adds	r7, #88	@ 0x58
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de0:	e04f      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d04b      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dea:	f7fc fef1 	bl	8000bd0 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d302      	bcc.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e04e      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d037      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b80      	cmp	r3, #128	@ 0x80
 8003e16:	d034      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b40      	cmp	r3, #64	@ 0x40
 8003e1c:	d031      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d110      	bne.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f838 	bl	8003eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e029      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5c:	d111      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f81e 	bl	8003eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e00f      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d0a0      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b095      	sub	sp, #84	@ 0x54
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ed6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e6      	bne.n	8003eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e5      	bne.n	8003ee4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d118      	bne.n	8003f52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f66:	bf00      	nop
 8003f68:	3754      	adds	r7, #84	@ 0x54
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fb05 	bl	80035a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b088      	sub	sp, #32
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fad1 	bl	800358c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fea:	bf00      	nop
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <memset>:
 8004006:	4402      	add	r2, r0
 8004008:	4603      	mov	r3, r0
 800400a:	4293      	cmp	r3, r2
 800400c:	d100      	bne.n	8004010 <memset+0xa>
 800400e:	4770      	bx	lr
 8004010:	f803 1b01 	strb.w	r1, [r3], #1
 8004014:	e7f9      	b.n	800400a <memset+0x4>
	...

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4d0d      	ldr	r5, [pc, #52]	@ (8004050 <__libc_init_array+0x38>)
 800401c:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 800401e:	1b64      	subs	r4, r4, r5
 8004020:	10a4      	asrs	r4, r4, #2
 8004022:	2600      	movs	r6, #0
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	4d0b      	ldr	r5, [pc, #44]	@ (8004058 <__libc_init_array+0x40>)
 800402a:	4c0c      	ldr	r4, [pc, #48]	@ (800405c <__libc_init_array+0x44>)
 800402c:	f000 f818 	bl	8004060 <_init>
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	2600      	movs	r6, #0
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080040d4 	.word	0x080040d4
 8004054:	080040d4 	.word	0x080040d4
 8004058:	080040d4 	.word	0x080040d4
 800405c:	080040d8 	.word	0x080040d8

08004060 <_init>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr

0800406c <_fini>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr
