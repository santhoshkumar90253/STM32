
10_HAL_I2C_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006c60  08006c60  00007c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d0c  08006d0c  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d0c  08006d0c  00007d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d14  08006d14  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006d1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000074  08006d90  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006d90  00008324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd0c  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002458  00000000  00000000  00017db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a94  00000000  00000000  0001afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272f6  00000000  00000000  0001ba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f87  00000000  00000000  00042d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec8df  00000000  00000000  00053cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001405a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  001405ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00144580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c48 	.word	0x08006c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006c48 	.word	0x08006c48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
#define SLAVE_ADDRESS  0x3C << 1   // 7-bit addr shifted for HAL
uint8_t txData[] = "HELLO_I2C";
uint8_t rxData[11];

int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f004 fb4f 	bl	8004c50 <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000138 	.word	0x20000138

080005c0 <HAL_I2C_SlaveRxCpltCallback>:
int count = 0;
/* --- Callback when slave finished receiving --- */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C2)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10b      	bne.n	80005ea <HAL_I2C_SlaveRxCpltCallback+0x2a>
    {
    	count = 1;
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
        printf("I2C Loopback OK. Received: %s\r\n", rxData);
 80005d8:	4908      	ldr	r1, [pc, #32]	@ (80005fc <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 80005da:	4809      	ldr	r0, [pc, #36]	@ (8000600 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80005dc:	f005 fcc8 	bl	8005f70 <iprintf>
        // Re-enable reception
        HAL_I2C_Slave_Receive_IT(&hi2c2, rxData, sizeof(txData));
 80005e0:	220a      	movs	r2, #10
 80005e2:	4906      	ldr	r1, [pc, #24]	@ (80005fc <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 80005e4:	4807      	ldr	r0, [pc, #28]	@ (8000604 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80005e6:	f001 f9f5 	bl	80019d4 <HAL_I2C_Slave_Receive_IT>
    }
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40005800 	.word	0x40005800
 80005f8:	200001cc 	.word	0x200001cc
 80005fc:	200001c0 	.word	0x200001c0
 8000600:	08006c60 	.word	0x08006c60
 8000604:	200000e4 	.word	0x200000e4

08000608 <main>:

int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fc2d 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f831 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f931 	bl	800087c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f8ff 	bl	800081c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800061e:	f000 f87d 	bl	800071c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Start slave receive interrupt

    HAL_I2C_Slave_Receive_IT(&hi2c2, rxData, sizeof(txData));
 8000626:	220a      	movs	r2, #10
 8000628:	490d      	ldr	r1, [pc, #52]	@ (8000660 <main+0x58>)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <main+0x5c>)
 800062c:	f001 f9d2 	bl	80019d4 <HAL_I2C_Slave_Receive_IT>
    HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Interrupt", 14, HAL_MAX_DELAY);
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	220e      	movs	r2, #14
 8000636:	490c      	ldr	r1, [pc, #48]	@ (8000668 <main+0x60>)
 8000638:	480c      	ldr	r0, [pc, #48]	@ (800066c <main+0x64>)
 800063a:	f004 fb09 	bl	8004c50 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS, txData, sizeof(txData), HAL_MAX_DELAY) == HAL_OK)
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	230a      	movs	r3, #10
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <main+0x68>)
 8000648:	2178      	movs	r1, #120	@ 0x78
 800064a:	480a      	ldr	r0, [pc, #40]	@ (8000674 <main+0x6c>)
 800064c:	f001 f8aa 	bl	80017a4 <HAL_I2C_Master_Transmit>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f3      	bne.n	800063e <main+0x36>
	  {
		  HAL_Delay(100);
 8000656:	2064      	movs	r0, #100	@ 0x64
 8000658:	f000 fc84 	bl	8000f64 <HAL_Delay>
	  if(HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS, txData, sizeof(txData), HAL_MAX_DELAY) == HAL_OK)
 800065c:	e7ef      	b.n	800063e <main+0x36>
 800065e:	bf00      	nop
 8000660:	200001c0 	.word	0x200001c0
 8000664:	200000e4 	.word	0x200000e4
 8000668:	08006c80 	.word	0x08006c80
 800066c:	20000138 	.word	0x20000138
 8000670:	20000000 	.word	0x20000000
 8000674:	20000090 	.word	0x20000090

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	@ 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	@ 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fcc7 	bl	800601a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800069e:	f002 ff77 	bl	8003590 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f94e 	bl	8000948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c6:	230a      	movs	r3, #10
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 ffae 	bl	800363c <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e6:	f000 f92f 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fb76 	bl	8003df4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f91b 	bl	8000948 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	@ 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	@ (8000790 <MX_I2C1_Init+0x74>)
 8000758:	f000 ff88 	bl	800166c <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 f8f1 	bl	8000948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <MX_I2C1_Init+0x74>)
 800076a:	f002 fe6b 	bl	8003444 <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 f8e8 	bl	8000948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_I2C1_Init+0x74>)
 800077c:	f002 fead 	bl	80034da <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f8df 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000090 	.word	0x20000090
 8000794:	40005400 	.word	0x40005400
 8000798:	10d19ce4 	.word	0x10d19ce4

0800079c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000814 <MX_I2C2_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <MX_I2C2_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007d8:	f000 ff48 	bl	800166c <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 f8b1 	bl	8000948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007ea:	f002 fe2b 	bl	8003444 <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f8a8 	bl	8000948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_I2C2_Init+0x74>)
 80007fc:	f002 fe6d 	bl	80034da <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 f89f 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000e4 	.word	0x200000e4
 8000814:	40005800 	.word	0x40005800
 8000818:	10d19ce4 	.word	0x10d19ce4

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	@ (8000878 <MX_USART2_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USART2_UART_Init+0x58>)
 8000860:	f004 f9a8 	bl	8004bb4 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f86d 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000138 	.word	0x20000138
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a2a      	ldr	r2, [pc, #168]	@ (8000940 <MX_GPIO_Init+0xc4>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a24      	ldr	r2, [pc, #144]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4a18      	ldr	r2, [pc, #96]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008fa:	f000 fe9f 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000904:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	@ (8000944 <MX_GPIO_Init+0xc8>)
 8000916:	f000 fce7 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f000 fcd8 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	@ 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	48000800 	.word	0x48000800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095e:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <HAL_MspInit+0x44>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6613      	str	r3, [r2, #96]	@ 0x60
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x44>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6593      	str	r3, [r2, #88]	@ 0x58
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ae      	sub	sp, #184	@ 0xb8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2288      	movs	r2, #136	@ 0x88
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 fb2c 	bl	800601a <memset>
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a52      	ldr	r2, [pc, #328]	@ (8000b10 <HAL_I2C_MspInit+0x174>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d14b      	bne.n	8000a64 <HAL_I2C_MspInit+0xc8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fc2f 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ffb0 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a49      	ldr	r2, [pc, #292]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f4:	4b47      	ldr	r3, [pc, #284]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a00:	23c0      	movs	r3, #192	@ 0xc0
 8000a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a06:	2312      	movs	r3, #18
 8000a08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a22:	4619      	mov	r1, r3
 8000a24:	483c      	ldr	r0, [pc, #240]	@ (8000b18 <HAL_I2C_MspInit+0x17c>)
 8000a26:	f000 fc5f 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	4a39      	ldr	r2, [pc, #228]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a36:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	201f      	movs	r0, #31
 8000a48:	f000 fb8b 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a4c:	201f      	movs	r0, #31
 8000a4e:	f000 fba4 	bl	800119a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2020      	movs	r0, #32
 8000a58:	f000 fb83 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	f000 fb9c 	bl	800119a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a62:	e050      	b.n	8000b06 <HAL_I2C_MspInit+0x16a>
  else if(hi2c->Instance==I2C2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <HAL_I2C_MspInit+0x180>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d14b      	bne.n	8000b06 <HAL_I2C_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 fbde 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a86:	f7ff ff5f 	bl	8000948 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aa2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000abc:	2304      	movs	r3, #4
 8000abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4813      	ldr	r0, [pc, #76]	@ (8000b18 <HAL_I2C_MspInit+0x17c>)
 8000aca:	f000 fc0d 	bl	80012e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad2:	4a10      	ldr	r2, [pc, #64]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_I2C_MspInit+0x178>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2021      	movs	r0, #33	@ 0x21
 8000aec:	f000 fb39 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000af0:	2021      	movs	r0, #33	@ 0x21
 8000af2:	f000 fb52 	bl	800119a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2022      	movs	r0, #34	@ 0x22
 8000afc:	f000 fb31 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b00:	2022      	movs	r0, #34	@ 0x22
 8000b02:	f000 fb4a 	bl	800119a <HAL_NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	37b8      	adds	r7, #184	@ 0xb8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	40005800 	.word	0x40005800

08000b20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0ac      	sub	sp, #176	@ 0xb0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2288      	movs	r2, #136	@ 0x88
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 fa6a 	bl	800601a <memset>
  if(huart->Instance==USART2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a25      	ldr	r2, [pc, #148]	@ (8000be0 <HAL_UART_MspInit+0xc0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d143      	bne.n	8000bd8 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fb6d 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b68:	f7ff feee 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <HAL_UART_MspInit+0xc4>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b70:	4a1c      	ldr	r2, [pc, #112]	@ (8000be4 <HAL_UART_MspInit+0xc4>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_UART_MspInit+0xc4>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_UART_MspInit+0xc4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <HAL_UART_MspInit+0xc4>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_UART_MspInit+0xc4>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f000 fb90 	bl	80012e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2026      	movs	r0, #38	@ 0x26
 8000bce:	f000 fac8 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd2:	2026      	movs	r0, #38	@ 0x26
 8000bd4:	f000 fae1 	bl	800119a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bd8:	bf00      	nop
 8000bda:	37b0      	adds	r7, #176	@ 0xb0
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40004400 	.word	0x40004400
 8000be4:	40021000 	.word	0x40021000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3e:	f000 f971 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <I2C1_EV_IRQHandler+0x10>)
 8000c4e:	f000 ff11 	bl	8001a74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000090 	.word	0x20000090

08000c5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <I2C1_ER_IRQHandler+0x10>)
 8000c62:	f000 ff21 	bl	8001aa8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000090 	.word	0x20000090

08000c70 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <I2C2_EV_IRQHandler+0x10>)
 8000c76:	f000 fefd 	bl	8001a74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000e4 	.word	0x200000e4

08000c84 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <I2C2_ER_IRQHandler+0x10>)
 8000c8a:	f000 ff0d 	bl	8001aa8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000e4 	.word	0x200000e4

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <USART2_IRQHandler+0x10>)
 8000c9e:	f004 f861 	bl	8004d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000138 	.word	0x20000138

08000cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
  }

  return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fc4b 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
  }
  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
  return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f005 f97e 	bl	80060b8 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20018000 	.word	0x20018000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200001d0 	.word	0x200001d0
 8000df0:	20000328 	.word	0x20000328

08000df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f005 f93d 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4a:	f7ff fbdd 	bl	8000608 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e5c:	08006d1c 	.word	0x08006d1c
  ldr r2, =_sbss
 8000e60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e64:	20000324 	.word	0x20000324

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_Init+0x3c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_Init+0x3c>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f000 f962 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f80f 	bl	8000eac <HAL_InitTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	e001      	b.n	8000e9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e9a:	f7ff fd5b 	bl	8000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_InitTick+0x6c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d023      	beq.n	8000f08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_InitTick+0x70>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_InitTick+0x6c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f96d 	bl	80011b6 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10f      	bne.n	8000f02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d809      	bhi.n	8000efc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f937 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_InitTick+0x74>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e007      	b.n	8000f0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e004      	b.n	8000f0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e001      	b.n	8000f0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000014 	.word	0x20000014
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000010 	.word	0x20000010

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000014 	.word	0x20000014
 8000f48:	200001d4 	.word	0x200001d4

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	200001d4 	.word	0x200001d4

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000014 	.word	0x20000014

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d008      	beq.n	80011f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2204      	movs	r2, #4
 80011ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e022      	b.n	800123e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 020e 	bic.w	r2, r2, #14
 8001206:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121c:	f003 021c 	and.w	r2, r3, #28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	2101      	movs	r1, #1
 8001226:	fa01 f202 	lsl.w	r2, r1, r2
 800122a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d005      	beq.n	800126e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2204      	movs	r2, #4
 8001266:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e029      	b.n	80012c2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 020e 	bic.w	r2, r2, #14
 800127c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f003 021c 	and.w	r2, r3, #28
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4798      	blx	r3
    }
  }
  return status;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e17f      	b.n	80015f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8171 	beq.w	80015f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d118      	bne.n	80013c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80ac 	beq.w	80015f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <HAL_GPIO_Init+0x330>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	4a5e      	ldr	r2, [pc, #376]	@ (8001618 <HAL_GPIO_Init+0x330>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001618 <HAL_GPIO_Init+0x330>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b2:	4a5a      	ldr	r2, [pc, #360]	@ (800161c <HAL_GPIO_Init+0x334>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x242>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001620 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x23e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x23a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001628 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x236>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	@ (800162c <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x232>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4b      	ldr	r2, [pc, #300]	@ (8001630 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4a      	ldr	r2, [pc, #296]	@ (8001634 <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x22a>
 800150e:	2306      	movs	r3, #6
 8001510:	e00c      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001512:	2307      	movs	r3, #7
 8001514:	e00a      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x244>
 800151a:	2304      	movs	r3, #4
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x244>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x244>
 800152a:	2300      	movs	r3, #0
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800153c:	4937      	ldr	r1, [pc, #220]	@ (800161c <HAL_GPIO_Init+0x334>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_GPIO_Init+0x350>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800156e:	4a32      	ldr	r2, [pc, #200]	@ (8001638 <HAL_GPIO_Init+0x350>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001574:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <HAL_GPIO_Init+0x350>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001598:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <HAL_GPIO_Init+0x350>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <HAL_GPIO_Init+0x350>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f47f ae78 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48000c00 	.word	0x48000c00
 800162c:	48001000 	.word	0x48001000
 8001630:	48001400 	.word	0x48001400
 8001634:	48001800 	.word	0x48001800
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001658:	e002      	b.n	8001660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e08d      	b.n	800179a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff f982 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	@ 0x24
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e006      	b.n	80016f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d108      	bne.n	800170e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	e007      	b.n	800171e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800172c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69d9      	ldr	r1, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	461a      	mov	r2, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	817b      	strh	r3, [r7, #10]
 80017b4:	4613      	mov	r3, r2
 80017b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	f040 80fd 	bne.w	80019c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_I2C_Master_Transmit+0x30>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e0f6      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x21e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017dc:	f7ff fbb6 	bl	8000f4c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2319      	movs	r3, #25
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f001 fb51 	bl	8002e96 <I2C_WaitOnFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0e1      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2221      	movs	r2, #33	@ 0x21
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2210      	movs	r2, #16
 800180a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	893a      	ldrh	r2, [r7, #8]
 800181e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	2bff      	cmp	r3, #255	@ 0xff
 800182e:	d906      	bls.n	800183e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	22ff      	movs	r2, #255	@ 0xff
 8001834:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001836:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e007      	b.n	800184e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800184c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	8979      	ldrh	r1, [r7, #10]
 8001892:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <HAL_I2C_Master_Transmit+0x228>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f001 fcbf 	bl	800321c <I2C_TransferConfig>
 800189e:	e066      	b.n	800196e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	8979      	ldrh	r1, [r7, #10]
 80018a8:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <HAL_I2C_Master_Transmit+0x228>)
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f001 fcb4 	bl	800321c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018b4:	e05b      	b.n	800196e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	6a39      	ldr	r1, [r7, #32]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f001 fb44 	bl	8002f48 <I2C_WaitOnTXISFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07b      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d034      	beq.n	800196e <HAL_I2C_Master_Transmit+0x1ca>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001908:	2b00      	cmp	r3, #0
 800190a:	d130      	bne.n	800196e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f001 fabd 	bl	8002e96 <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e04d      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	2bff      	cmp	r3, #255	@ 0xff
 800192e:	d90e      	bls.n	800194e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	22ff      	movs	r2, #255	@ 0xff
 8001934:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193a:	b2da      	uxtb	r2, r3
 800193c:	8979      	ldrh	r1, [r7, #10]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f001 fc68 	bl	800321c <I2C_TransferConfig>
 800194c:	e00f      	b.n	800196e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195c:	b2da      	uxtb	r2, r3
 800195e:	8979      	ldrh	r1, [r7, #10]
 8001960:	2300      	movs	r3, #0
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f001 fc57 	bl	800321c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d19e      	bne.n	80018b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f001 fb2a 	bl	8002fd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e01a      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2220      	movs	r2, #32
 8001992:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_I2C_Master_Transmit+0x22c>)
 80019a0:	400b      	ands	r3, r1
 80019a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	e000      	b.n	80019c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019c0:	2302      	movs	r3, #2
  }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	80002000 	.word	0x80002000
 80019d0:	fe00e800 	.word	0xfe00e800

080019d4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d139      	bne.n	8001a62 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2C_Slave_Receive_IT+0x28>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e033      	b.n	8001a64 <HAL_I2C_Slave_Receive_IT+0x90>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2222      	movs	r2, #34	@ 0x22
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a28:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_I2C_Slave_Receive_IT+0x98>)
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001a54:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f001 fc11 	bl	8003280 <I2C_Enable_IRQ>

    return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001a62:	2302      	movs	r3, #2
  }
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	ffff0000 	.word	0xffff0000
 8001a70:	08001c27 	.word	0x08001c27

08001a74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	09db      	lsrs	r3, r3, #7
 8001ad0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	0a9b      	lsrs	r3, r3, #10
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d010      	beq.n	8001b1c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	09db      	lsrs	r3, r3, #7
 8001afe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00a      	beq.n	8001b1c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f043 0208 	orr.w	r2, r3, #8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	0a5b      	lsrs	r3, r3, #9
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	09db      	lsrs	r3, r3, #7
 8001b2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00a      	beq.n	8001b4a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	f043 0202 	orr.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b48:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 030b 	and.w	r3, r3, #11
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f001 f841 	bl	8002be4 <I2C_ITError>
  }
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70fb      	strb	r3, [r7, #3]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <I2C_Slave_ISR_IT+0x24>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e0ed      	b.n	8001e26 <I2C_Slave_ISR_IT+0x200>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001c6a:	6939      	ldr	r1, [r7, #16]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fdf9 	bl	8002864 <I2C_ITSlaveCplt>
 8001c72:	e0d3      	b.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d04d      	beq.n	8001d1c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d047      	beq.n	8001d1c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d128      	bne.n	8001ce8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b28      	cmp	r3, #40	@ 0x28
 8001ca0:	d108      	bne.n	8001cb4 <I2C_Slave_ISR_IT+0x8e>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ca8:	d104      	bne.n	8001cb4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001caa:	6939      	ldr	r1, [r7, #16]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 ff43 	bl	8002b38 <I2C_ITListenCplt>
 8001cb2:	e032      	b.n	8001d1a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b29      	cmp	r3, #41	@ 0x29
 8001cbe:	d10e      	bne.n	8001cde <I2C_Slave_ISR_IT+0xb8>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cc6:	d00a      	beq.n	8001cde <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f001 f89e 	bl	8002e12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fc9c 	bl	8002614 <I2C_ITSlaveSeqCplt>
 8001cdc:	e01d      	b.n	8001d1a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ce6:	e096      	b.n	8001e16 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2210      	movs	r2, #16
 8001cee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <I2C_Slave_ISR_IT+0xe6>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d08:	f040 8085 	bne.w	8001e16 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	4619      	mov	r1, r3
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 ff66 	bl	8002be4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d18:	e07d      	b.n	8001e16 <I2C_Slave_ISR_IT+0x1f0>
 8001d1a:	e07c      	b.n	8001e16 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d030      	beq.n	8001d8a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d02a      	beq.n	8001d8a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d018      	beq.n	8001d70 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d14f      	bne.n	8001e1a <I2C_Slave_ISR_IT+0x1f4>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d80:	d04b      	beq.n	8001e1a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fc46 	bl	8002614 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001d88:	e047      	b.n	8001e1a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	08db      	lsrs	r3, r3, #3
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001da2:	6939      	ldr	r1, [r7, #16]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fb74 	bl	8002492 <I2C_ITAddrCplt>
 8001daa:	e037      	b.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d031      	beq.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02b      	beq.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d018      	beq.n	8001e00 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001dfe:	e00d      	b.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e06:	d002      	beq.n	8001e0e <I2C_Slave_ISR_IT+0x1e8>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fc00 	bl	8002614 <I2C_ITSlaveSeqCplt>
 8001e14:	e002      	b.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001e16:	bf00      	nop
 8001e18:	e000      	b.n	8001e1c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001e1a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b088      	sub	sp, #32
 8001e32:	af02      	add	r7, sp, #8
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <I2C_Master_ISR_DMA+0x1a>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e0f0      	b.n	800202a <I2C_Master_ISR_DMA+0x1fc>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d017      	beq.n	8001e8c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d011      	beq.n	8001e8c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e74:	f043 0204 	orr.w	r2, r3, #4
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f001 f9fe 	bl	8003280 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 ffc4 	bl	8002e12 <I2C_Flush_TXDR>
 8001e8a:	e0c9      	b.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	09db      	lsrs	r3, r3, #7
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8081 	beq.w	8001f9c <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d07a      	beq.n	8001f9c <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eb4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d05c      	beq.n	8001f7a <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ecc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2bff      	cmp	r3, #255	@ 0xff
 8001ed6:	d914      	bls.n	8001f02 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d103      	bne.n	8001ef4 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001ef2:	e002      	b.n	8001efa <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	22ff      	movs	r2, #255	@ 0xff
 8001ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001efa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e010      	b.n	8001f24 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f14:	d003      	beq.n	8001f1e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e002      	b.n	8001f24 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f22:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	8a79      	ldrh	r1, [r7, #18]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f001 f972 	bl	800321c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b22      	cmp	r3, #34	@ 0x22
 8001f54:	d108      	bne.n	8001f68 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001f66:	e05b      	b.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001f78:	e052      	b.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f88:	d003      	beq.n	8001f92 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fb05 	bl	800259a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001f90:	e046      	b.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001f92:	2140      	movs	r1, #64	@ 0x40
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fe25 	bl	8002be4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001f9a:	e041      	b.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d029      	beq.n	8001ffc <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d119      	bne.n	8001ff2 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fcc:	d027      	beq.n	800201e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fd6:	d108      	bne.n	8001fea <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fe6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001fe8:	e019      	b.n	800201e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fad5 	bl	800259a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001ff0:	e015      	b.n	800201e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ff2:	2140      	movs	r1, #64	@ 0x40
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fdf5 	bl	8002be4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ffa:	e010      	b.n	800201e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fb5a 	bl	80026d0 <I2C_ITMasterCplt>
 800201c:	e000      	b.n	8002020 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800201e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002040:	4b94      	ldr	r3, [pc, #592]	@ (8002294 <I2C_Mem_ISR_DMA+0x260>)
 8002042:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <I2C_Mem_ISR_DMA+0x1e>
 800204e:	2302      	movs	r3, #2
 8002050:	e139      	b.n	80022c6 <I2C_Mem_ISR_DMA+0x292>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800206e:	2b00      	cmp	r3, #0
 8002070:	d011      	beq.n	8002096 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2210      	movs	r2, #16
 8002078:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f043 0204 	orr.w	r2, r3, #4
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002086:	2120      	movs	r1, #32
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f001 f8f9 	bl	8003280 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 febf 	bl	8002e12 <I2C_Flush_TXDR>
 8002094:	e112      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00f      	beq.n	80020c2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	651a      	str	r2, [r3, #80]	@ 0x50
 80020c0:	e0fc      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	09db      	lsrs	r3, r3, #7
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06e      	beq.n	80021ac <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d068      	beq.n	80021ac <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020da:	2101      	movs	r1, #1
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f001 f953 	bl	8003388 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80020e2:	2110      	movs	r1, #16
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f001 f8cb 	bl	8003280 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d056      	beq.n	80021a2 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2bff      	cmp	r3, #255	@ 0xff
 80020fc:	d91e      	bls.n	800213c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d103      	bne.n	800211a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002118:	e002      	b.n	8002120 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	22ff      	movs	r2, #255	@ 0xff
 800211e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002124:	b299      	uxth	r1, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212a:	b2da      	uxtb	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f001 f871 	bl	800321c <I2C_TransferConfig>
 800213a:	e011      	b.n	8002160 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	b299      	uxth	r1, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002150:	b2da      	uxtb	r2, r3
 8002152:	2300      	movs	r3, #0
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f001 f85e 	bl	800321c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b22      	cmp	r3, #34	@ 0x22
 800217c:	d108      	bne.n	8002190 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800218c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800218e:	e095      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800219e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80021a0:	e08c      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80021a2:	2140      	movs	r1, #64	@ 0x40
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fd1d 	bl	8002be4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80021aa:	e087      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d071      	beq.n	800229c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	099b      	lsrs	r3, r3, #6
 80021bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d06b      	beq.n	800229c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021c4:	2101      	movs	r1, #1
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 f8de 	bl	8003388 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80021cc:	2110      	movs	r1, #16
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f001 f856 	bl	8003280 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b22      	cmp	r3, #34	@ 0x22
 80021de:	d101      	bne.n	80021e4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 80021e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <I2C_Mem_ISR_DMA+0x264>)
 80021e2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d91e      	bls.n	800222c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d103      	bne.n	800220a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002208:	e002      	b.n	8002210 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	22ff      	movs	r2, #255	@ 0xff
 800220e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	b299      	uxth	r1, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221a:	b2da      	uxtb	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fff9 	bl	800321c <I2C_TransferConfig>
 800222a:	e011      	b.n	8002250 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	b299      	uxth	r1, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002240:	b2da      	uxtb	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 ffe6 	bl	800321c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b22      	cmp	r3, #34	@ 0x22
 800226c:	d108      	bne.n	8002280 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800227c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800227e:	e01d      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800228e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002290:	e014      	b.n	80022bc <I2C_Mem_ISR_DMA+0x288>
 8002292:	bf00      	nop
 8002294:	80002000 	.word	0x80002000
 8002298:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa0a 	bl	80026d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop

080022d0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <I2C_Slave_ISR_DMA+0x24>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0ca      	b.n	800248a <I2C_Slave_ISR_DMA+0x1ba>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 faa4 	bl	8002864 <I2C_ITSlaveCplt>
 800231c:	e0b0      	b.n	8002480 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 809a 	beq.w	8002460 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8093 	beq.w	8002460 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0b9b      	lsrs	r3, r3, #14
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0bdb      	lsrs	r3, r3, #15
 800234a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07f      	beq.n	8002452 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0bdb      	lsrs	r3, r3, #15
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8002372:	2301      	movs	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0b9b      	lsrs	r3, r3, #14
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8002396:	2301      	movs	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d128      	bne.n	80023f2 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b28      	cmp	r3, #40	@ 0x28
 80023aa:	d108      	bne.n	80023be <I2C_Slave_ISR_DMA+0xee>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b2:	d104      	bne.n	80023be <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fbbe 	bl	8002b38 <I2C_ITListenCplt>
 80023bc:	e048      	b.n	8002450 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b29      	cmp	r3, #41	@ 0x29
 80023c8:	d10e      	bne.n	80023e8 <I2C_Slave_ISR_DMA+0x118>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023d0:	d00a      	beq.n	80023e8 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fd19 	bl	8002e12 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f917 	bl	8002614 <I2C_ITSlaveSeqCplt>
 80023e6:	e033      	b.n	8002450 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80023f0:	e034      	b.n	800245c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2210      	movs	r2, #16
 80023f8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800240c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <I2C_Slave_ISR_DMA+0x14c>
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241a:	d11f      	bne.n	800245c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b21      	cmp	r3, #33	@ 0x21
 8002420:	d002      	beq.n	8002428 <I2C_Slave_ISR_DMA+0x158>
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	2b29      	cmp	r3, #41	@ 0x29
 8002426:	d103      	bne.n	8002430 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2221      	movs	r2, #33	@ 0x21
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
 800242e:	e008      	b.n	8002442 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b22      	cmp	r3, #34	@ 0x22
 8002434:	d002      	beq.n	800243c <I2C_Slave_ISR_DMA+0x16c>
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	2b2a      	cmp	r3, #42	@ 0x2a
 800243a:	d102      	bne.n	8002442 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2222      	movs	r2, #34	@ 0x22
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4619      	mov	r1, r3
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fbcb 	bl	8002be4 <I2C_ITError>
      if (treatdmanack == 1U)
 800244e:	e005      	b.n	800245c <I2C_Slave_ISR_DMA+0x18c>
 8002450:	e004      	b.n	800245c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2210      	movs	r2, #16
 8002458:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800245a:	e011      	b.n	8002480 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800245c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800245e:	e00f      	b.n	8002480 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	08db      	lsrs	r3, r3, #3
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d009      	beq.n	8002480 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f809 	bl	8002492 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024a8:	2b28      	cmp	r3, #40	@ 0x28
 80024aa:	d16a      	bne.n	8002582 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80024ca:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80024e6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d138      	bne.n	8002562 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80024f0:	897b      	ldrh	r3, [r7, #10]
 80024f2:	09db      	lsrs	r3, r3, #7
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	89bb      	ldrh	r3, [r7, #12]
 80024f8:	4053      	eors	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f003 0306 	and.w	r3, r3, #6
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11c      	bne.n	800253e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002504:	897b      	ldrh	r3, [r7, #10]
 8002506:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002516:	2b02      	cmp	r3, #2
 8002518:	d13b      	bne.n	8002592 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002530:	89ba      	ldrh	r2, [r7, #12]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fb35 	bl	8001ba6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800253c:	e029      	b.n	8002592 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800253e:	893b      	ldrh	r3, [r7, #8]
 8002540:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002542:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 ff1e 	bl	8003388 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002554:	89ba      	ldrh	r2, [r7, #12]
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fb23 	bl	8001ba6 <HAL_I2C_AddrCallback>
}
 8002560:	e017      	b.n	8002592 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 ff0e 	bl	8003388 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002574:	89ba      	ldrh	r2, [r7, #12]
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff fb13 	bl	8001ba6 <HAL_I2C_AddrCallback>
}
 8002580:	e007      	b.n	8002592 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2208      	movs	r2, #8
 8002588:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b21      	cmp	r3, #33	@ 0x21
 80025b4:	d115      	bne.n	80025e2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2211      	movs	r2, #17
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025ca:	2101      	movs	r1, #1
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fedb 	bl	8003388 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fac5 	bl	8001b6a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025e0:	e014      	b.n	800260c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2212      	movs	r2, #18
 80025ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025f6:	2102      	movs	r1, #2
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fec5 	bl	8003388 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fab9 	bl	8001b7e <HAL_I2C_MasterRxCpltCallback>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	0b9b      	lsrs	r3, r3, #14
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e00d      	b.n	8002666 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0bdb      	lsrs	r3, r3, #15
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002664:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b29      	cmp	r3, #41	@ 0x29
 8002670:	d112      	bne.n	8002698 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2228      	movs	r2, #40	@ 0x28
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2221      	movs	r2, #33	@ 0x21
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002680:	2101      	movs	r1, #1
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fe80 	bl	8003388 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fa7e 	bl	8001b92 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002696:	e017      	b.n	80026c8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80026a2:	d111      	bne.n	80026c8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2228      	movs	r2, #40	@ 0x28
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2222      	movs	r2, #34	@ 0x22
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026b2:	2102      	movs	r1, #2
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fe67 	bl	8003388 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fd ff7c 	bl	80005c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2220      	movs	r2, #32
 80026e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b21      	cmp	r3, #33	@ 0x21
 80026f0:	d107      	bne.n	8002702 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026f2:	2101      	movs	r1, #1
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fe47 	bl	8003388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2211      	movs	r2, #17
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002700:	e00c      	b.n	800271c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b22      	cmp	r3, #34	@ 0x22
 800270c:	d106      	bne.n	800271c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800270e:	2102      	movs	r1, #2
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fe39 	bl	8003388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2212      	movs	r2, #18
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <I2C_ITMasterCplt+0x18c>)
 8002728:	400b      	ands	r3, r1
 800272a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4a      	ldr	r2, [pc, #296]	@ (8002860 <I2C_ITMasterCplt+0x190>)
 8002736:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2210      	movs	r2, #16
 800274a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b60      	cmp	r3, #96	@ 0x60
 8002762:	d10b      	bne.n	800277c <I2C_ITMasterCplt+0xac>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	b2db      	uxtb	r3, r3
 8002778:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800277a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fb48 	bl	8002e12 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b60      	cmp	r3, #96	@ 0x60
 8002792:	d002      	beq.n	800279a <I2C_ITMasterCplt+0xca>
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa1f 	bl	8002be4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027a6:	e054      	b.n	8002852 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b21      	cmp	r3, #33	@ 0x21
 80027b2:	d124      	bne.n	80027fe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b40      	cmp	r3, #64	@ 0x40
 80027cc:	d10b      	bne.n	80027e6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff f9f9 	bl	8001bd6 <HAL_I2C_MemTxCpltCallback>
}
 80027e4:	e035      	b.n	8002852 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff f9b7 	bl	8001b6a <HAL_I2C_MasterTxCpltCallback>
}
 80027fc:	e029      	b.n	8002852 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b22      	cmp	r3, #34	@ 0x22
 8002808:	d123      	bne.n	8002852 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d10b      	bne.n	800283c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff f9d8 	bl	8001bea <HAL_I2C_MemRxCpltCallback>
}
 800283a:	e00a      	b.n	8002852 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff f996 	bl	8001b7e <HAL_I2C_MasterRxCpltCallback>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	fe00e800 	.word	0xfe00e800
 8002860:	ffff0000 	.word	0xffff0000

08002864 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002886:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2220      	movs	r2, #32
 800288e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	2b21      	cmp	r3, #33	@ 0x21
 8002894:	d002      	beq.n	800289c <I2C_ITSlaveCplt+0x38>
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	2b29      	cmp	r3, #41	@ 0x29
 800289a:	d108      	bne.n	80028ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800289c:	f248 0101 	movw	r1, #32769	@ 0x8001
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fd71 	bl	8003388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2221      	movs	r2, #33	@ 0x21
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ac:	e019      	b.n	80028e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	2b22      	cmp	r3, #34	@ 0x22
 80028b2:	d002      	beq.n	80028ba <I2C_ITSlaveCplt+0x56>
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80028b8:	d108      	bne.n	80028cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80028ba:	f248 0102 	movw	r1, #32770	@ 0x8002
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fd62 	bl	8003388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2222      	movs	r2, #34	@ 0x22
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ca:	e00a      	b.n	80028e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	2b28      	cmp	r3, #40	@ 0x28
 80028d0:	d107      	bne.n	80028e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80028d2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fd56 	bl	8003388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <I2C_ITSlaveCplt+0x2cc>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa85 	bl	8002e12 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	0b9b      	lsrs	r3, r3, #14
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002922:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	b29a      	uxth	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800293a:	e018      	b.n	800296e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	0bdb      	lsrs	r3, r3, #15
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002956:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	b29a      	uxth	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d020      	beq.n	80029bc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04a      	beq.n	8002a74 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d044      	beq.n	8002a74 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d128      	bne.n	8002a46 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b28      	cmp	r3, #40	@ 0x28
 80029fe:	d108      	bne.n	8002a12 <I2C_ITSlaveCplt+0x1ae>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a06:	d104      	bne.n	8002a12 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f894 	bl	8002b38 <I2C_ITListenCplt>
 8002a10:	e030      	b.n	8002a74 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b29      	cmp	r3, #41	@ 0x29
 8002a1c:	d10e      	bne.n	8002a3c <I2C_ITSlaveCplt+0x1d8>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a24:	d00a      	beq.n	8002a3c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9ef 	bl	8002e12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fded 	bl	8002614 <I2C_ITSlaveSeqCplt>
 8002a3a:	e01b      	b.n	8002a74 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2210      	movs	r2, #16
 8002a42:	61da      	str	r2, [r3, #28]
 8002a44:	e016      	b.n	8002a74 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <I2C_ITSlaveCplt+0x204>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a66:	d105      	bne.n	8002a74 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8b8 	bl	8002be4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8a7 	bl	8002be4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b28      	cmp	r3, #40	@ 0x28
 8002aa0:	d141      	bne.n	8002b26 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002aa2:	6979      	ldr	r1, [r7, #20]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f847 	bl	8002b38 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002aaa:	e03c      	b.n	8002b26 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ab4:	d014      	beq.n	8002ae0 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fdac 	bl	8002614 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <I2C_ITSlaveCplt+0x2d0>)
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff f872 	bl	8001bc2 <HAL_I2C_ListenCpltCallback>
}
 8002ade:	e022      	b.n	8002b26 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b22      	cmp	r3, #34	@ 0x22
 8002aea:	d10e      	bne.n	8002b0a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fd fd5c 	bl	80005c0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b08:	e00d      	b.n	8002b26 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff f836 	bl	8001b92 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	fe00e800 	.word	0xfe00e800
 8002b34:	ffff0000 	.word	0xffff0000

08002b38 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a26      	ldr	r2, [pc, #152]	@ (8002be0 <I2C_ITListenCplt+0xa8>)
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d022      	beq.n	8002bb6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d012      	beq.n	8002bb6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bb6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fbe4 	bl	8003388 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe fff6 	bl	8001bc2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	ffff0000 	.word	0xffff0000

08002be4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a6d      	ldr	r2, [pc, #436]	@ (8002db8 <I2C_ITError+0x1d4>)
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b28      	cmp	r3, #40	@ 0x28
 8002c1a:	d005      	beq.n	8002c28 <I2C_ITError+0x44>
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b29      	cmp	r3, #41	@ 0x29
 8002c20:	d002      	beq.n	8002c28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c26:	d10b      	bne.n	8002c40 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c28:	2103      	movs	r1, #3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fbac 	bl	8003388 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2228      	movs	r2, #40	@ 0x28
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a60      	ldr	r2, [pc, #384]	@ (8002dbc <I2C_ITError+0x1d8>)
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c3e:	e030      	b.n	8002ca2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c40:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fb9f 	bl	8003388 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8e1 	bl	8002e12 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b60      	cmp	r3, #96	@ 0x60
 8002c5a:	d01f      	beq.n	8002c9c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d114      	bne.n	8002c9c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d109      	bne.n	8002c94 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2210      	movs	r2, #16
 8002c86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8c:	f043 0204 	orr.w	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d039      	beq.n	8002d24 <I2C_ITError+0x140>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b11      	cmp	r3, #17
 8002cb4:	d002      	beq.n	8002cbc <I2C_ITError+0xd8>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b21      	cmp	r3, #33	@ 0x21
 8002cba:	d133      	bne.n	8002d24 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cca:	d107      	bne.n	8002cdc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe faf3 	bl	80012cc <HAL_DMA_GetState>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d017      	beq.n	8002d1c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <I2C_ITError+0x1dc>)
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe faa2 	bl	800124a <HAL_DMA_Abort_IT>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d04d      	beq.n	8002da8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d16:	4610      	mov	r0, r2
 8002d18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d1a:	e045      	b.n	8002da8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f851 	bl	8002dc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d22:	e041      	b.n	8002da8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d039      	beq.n	8002da0 <I2C_ITError+0x1bc>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b12      	cmp	r3, #18
 8002d30:	d002      	beq.n	8002d38 <I2C_ITError+0x154>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b22      	cmp	r3, #34	@ 0x22
 8002d36:	d133      	bne.n	8002da0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d46:	d107      	bne.n	8002d58 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fab5 	bl	80012cc <HAL_DMA_GetState>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d017      	beq.n	8002d98 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	4a14      	ldr	r2, [pc, #80]	@ (8002dc0 <I2C_ITError+0x1dc>)
 8002d6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fa64 	bl	800124a <HAL_DMA_Abort_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d011      	beq.n	8002dac <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d92:	4610      	mov	r0, r2
 8002d94:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d96:	e009      	b.n	8002dac <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f813 	bl	8002dc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d9e:	e005      	b.n	8002dac <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f80f 	bl	8002dc4 <I2C_TreatErrorCallback>
  }
}
 8002da6:	e002      	b.n	8002dae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dac:	bf00      	nop
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	ffff0000 	.word	0xffff0000
 8002dbc:	08001c27 	.word	0x08001c27
 8002dc0:	08002e5b 	.word	0x08002e5b

08002dc4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b60      	cmp	r3, #96	@ 0x60
 8002dd6:	d10e      	bne.n	8002df6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe ff0f 	bl	8001c12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002df4:	e009      	b.n	8002e0a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fe fefa 	bl	8001bfe <HAL_I2C_ErrorCallback>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d103      	bne.n	8002e30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d007      	beq.n	8002e4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	619a      	str	r2, [r3, #24]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	2200      	movs	r2, #0
 8002e86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff ff9b 	bl	8002dc4 <I2C_TreatErrorCallback>
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea6:	e03b      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f8d5 	bl	800305c <I2C_IsErrorOccurred>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e041      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d02d      	beq.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	f7fe f842 	bl	8000f4c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d302      	bcc.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d122      	bne.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d113      	bne.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e00f      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d0b4      	beq.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f54:	e033      	b.n	8002fbe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f87e 	bl	800305c <I2C_IsErrorOccurred>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e031      	b.n	8002fce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d025      	beq.n	8002fbe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fd ffeb 	bl	8000f4c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d11a      	bne.n	8002fbe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d013      	beq.n	8002fbe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e007      	b.n	8002fce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d1c4      	bne.n	8002f56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe2:	e02f      	b.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f837 	bl	800305c <I2C_IsErrorOccurred>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e02d      	b.n	8003054 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff8:	f7fd ffa8 	bl	8000f4c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11a      	bne.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d013      	beq.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e007      	b.n	8003054 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d1c8      	bne.n	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d068      	beq.n	800315a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003090:	e049      	b.n	8003126 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d045      	beq.n	8003126 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fd ff57 	bl	8000f4c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_IsErrorOccurred+0x54>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13a      	bne.n	8003126 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d2:	d121      	bne.n	8003118 <I2C_IsErrorOccurred+0xbc>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030da:	d01d      	beq.n	8003118 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d01a      	beq.n	8003118 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030f2:	f7fd ff2b 	bl	8000f4c <HAL_GetTick>
 80030f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f8:	e00e      	b.n	8003118 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030fa:	f7fd ff27 	bl	8000f4c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b19      	cmp	r3, #25
 8003106:	d907      	bls.n	8003118 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003116:	e006      	b.n	8003126 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d1e9      	bne.n	80030fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d003      	beq.n	800313c <I2C_IsErrorOccurred+0xe0>
 8003134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0aa      	beq.n	8003092 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800313c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2220      	movs	r2, #32
 800314a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800317c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800319e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fe1e 	bl	8002e12 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <I2C_IsErrorOccurred+0x1bc>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800320a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800320e:	4618      	mov	r0, r3
 8003210:	3728      	adds	r7, #40	@ 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	4613      	mov	r3, r2
 800322c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003234:	7a7b      	ldrb	r3, [r7, #9]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800323c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	4313      	orrs	r3, r2
 8003246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	0d5b      	lsrs	r3, r3, #21
 8003256:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <I2C_TransferConfig+0x60>)
 800325c:	430b      	orrs	r3, r1
 800325e:	43db      	mvns	r3, r3
 8003260:	ea02 0103 	and.w	r1, r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	03ff63ff 	.word	0x03ff63ff

08003280 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003294:	4a39      	ldr	r2, [pc, #228]	@ (800337c <I2C_Enable_IRQ+0xfc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d032      	beq.n	8003300 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800329e:	4a38      	ldr	r2, [pc, #224]	@ (8003380 <I2C_Enable_IRQ+0x100>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d02d      	beq.n	8003300 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80032a8:	4a36      	ldr	r2, [pc, #216]	@ (8003384 <I2C_Enable_IRQ+0x104>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d028      	beq.n	8003300 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da03      	bge.n	80032be <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80032bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80032ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80032e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d103      	bne.n	80032f0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80032ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d133      	bne.n	800335e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f043 0320 	orr.w	r3, r3, #32
 80032fc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032fe:	e02e      	b.n	800335e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da03      	bge.n	8003310 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800330e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003320:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003332:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d103      	bne.n	8003342 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003340:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003342:	887b      	ldrh	r3, [r7, #2]
 8003344:	2b20      	cmp	r3, #32
 8003346:	d103      	bne.n	8003350 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800334e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	2b40      	cmp	r3, #64	@ 0x40
 8003354:	d103      	bne.n	800335e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800335c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	08001e2f 	.word	0x08001e2f
 8003380:	080022d1 	.word	0x080022d1
 8003384:	08002035 	.word	0x08002035

08003388 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00f      	beq.n	80033c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80033a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033b6:	2b28      	cmp	r3, #40	@ 0x28
 80033b8:	d003      	beq.n	80033c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80033c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80033d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033e0:	2b28      	cmp	r3, #40	@ 0x28
 80033e2:	d003      	beq.n	80033ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80033ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80033ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da03      	bge.n	80033fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d103      	bne.n	800340a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003408:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	2b20      	cmp	r3, #32
 800340e:	d103      	bne.n	8003418 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f043 0320 	orr.w	r3, r3, #32
 8003416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	2b40      	cmp	r3, #64	@ 0x40
 800341c:	d103      	bne.n	8003426 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003424:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43da      	mvns	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	400a      	ands	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d138      	bne.n	80034cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003464:	2302      	movs	r3, #2
 8003466:	e032      	b.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	@ 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d139      	bne.n	8003564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e033      	b.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2224      	movs	r2, #36	@ 0x24
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800352c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003578:	4b04      	ldr	r3, [pc, #16]	@ (800358c <HAL_PWREx_GetVoltageRange+0x18>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40007000 	.word	0x40007000

08003590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359e:	d130      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a0:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ac:	d038      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2232      	movs	r2, #50	@ 0x32
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0c9b      	lsrs	r3, r3, #18
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d4:	e002      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e8:	d102      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f2      	bne.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fc:	d110      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360e:	d007      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003618:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800361e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40007000 	.word	0x40007000
 8003634:	2000000c 	.word	0x2000000c
 8003638:	431bde83 	.word	0x431bde83

0800363c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e3ca      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364e:	4b97      	ldr	r3, [pc, #604]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003658:	4b94      	ldr	r3, [pc, #592]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80e4 	beq.w	8003838 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_RCC_OscConfig+0x4a>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	f040 808b 	bne.w	8003794 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 8087 	bne.w	8003794 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003686:	4b89      	ldr	r3, [pc, #548]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e3a2      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	4b82      	ldr	r3, [pc, #520]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_RCC_OscConfig+0x7c>
 80036ae:	4b7f      	ldr	r3, [pc, #508]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_OscConfig+0x88>
 80036b8:	4b7c      	ldr	r3, [pc, #496]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d223      	bcs.n	8003710 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd55 	bl	800417c <RCC_SetFlashLatencyFromMSIRange>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e383      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036dc:	4b73      	ldr	r3, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a72      	ldr	r2, [pc, #456]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036e2:	f043 0308 	orr.w	r3, r3, #8
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b70      	ldr	r3, [pc, #448]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	496d      	ldr	r1, [pc, #436]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fa:	4b6c      	ldr	r3, [pc, #432]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	4968      	ldr	r1, [pc, #416]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
 800370e:	e025      	b.n	800375c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003710:	4b66      	ldr	r3, [pc, #408]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a65      	ldr	r2, [pc, #404]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4960      	ldr	r1, [pc, #384]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372e:	4b5f      	ldr	r3, [pc, #380]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	495b      	ldr	r1, [pc, #364]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fd15 	bl	800417c <RCC_SetFlashLatencyFromMSIRange>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e343      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800375c:	f000 fc4a 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	4950      	ldr	r1, [pc, #320]	@ (80038b0 <HAL_RCC_OscConfig+0x274>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	4a4e      	ldr	r2, [pc, #312]	@ (80038b4 <HAL_RCC_OscConfig+0x278>)
 800377a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800377c:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd fb93 	bl	8000eac <HAL_InitTick>
 8003786:	4603      	mov	r3, r0
 8003788:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d052      	beq.n	8003836 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	e327      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d032      	beq.n	8003802 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800379c:	4b43      	ldr	r3, [pc, #268]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a42      	ldr	r2, [pc, #264]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a8:	f7fd fbd0 	bl	8000f4c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037b0:	f7fd fbcc 	bl	8000f4c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e310      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c2:	4b3a      	ldr	r3, [pc, #232]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ce:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a36      	ldr	r2, [pc, #216]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b34      	ldr	r3, [pc, #208]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4931      	ldr	r1, [pc, #196]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ec:	4b2f      	ldr	r3, [pc, #188]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	492c      	ldr	r1, [pc, #176]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
 8003800:	e01a      	b.n	8003838 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003802:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a29      	ldr	r2, [pc, #164]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800380e:	f7fd fb9d 	bl	8000f4c <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003816:	f7fd fb99 	bl	8000f4c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e2dd      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003828:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x1da>
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003836:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d074      	beq.n	800392e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x21a>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d10e      	bne.n	800386e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d064      	beq.n	800392c <HAL_RCC_OscConfig+0x2f0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d160      	bne.n	800392c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e2ba      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x24a>
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0b      	ldr	r2, [pc, #44]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e026      	b.n	80038d4 <HAL_RCC_OscConfig+0x298>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388e:	d115      	bne.n	80038bc <HAL_RCC_OscConfig+0x280>
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a02      	ldr	r2, [pc, #8]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x298>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08006c90 	.word	0x08006c90
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	20000010 	.word	0x20000010
 80038bc:	4ba0      	ldr	r3, [pc, #640]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b9d      	ldr	r3, [pc, #628]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a9c      	ldr	r2, [pc, #624]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fb36 	bl	8000f4c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd fb32 	bl	8000f4c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	@ 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e276      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f6:	4b92      	ldr	r3, [pc, #584]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x2a8>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd fb22 	bl	8000f4c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fd fb1e 	bl	8000f4c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e262      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391e:	4b88      	ldr	r3, [pc, #544]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x2d0>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d060      	beq.n	80039fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x310>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d119      	bne.n	800397a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d116      	bne.n	800397a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800394c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_OscConfig+0x328>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e23f      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b76      	ldr	r3, [pc, #472]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	4973      	ldr	r1, [pc, #460]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003978:	e040      	b.n	80039fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d023      	beq.n	80039ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003982:	4b6f      	ldr	r3, [pc, #444]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6e      	ldr	r2, [pc, #440]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fd fadd 	bl	8000f4c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003996:	f7fd fad9 	bl	8000f4c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e21d      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	4b65      	ldr	r3, [pc, #404]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b62      	ldr	r3, [pc, #392]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	495f      	ldr	r1, [pc, #380]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	e018      	b.n	80039fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fd fab9 	bl	8000f4c <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7fd fab5 	bl	8000f4c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1f9      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f0:	4b53      	ldr	r3, [pc, #332]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a10:	4b4b      	ldr	r3, [pc, #300]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a16:	4a4a      	ldr	r2, [pc, #296]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fa94 	bl	8000f4c <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fd fa90 	bl	8000f4c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1d4      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a3a:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <HAL_RCC_OscConfig+0x3ec>
 8003a48:	e01b      	b.n	8003a82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a50:	4a3b      	ldr	r2, [pc, #236]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fa77 	bl	8000f4c <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fd fa73 	bl	8000f4c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e1b7      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a74:	4b32      	ldr	r3, [pc, #200]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ef      	bne.n	8003a62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a6 	beq.w	8003bdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a94:	4b2a      	ldr	r3, [pc, #168]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b27      	ldr	r3, [pc, #156]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	4a26      	ldr	r2, [pc, #152]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aac:	4b24      	ldr	r3, [pc, #144]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	4b21      	ldr	r3, [pc, #132]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d118      	bne.n	8003afa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fa3a 	bl	8000f4c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fd fa36 	bl	8000f4c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e17a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aee:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d108      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4d8>
 8003b02:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b12:	e029      	b.n	8003b68 <HAL_RCC_OscConfig+0x52c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d115      	bne.n	8003b48 <HAL_RCC_OscConfig+0x50c>
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b22:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b2c:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b3c:	e014      	b.n	8003b68 <HAL_RCC_OscConfig+0x52c>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	4b9c      	ldr	r3, [pc, #624]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	4a9b      	ldr	r2, [pc, #620]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b58:	4b98      	ldr	r3, [pc, #608]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	4a97      	ldr	r2, [pc, #604]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd f9ec 	bl	8000f4c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd f9e8 	bl	8000f4c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e12a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ed      	beq.n	8003b78 <HAL_RCC_OscConfig+0x53c>
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd f9d5 	bl	8000f4c <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd f9d1 	bl	8000f4c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e113      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bbc:	4b7f      	ldr	r3, [pc, #508]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ed      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bca:	7ffb      	ldrb	r3, [r7, #31]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b7a      	ldr	r3, [pc, #488]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	4a79      	ldr	r2, [pc, #484]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80fe 	beq.w	8003de2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	f040 80d0 	bne.w	8003d90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bf0:	4b72      	ldr	r3, [pc, #456]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d130      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d127      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11f      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c30:	2a07      	cmp	r2, #7
 8003c32:	bf14      	ite	ne
 8003c34:	2201      	movne	r2, #1
 8003c36:	2200      	moveq	r2, #0
 8003c38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d06e      	beq.n	8003d44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d069      	beq.n	8003d40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c6c:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c78:	4b50      	ldr	r3, [pc, #320]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0ad      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c88:	4b4c      	ldr	r3, [pc, #304]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c94:	f7fd f95a 	bl	8000f4c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7fd f956 	bl	8000f4c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e09a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cba:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	4b40      	ldr	r3, [pc, #256]	@ (8003dc0 <HAL_RCC_OscConfig+0x784>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0112      	lsls	r2, r2, #4
 8003cce:	4311      	orrs	r1, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cd4:	0212      	lsls	r2, r2, #8
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cdc:	0852      	lsrs	r2, r2, #1
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0552      	lsls	r2, r2, #21
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0652      	lsls	r2, r2, #25
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cf4:	0912      	lsrs	r2, r2, #4
 8003cf6:	0452      	lsls	r2, r2, #17
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	4930      	ldr	r1, [pc, #192]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d00:	4b2e      	ldr	r3, [pc, #184]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d18:	f7fd f918 	bl	8000f4c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd f914 	bl	8000f4c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e058      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	4b22      	ldr	r3, [pc, #136]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3e:	e050      	b.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e04f      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d44:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d148      	bne.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d50:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d5c:	4b17      	ldr	r3, [pc, #92]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d68:	f7fd f8f0 	bl	8000f4c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd f8ec 	bl	8000f4c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e030      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x734>
 8003d8e:	e028      	b.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d023      	beq.n	8003dde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd f8d3 	bl	8000f4c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd f8cf 	bl	8000f4c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d905      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e013      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_OscConfig+0x7b0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ec      	bne.n	8003daa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_OscConfig+0x7b0>)
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	4905      	ldr	r1, [pc, #20]	@ (8003dec <HAL_RCC_OscConfig+0x7b0>)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <HAL_RCC_OscConfig+0x7b4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
 8003ddc:	e001      	b.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	feeefffc 	.word	0xfeeefffc

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0e7      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b75      	ldr	r3, [pc, #468]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b72      	ldr	r3, [pc, #456]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	4970      	ldr	r1, [pc, #448]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0cf      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d010      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4b66      	ldr	r3, [pc, #408]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d908      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b63      	ldr	r3, [pc, #396]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4960      	ldr	r1, [pc, #384]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04c      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d121      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0a6      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e92:	4b54      	ldr	r3, [pc, #336]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e09a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e08e      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eba:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e086      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b46      	ldr	r3, [pc, #280]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4943      	ldr	r1, [pc, #268]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd f836 	bl	8000f4c <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fd f832 	bl	8000f4c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e06e      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	4b31      	ldr	r3, [pc, #196]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d208      	bcs.n	8003f3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	492b      	ldr	r1, [pc, #172]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3a:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d210      	bcs.n	8003f6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f48:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 0207 	bic.w	r2, r3, #7
 8003f50:	4923      	ldr	r1, [pc, #140]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f58:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e036      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f76:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4918      	ldr	r1, [pc, #96]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f94:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4910      	ldr	r1, [pc, #64]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa8:	f000 f824 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	490b      	ldr	r1, [pc, #44]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1f8>)
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fc8:	4b09      	ldr	r3, [pc, #36]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1fc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc ff6d 	bl	8000eac <HAL_InitTick>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08006c90 	.word	0x08006c90
 8003fec:	2000000c 	.word	0x2000000c
 8003ff0:	20000010 	.word	0x20000010

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	@ 0x24
 8003ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004002:	4b3e      	ldr	r3, [pc, #248]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800400c:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x34>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d121      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d11e      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004028:	4b34      	ldr	r3, [pc, #208]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004034:	4b31      	ldr	r3, [pc, #196]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e005      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004044:	4b2d      	ldr	r3, [pc, #180]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004050:	4a2b      	ldr	r2, [pc, #172]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004064:	e00a      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d102      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800406c:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x110>)
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e004      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d101      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004078:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x114>)
 800407a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d134      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004082:	4b1e      	ldr	r3, [pc, #120]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0xa6>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d003      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004098:	e005      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x110>)
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	e005      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x114>)
 80040a2:	617b      	str	r3, [r7, #20]
      break;
 80040a4:	e002      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	617b      	str	r3, [r7, #20]
      break;
 80040aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040ac:	4b13      	ldr	r3, [pc, #76]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	3301      	adds	r3, #1
 80040b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	fb03 f202 	mul.w	r2, r3, r2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0e5b      	lsrs	r3, r3, #25
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	3301      	adds	r3, #1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040ec:	69bb      	ldr	r3, [r7, #24]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3724      	adds	r7, #36	@ 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	08006ca8 	.word	0x08006ca8
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	2000000c 	.word	0x2000000c

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	@ (800414c <HAL_RCC_GetPCLK1Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08006ca0 	.word	0x08006ca0

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004154:	f7ff ffda 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4904      	ldr	r1, [pc, #16]	@ (8004178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	08006ca0 	.word	0x08006ca0

0800417c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004188:	4b2a      	ldr	r3, [pc, #168]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004194:	f7ff f9ee 	bl	8003574 <HAL_PWREx_GetVoltageRange>
 8004198:	6178      	str	r0, [r7, #20]
 800419a:	e014      	b.n	80041c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a0:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a8:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041b4:	f7ff f9de 	bl	8003574 <HAL_PWREx_GetVoltageRange>
 80041b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041cc:	d10b      	bne.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b80      	cmp	r3, #128	@ 0x80
 80041d2:	d919      	bls.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80041d8:	d902      	bls.n	80041e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041da:	2302      	movs	r3, #2
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e013      	b.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e0:	2301      	movs	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e010      	b.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b80      	cmp	r3, #128	@ 0x80
 80041ea:	d902      	bls.n	80041f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041ec:	2303      	movs	r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e00a      	b.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b80      	cmp	r3, #128	@ 0x80
 80041f6:	d102      	bne.n	80041fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041f8:	2302      	movs	r3, #2
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e004      	b.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b70      	cmp	r3, #112	@ 0x70
 8004202:	d101      	bne.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004204:	2301      	movs	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 0207 	bic.w	r2, r3, #7
 8004210:	4909      	ldr	r1, [pc, #36]	@ (8004238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004218:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	40022000 	.word	0x40022000

0800423c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004244:	2300      	movs	r3, #0
 8004246:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004248:	2300      	movs	r3, #0
 800424a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d041      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800425c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004260:	d02a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004262:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004266:	d824      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800426c:	d008      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800426e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004272:	d81e      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800427c:	d010      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800427e:	e018      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004280:	4b86      	ldr	r3, [pc, #536]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a85      	ldr	r2, [pc, #532]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800428c:	e015      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fabb 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800429e:	e00c      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3320      	adds	r3, #32
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fba6 	bl	80049f8 <RCCEx_PLLSAI2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b0:	e003      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	74fb      	strb	r3, [r7, #19]
      break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042c0:	4b76      	ldr	r3, [pc, #472]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ce:	4973      	ldr	r1, [pc, #460]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d041      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042f0:	d02a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042f6:	d824      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042fc:	d008      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004302:	d81e      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800430c:	d010      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800430e:	e018      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004310:	4b62      	ldr	r3, [pc, #392]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a61      	ldr	r2, [pc, #388]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800431c:	e015      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa73 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800432e:	e00c      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3320      	adds	r3, #32
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fb5e 	bl	80049f8 <RCCEx_PLLSAI2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004340:	e003      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	74fb      	strb	r3, [r7, #19]
      break;
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004350:	4b52      	ldr	r3, [pc, #328]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800435e:	494f      	ldr	r1, [pc, #316]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004366:	e001      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80a0 	beq.w	80044ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800437e:	4b47      	ldr	r3, [pc, #284]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004394:	4b41      	ldr	r3, [pc, #260]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004398:	4a40      	ldr	r2, [pc, #256]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a0:	4b3e      	ldr	r3, [pc, #248]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ac:	2301      	movs	r3, #1
 80043ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b0:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a3a      	ldr	r2, [pc, #232]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043bc:	f7fc fdc6 	bl	8000f4c <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043c2:	e009      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c4:	f7fc fdc2 	bl	8000f4c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d902      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	74fb      	strb	r3, [r7, #19]
        break;
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043d8:	4b31      	ldr	r3, [pc, #196]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ef      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d15c      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ea:	4b2c      	ldr	r3, [pc, #176]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	429a      	cmp	r2, r3
 8004406:	d019      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004408:	4b24      	ldr	r3, [pc, #144]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004414:	4b21      	ldr	r3, [pc, #132]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	4a20      	ldr	r2, [pc, #128]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004424:	4b1d      	ldr	r3, [pc, #116]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	4a1c      	ldr	r2, [pc, #112]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004434:	4a19      	ldr	r2, [pc, #100]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fc fd81 	bl	8000f4c <HAL_GetTick>
 800444a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444c:	e00b      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fc fd7d 	bl	8000f4c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d902      	bls.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	74fb      	strb	r3, [r7, #19]
            break;
 8004464:	e006      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ec      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10c      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447a:	4b08      	ldr	r3, [pc, #32]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448a:	4904      	ldr	r1, [pc, #16]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	74bb      	strb	r3, [r7, #18]
 8004498:	e006      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044a8:	7c7b      	ldrb	r3, [r7, #17]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b2:	4a9d      	ldr	r2, [pc, #628]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c6:	4b98      	ldr	r3, [pc, #608]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	f023 0203 	bic.w	r2, r3, #3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	4994      	ldr	r1, [pc, #592]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f023 020c 	bic.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f6:	498c      	ldr	r1, [pc, #560]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800450a:	4b87      	ldr	r3, [pc, #540]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	4983      	ldr	r1, [pc, #524]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800452c:	4b7e      	ldr	r3, [pc, #504]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004532:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	497b      	ldr	r1, [pc, #492]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800454e:	4b76      	ldr	r3, [pc, #472]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455c:	4972      	ldr	r1, [pc, #456]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004570:	4b6d      	ldr	r3, [pc, #436]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004576:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	496a      	ldr	r1, [pc, #424]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004592:	4b65      	ldr	r3, [pc, #404]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a0:	4961      	ldr	r1, [pc, #388]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	4959      	ldr	r1, [pc, #356]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d6:	4b54      	ldr	r3, [pc, #336]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e4:	4950      	ldr	r1, [pc, #320]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	4948      	ldr	r1, [pc, #288]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800461a:	4b43      	ldr	r3, [pc, #268]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004628:	493f      	ldr	r1, [pc, #252]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d028      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800463c:	4b3a      	ldr	r3, [pc, #232]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464a:	4937      	ldr	r1, [pc, #220]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800465a:	d106      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800465c:	4b32      	ldr	r3, [pc, #200]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a31      	ldr	r2, [pc, #196]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004666:	60d3      	str	r3, [r2, #12]
 8004668:	e011      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004672:	d10c      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	2101      	movs	r1, #1
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f8c8 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d028      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800469a:	4b23      	ldr	r3, [pc, #140]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a8:	491f      	ldr	r1, [pc, #124]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b8:	d106      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4a1a      	ldr	r2, [pc, #104]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c4:	60d3      	str	r3, [r2, #12]
 80046c6:	e011      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d0:	d10c      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	2101      	movs	r1, #1
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 f899 	bl	8004810 <RCCEx_PLLSAI1_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004706:	4908      	ldr	r1, [pc, #32]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004716:	d109      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004718:	4b03      	ldr	r3, [pc, #12]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a02      	ldr	r2, [pc, #8]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004722:	60d3      	str	r3, [r2, #12]
 8004724:	e014      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f867 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02f      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800475c:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800476a:	4928      	ldr	r1, [pc, #160]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800477a:	d10d      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f844 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d014      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	74bb      	strb	r3, [r7, #18]
 8004796:	e011      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a0:	d10c      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3320      	adds	r3, #32
 80047a6:	2102      	movs	r1, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f925 	bl	80049f8 <RCCEx_PLLSAI2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c8:	4b10      	ldr	r3, [pc, #64]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047d6:	490d      	ldr	r1, [pc, #52]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00b      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ea:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047fa:	4904      	ldr	r1, [pc, #16]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004802:	7cbb      	ldrb	r3, [r7, #18]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000

08004810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481e:	4b75      	ldr	r3, [pc, #468]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800482a:	4b72      	ldr	r3, [pc, #456]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d10d      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
       ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004842:	4b6c      	ldr	r3, [pc, #432]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
       ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d047      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	e044      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d018      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0x86>
 8004864:	2b03      	cmp	r3, #3
 8004866:	d825      	bhi.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004868:	2b01      	cmp	r3, #1
 800486a:	d002      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x62>
 800486c:	2b02      	cmp	r3, #2
 800486e:	d009      	beq.n	8004884 <RCCEx_PLLSAI1_Config+0x74>
 8004870:	e020      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004872:	4b60      	ldr	r3, [pc, #384]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004882:	e01a      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004884:	4b5b      	ldr	r3, [pc, #364]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e013      	b.n	80048be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004896:	4b57      	ldr	r3, [pc, #348]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048a2:	4b54      	ldr	r3, [pc, #336]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048b2:	e006      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      break;
 80048b8:	e004      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ca:	4b4a      	ldr	r3, [pc, #296]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	430b      	orrs	r3, r1
 80048e0:	4944      	ldr	r1, [pc, #272]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d17d      	bne.n	80049e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048ec:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a40      	ldr	r2, [pc, #256]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fc fb28 	bl	8000f4c <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004900:	f7fc fb24 	bl	8000f4c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
        break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004914:	4b37      	ldr	r3, [pc, #220]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ef      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d160      	bne.n	80049e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d111      	bne.n	8004950 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492c:	4b31      	ldr	r3, [pc, #196]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	0211      	lsls	r1, r2, #8
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	0912      	lsrs	r2, r2, #4
 8004944:	0452      	lsls	r2, r2, #17
 8004946:	430a      	orrs	r2, r1
 8004948:	492a      	ldr	r1, [pc, #168]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	610b      	str	r3, [r1, #16]
 800494e:	e027      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d112      	bne.n	800497c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004956:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800495e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6892      	ldr	r2, [r2, #8]
 8004966:	0211      	lsls	r1, r2, #8
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6912      	ldr	r2, [r2, #16]
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0552      	lsls	r2, r2, #21
 8004972:	430a      	orrs	r2, r1
 8004974:	491f      	ldr	r1, [pc, #124]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	610b      	str	r3, [r1, #16]
 800497a:	e011      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004984:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	0211      	lsls	r1, r2, #8
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6952      	ldr	r2, [r2, #20]
 8004992:	0852      	lsrs	r2, r2, #1
 8004994:	3a01      	subs	r2, #1
 8004996:	0652      	lsls	r2, r2, #25
 8004998:	430a      	orrs	r2, r1
 800499a:	4916      	ldr	r1, [pc, #88]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049a0:	4b14      	ldr	r3, [pc, #80]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a13      	ldr	r2, [pc, #76]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fc face 	bl	8000f4c <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b4:	f7fc faca 	bl	8000f4c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
          break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ef      	beq.n	80049b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049da:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	4904      	ldr	r1, [pc, #16]	@ (80049f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000

080049f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a06:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d018      	beq.n	8004a44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a12:	4b67      	ldr	r3, [pc, #412]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0203 	and.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d10d      	bne.n	8004a3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
       ||
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a2a:	4b61      	ldr	r3, [pc, #388]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
       ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d047      	beq.n	8004ace <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	e044      	b.n	8004ace <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d018      	beq.n	8004a7e <RCCEx_PLLSAI2_Config+0x86>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d825      	bhi.n	8004a9c <RCCEx_PLLSAI2_Config+0xa4>
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d002      	beq.n	8004a5a <RCCEx_PLLSAI2_Config+0x62>
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d009      	beq.n	8004a6c <RCCEx_PLLSAI2_Config+0x74>
 8004a58:	e020      	b.n	8004a9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a5a:	4b55      	ldr	r3, [pc, #340]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11d      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6a:	e01a      	b.n	8004aa2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a6c:	4b50      	ldr	r3, [pc, #320]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d116      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a7c:	e013      	b.n	8004aa6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a8a:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a9a:	e006      	b.n	8004aaa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa0:	e004      	b.n	8004aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10d      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	4939      	ldr	r1, [pc, #228]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d167      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ad4:	4b36      	ldr	r3, [pc, #216]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fc fa34 	bl	8000f4c <HAL_GetTick>
 8004ae4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae6:	e009      	b.n	8004afc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ae8:	f7fc fa30 	bl	8000f4c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d902      	bls.n	8004afc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	73fb      	strb	r3, [r7, #15]
        break;
 8004afa:	e005      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004afc:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ef      	bne.n	8004ae8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d14a      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d111      	bne.n	8004b38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b14:	4b26      	ldr	r3, [pc, #152]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6892      	ldr	r2, [r2, #8]
 8004b24:	0211      	lsls	r1, r2, #8
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68d2      	ldr	r2, [r2, #12]
 8004b2a:	0912      	lsrs	r2, r2, #4
 8004b2c:	0452      	lsls	r2, r2, #17
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	491f      	ldr	r1, [pc, #124]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	614b      	str	r3, [r1, #20]
 8004b36:	e011      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b38:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6892      	ldr	r2, [r2, #8]
 8004b48:	0211      	lsls	r1, r2, #8
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6912      	ldr	r2, [r2, #16]
 8004b4e:	0852      	lsrs	r2, r2, #1
 8004b50:	3a01      	subs	r2, #1
 8004b52:	0652      	lsls	r2, r2, #25
 8004b54:	430a      	orrs	r2, r1
 8004b56:	4916      	ldr	r1, [pc, #88]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b5c:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a13      	ldr	r2, [pc, #76]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fc f9f0 	bl	8000f4c <HAL_GetTick>
 8004b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b6e:	e009      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b70:	f7fc f9ec 	bl	8000f4c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	73fb      	strb	r3, [r7, #15]
          break;
 8004b82:	e005      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b84:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ef      	beq.n	8004b70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4904      	ldr	r1, [pc, #16]	@ (8004bb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000

08004bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e040      	b.n	8004c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fb ffa2 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	@ 0x24
 8004be0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fe90 	bl	8005920 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fbd5 	bl	80053b0 <UART_SetConfig>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e01b      	b.n	8004c48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 ff0f 	bl	8005a64 <UART_CheckIdleState>
 8004c46:	4603      	mov	r3, r0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	@ 0x28
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d177      	bne.n	8004d58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Transmit+0x24>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e070      	b.n	8004d5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2221      	movs	r2, #33	@ 0x21
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c86:	f7fc f961 	bl	8000f4c <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	88fa      	ldrh	r2, [r7, #6]
 8004c90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca4:	d108      	bne.n	8004cb8 <HAL_UART_Transmit+0x68>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e003      	b.n	8004cc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cc0:	e02f      	b.n	8004d22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2180      	movs	r1, #128	@ 0x80
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 ff71 	bl	8005bb4 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e03b      	b.n	8004d5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	e007      	b.n	8004d10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1c9      	bne.n	8004cc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2140      	movs	r1, #64	@ 0x40
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 ff3b 	bl	8005bb4 <UART_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e005      	b.n	8004d5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d58:	2302      	movs	r3, #2
  }
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b0ba      	sub	sp, #232	@ 0xe8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d92:	4013      	ands	r3, r2
 8004d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d115      	bne.n	8004dcc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 82ca 	beq.w	8005356 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
      }
      return;
 8004dca:	e2c4      	b.n	8005356 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8117 	beq.w	8005004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004de6:	4b85      	ldr	r3, [pc, #532]	@ (8004ffc <HAL_UART_IRQHandler+0x298>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 810a 	beq.w	8005004 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_UART_IRQHandler+0xbc>
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d011      	beq.n	8004e50 <HAL_UART_IRQHandler+0xec>
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00b      	beq.n	8004e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e46:	f043 0204 	orr.w	r2, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d011      	beq.n	8004e80 <HAL_UART_IRQHandler+0x11c>
 8004e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d017      	beq.n	8004ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb2:	f043 0208 	orr.w	r2, r3, #8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <HAL_UART_IRQHandler+0x18a>
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8230 	beq.w	800535a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f36:	2b40      	cmp	r3, #64	@ 0x40
 8004f38:	d005      	beq.n	8004f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d04f      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fea1 	bl	8005c8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f56:	2b40      	cmp	r3, #64	@ 0x40
 8004f58:	d141      	bne.n	8004fde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1d9      	bne.n	8004f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d013      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb2:	4a13      	ldr	r2, [pc, #76]	@ (8005000 <HAL_UART_IRQHandler+0x29c>)
 8004fb4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fc f945 	bl	800124a <HAL_DMA_Abort_IT>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d017      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e00f      	b.n	8004ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9d4 	bl	8005384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	e00b      	b.n	8004ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f9d0 	bl	8005384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9cc 	bl	8005384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ff4:	e1b1      	b.n	800535a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff6:	bf00      	nop
    return;
 8004ff8:	e1af      	b.n	800535a <HAL_UART_IRQHandler+0x5f6>
 8004ffa:	bf00      	nop
 8004ffc:	04000120 	.word	0x04000120
 8005000:	08005d57 	.word	0x08005d57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 816a 	bne.w	80052e2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8163 	beq.w	80052e2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 815c 	beq.w	80052e2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2210      	movs	r2, #16
 8005030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	f040 80d4 	bne.w	80051ea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800504e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80ad 	beq.w	80051b2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800505e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005062:	429a      	cmp	r2, r3
 8005064:	f080 80a5 	bcs.w	80051b2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8086 	bne.w	8005190 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800509c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1da      	bne.n	8005084 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e1      	bne.n	80050ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800511a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800511c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800512e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800513c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e3      	bne.n	800510a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800515e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005160:	f023 0310 	bic.w	r3, r3, #16
 8005164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005174:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e4      	bne.n	8005150 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	4618      	mov	r0, r3
 800518c:	f7fc f81f 	bl	80011ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8f4 	bl	8005398 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051b0:	e0d5      	b.n	800535e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051bc:	429a      	cmp	r2, r3
 80051be:	f040 80ce 	bne.w	800535e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	f040 80c5 	bne.w	800535e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f8d8 	bl	8005398 <HAL_UARTEx_RxEventCallback>
      return;
 80051e8:	e0b9      	b.n	800535e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80ab 	beq.w	8005362 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800520c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80a6 	beq.w	8005362 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800522a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005238:	647b      	str	r3, [r7, #68]	@ 0x44
 800523a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800523e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e4      	bne.n	8005216 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	623b      	str	r3, [r7, #32]
   return(result);
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005270:	633a      	str	r2, [r7, #48]	@ 0x30
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e3      	bne.n	800524c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 0310 	bic.w	r3, r3, #16
 80052ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	69b9      	ldr	r1, [r7, #24]
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	617b      	str	r3, [r7, #20]
   return(result);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e4      	bne.n	8005298 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f85c 	bl	8005398 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052e0:	e03f      	b.n	8005362 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00e      	beq.n	800530c <HAL_UART_IRQHandler+0x5a8>
 80052ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005302:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fd66 	bl	8005dd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800530a:	e02d      	b.n	8005368 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00e      	beq.n	8005336 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01c      	beq.n	8005366 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
    }
    return;
 8005334:	e017      	b.n	8005366 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d012      	beq.n	8005368 <HAL_UART_IRQHandler+0x604>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fd17 	bl	8005d82 <UART_EndTransmit_IT>
    return;
 8005354:	e008      	b.n	8005368 <HAL_UART_IRQHandler+0x604>
      return;
 8005356:	bf00      	nop
 8005358:	e006      	b.n	8005368 <HAL_UART_IRQHandler+0x604>
    return;
 800535a:	bf00      	nop
 800535c:	e004      	b.n	8005368 <HAL_UART_IRQHandler+0x604>
      return;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <HAL_UART_IRQHandler+0x604>
      return;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_UART_IRQHandler+0x604>
    return;
 8005366:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005368:	37e8      	adds	r7, #232	@ 0xe8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop

08005370 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b4:	b08a      	sub	sp, #40	@ 0x28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4ba4      	ldr	r3, [pc, #656]	@ (8005670 <UART_SetConfig+0x2c0>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a99      	ldr	r2, [pc, #612]	@ (8005674 <UART_SetConfig+0x2c4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005418:	4313      	orrs	r3, r2
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a90      	ldr	r2, [pc, #576]	@ (8005678 <UART_SetConfig+0x2c8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d126      	bne.n	8005488 <UART_SetConfig+0xd8>
 800543a:	4b90      	ldr	r3, [pc, #576]	@ (800567c <UART_SetConfig+0x2cc>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d81b      	bhi.n	8005480 <UART_SetConfig+0xd0>
 8005448:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <UART_SetConfig+0xa0>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005461 	.word	0x08005461
 8005454:	08005471 	.word	0x08005471
 8005458:	08005469 	.word	0x08005469
 800545c:	08005479 	.word	0x08005479
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005466:	e116      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005468:	2302      	movs	r3, #2
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546e:	e112      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005476:	e10e      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547e:	e10a      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005486:	e106      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a7c      	ldr	r2, [pc, #496]	@ (8005680 <UART_SetConfig+0x2d0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d138      	bne.n	8005504 <UART_SetConfig+0x154>
 8005492:	4b7a      	ldr	r3, [pc, #488]	@ (800567c <UART_SetConfig+0x2cc>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	f003 030c 	and.w	r3, r3, #12
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d82d      	bhi.n	80054fc <UART_SetConfig+0x14c>
 80054a0:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <UART_SetConfig+0xf8>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080054fd 	.word	0x080054fd
 80054c0:	080054fd 	.word	0x080054fd
 80054c4:	080054fd 	.word	0x080054fd
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054fd 	.word	0x080054fd
 80054d0:	080054fd 	.word	0x080054fd
 80054d4:	080054fd 	.word	0x080054fd
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e2:	e0d8      	b.n	8005696 <UART_SetConfig+0x2e6>
 80054e4:	2302      	movs	r3, #2
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e0d4      	b.n	8005696 <UART_SetConfig+0x2e6>
 80054ec:	2304      	movs	r3, #4
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e0d0      	b.n	8005696 <UART_SetConfig+0x2e6>
 80054f4:	2308      	movs	r3, #8
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e0cc      	b.n	8005696 <UART_SetConfig+0x2e6>
 80054fc:	2310      	movs	r3, #16
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005502:	e0c8      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a5e      	ldr	r2, [pc, #376]	@ (8005684 <UART_SetConfig+0x2d4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d125      	bne.n	800555a <UART_SetConfig+0x1aa>
 800550e:	4b5b      	ldr	r3, [pc, #364]	@ (800567c <UART_SetConfig+0x2cc>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005514:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005518:	2b30      	cmp	r3, #48	@ 0x30
 800551a:	d016      	beq.n	800554a <UART_SetConfig+0x19a>
 800551c:	2b30      	cmp	r3, #48	@ 0x30
 800551e:	d818      	bhi.n	8005552 <UART_SetConfig+0x1a2>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d00a      	beq.n	800553a <UART_SetConfig+0x18a>
 8005524:	2b20      	cmp	r3, #32
 8005526:	d814      	bhi.n	8005552 <UART_SetConfig+0x1a2>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <UART_SetConfig+0x182>
 800552c:	2b10      	cmp	r3, #16
 800552e:	d008      	beq.n	8005542 <UART_SetConfig+0x192>
 8005530:	e00f      	b.n	8005552 <UART_SetConfig+0x1a2>
 8005532:	2300      	movs	r3, #0
 8005534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005538:	e0ad      	b.n	8005696 <UART_SetConfig+0x2e6>
 800553a:	2302      	movs	r3, #2
 800553c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005540:	e0a9      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005542:	2304      	movs	r3, #4
 8005544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005548:	e0a5      	b.n	8005696 <UART_SetConfig+0x2e6>
 800554a:	2308      	movs	r3, #8
 800554c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005550:	e0a1      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005552:	2310      	movs	r3, #16
 8005554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005558:	e09d      	b.n	8005696 <UART_SetConfig+0x2e6>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a4a      	ldr	r2, [pc, #296]	@ (8005688 <UART_SetConfig+0x2d8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d125      	bne.n	80055b0 <UART_SetConfig+0x200>
 8005564:	4b45      	ldr	r3, [pc, #276]	@ (800567c <UART_SetConfig+0x2cc>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800556e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005570:	d016      	beq.n	80055a0 <UART_SetConfig+0x1f0>
 8005572:	2bc0      	cmp	r3, #192	@ 0xc0
 8005574:	d818      	bhi.n	80055a8 <UART_SetConfig+0x1f8>
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d00a      	beq.n	8005590 <UART_SetConfig+0x1e0>
 800557a:	2b80      	cmp	r3, #128	@ 0x80
 800557c:	d814      	bhi.n	80055a8 <UART_SetConfig+0x1f8>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <UART_SetConfig+0x1d8>
 8005582:	2b40      	cmp	r3, #64	@ 0x40
 8005584:	d008      	beq.n	8005598 <UART_SetConfig+0x1e8>
 8005586:	e00f      	b.n	80055a8 <UART_SetConfig+0x1f8>
 8005588:	2300      	movs	r3, #0
 800558a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800558e:	e082      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005590:	2302      	movs	r3, #2
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005596:	e07e      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800559e:	e07a      	b.n	8005696 <UART_SetConfig+0x2e6>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055a6:	e076      	b.n	8005696 <UART_SetConfig+0x2e6>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ae:	e072      	b.n	8005696 <UART_SetConfig+0x2e6>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a35      	ldr	r2, [pc, #212]	@ (800568c <UART_SetConfig+0x2dc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d12a      	bne.n	8005610 <UART_SetConfig+0x260>
 80055ba:	4b30      	ldr	r3, [pc, #192]	@ (800567c <UART_SetConfig+0x2cc>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055c8:	d01a      	beq.n	8005600 <UART_SetConfig+0x250>
 80055ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ce:	d81b      	bhi.n	8005608 <UART_SetConfig+0x258>
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d4:	d00c      	beq.n	80055f0 <UART_SetConfig+0x240>
 80055d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055da:	d815      	bhi.n	8005608 <UART_SetConfig+0x258>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <UART_SetConfig+0x238>
 80055e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e4:	d008      	beq.n	80055f8 <UART_SetConfig+0x248>
 80055e6:	e00f      	b.n	8005608 <UART_SetConfig+0x258>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ee:	e052      	b.n	8005696 <UART_SetConfig+0x2e6>
 80055f0:	2302      	movs	r3, #2
 80055f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f6:	e04e      	b.n	8005696 <UART_SetConfig+0x2e6>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fe:	e04a      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005606:	e046      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560e:	e042      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <UART_SetConfig+0x2c4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d13a      	bne.n	8005690 <UART_SetConfig+0x2e0>
 800561a:	4b18      	ldr	r3, [pc, #96]	@ (800567c <UART_SetConfig+0x2cc>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005628:	d01a      	beq.n	8005660 <UART_SetConfig+0x2b0>
 800562a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800562e:	d81b      	bhi.n	8005668 <UART_SetConfig+0x2b8>
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005634:	d00c      	beq.n	8005650 <UART_SetConfig+0x2a0>
 8005636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800563a:	d815      	bhi.n	8005668 <UART_SetConfig+0x2b8>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <UART_SetConfig+0x298>
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005644:	d008      	beq.n	8005658 <UART_SetConfig+0x2a8>
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x2b8>
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564e:	e022      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005650:	2302      	movs	r3, #2
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005656:	e01e      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005658:	2304      	movs	r3, #4
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565e:	e01a      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005660:	2308      	movs	r3, #8
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005666:	e016      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005668:	2310      	movs	r3, #16
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800566e:	e012      	b.n	8005696 <UART_SetConfig+0x2e6>
 8005670:	efff69f3 	.word	0xefff69f3
 8005674:	40008000 	.word	0x40008000
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40004400 	.word	0x40004400
 8005684:	40004800 	.word	0x40004800
 8005688:	40004c00 	.word	0x40004c00
 800568c:	40005000 	.word	0x40005000
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a9f      	ldr	r2, [pc, #636]	@ (8005918 <UART_SetConfig+0x568>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d17a      	bne.n	8005796 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d824      	bhi.n	80056f2 <UART_SetConfig+0x342>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x300>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056f3 	.word	0x080056f3
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056f3 	.word	0x080056f3
 80056c0:	080056e3 	.word	0x080056e3
 80056c4:	080056f3 	.word	0x080056f3
 80056c8:	080056f3 	.word	0x080056f3
 80056cc:	080056f3 	.word	0x080056f3
 80056d0:	080056eb 	.word	0x080056eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7fe fd26 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61f8      	str	r0, [r7, #28]
        break;
 80056da:	e010      	b.n	80056fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b8f      	ldr	r3, [pc, #572]	@ (800591c <UART_SetConfig+0x56c>)
 80056de:	61fb      	str	r3, [r7, #28]
        break;
 80056e0:	e00d      	b.n	80056fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e2:	f7fe fc87 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 80056e6:	61f8      	str	r0, [r7, #28]
        break;
 80056e8:	e009      	b.n	80056fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ee:	61fb      	str	r3, [r7, #28]
        break;
 80056f0:	e005      	b.n	80056fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80fb 	beq.w	80058fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	69fa      	ldr	r2, [r7, #28]
 8005712:	429a      	cmp	r2, r3
 8005714:	d305      	bcc.n	8005722 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	429a      	cmp	r2, r3
 8005720:	d903      	bls.n	800572a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005728:	e0e8      	b.n	80058fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2200      	movs	r2, #0
 800572e:	461c      	mov	r4, r3
 8005730:	4615      	mov	r5, r2
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	022b      	lsls	r3, r5, #8
 800573c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005740:	0222      	lsls	r2, r4, #8
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6849      	ldr	r1, [r1, #4]
 8005746:	0849      	lsrs	r1, r1, #1
 8005748:	2000      	movs	r0, #0
 800574a:	4688      	mov	r8, r1
 800574c:	4681      	mov	r9, r0
 800574e:	eb12 0a08 	adds.w	sl, r2, r8
 8005752:	eb43 0b09 	adc.w	fp, r3, r9
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005764:	4650      	mov	r0, sl
 8005766:	4659      	mov	r1, fp
 8005768:	f7fa fd82 	bl	8000270 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4613      	mov	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577a:	d308      	bcc.n	800578e <UART_SetConfig+0x3de>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005782:	d204      	bcs.n	800578e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e0b6      	b.n	80058fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005794:	e0b2      	b.n	80058fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800579e:	d15e      	bne.n	800585e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d828      	bhi.n	80057fa <UART_SetConfig+0x44a>
 80057a8:	a201      	add	r2, pc, #4	@ (adr r2, 80057b0 <UART_SetConfig+0x400>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	080057fb 	.word	0x080057fb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	080057fb 	.word	0x080057fb
 80057cc:	080057fb 	.word	0x080057fb
 80057d0:	080057f3 	.word	0x080057f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fe fca6 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80057d8:	61f8      	str	r0, [r7, #28]
        break;
 80057da:	e014      	b.n	8005806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fe fcb8 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 80057e0:	61f8      	str	r0, [r7, #28]
        break;
 80057e2:	e010      	b.n	8005806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e4:	4b4d      	ldr	r3, [pc, #308]	@ (800591c <UART_SetConfig+0x56c>)
 80057e6:	61fb      	str	r3, [r7, #28]
        break;
 80057e8:	e00d      	b.n	8005806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ea:	f7fe fc03 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 80057ee:	61f8      	str	r0, [r7, #28]
        break;
 80057f0:	e009      	b.n	8005806 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057f6:	61fb      	str	r3, [r7, #28]
        break;
 80057f8:	e005      	b.n	8005806 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d077      	beq.n	80058fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	005a      	lsls	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b0f      	cmp	r3, #15
 8005826:	d916      	bls.n	8005856 <UART_SetConfig+0x4a6>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582e:	d212      	bcs.n	8005856 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f023 030f 	bic.w	r3, r3, #15
 8005838:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	b29a      	uxth	r2, r3
 8005846:	8afb      	ldrh	r3, [r7, #22]
 8005848:	4313      	orrs	r3, r2
 800584a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	8afa      	ldrh	r2, [r7, #22]
 8005852:	60da      	str	r2, [r3, #12]
 8005854:	e052      	b.n	80058fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800585c:	e04e      	b.n	80058fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800585e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005862:	2b08      	cmp	r3, #8
 8005864:	d827      	bhi.n	80058b6 <UART_SetConfig+0x506>
 8005866:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <UART_SetConfig+0x4bc>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058b7 	.word	0x080058b7
 800587c:	080058a7 	.word	0x080058a7
 8005880:	080058b7 	.word	0x080058b7
 8005884:	080058b7 	.word	0x080058b7
 8005888:	080058b7 	.word	0x080058b7
 800588c:	080058af 	.word	0x080058af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005890:	f7fe fc48 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005894:	61f8      	str	r0, [r7, #28]
        break;
 8005896:	e014      	b.n	80058c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005898:	f7fe fc5a 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 800589c:	61f8      	str	r0, [r7, #28]
        break;
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a0:	4b1e      	ldr	r3, [pc, #120]	@ (800591c <UART_SetConfig+0x56c>)
 80058a2:	61fb      	str	r3, [r7, #28]
        break;
 80058a4:	e00d      	b.n	80058c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a6:	f7fe fba5 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 80058aa:	61f8      	str	r0, [r7, #28]
        break;
 80058ac:	e009      	b.n	80058c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058b2:	61fb      	str	r3, [r7, #28]
        break;
 80058b4:	e005      	b.n	80058c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058c0:	bf00      	nop
    }

    if (pclk != 0U)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d019      	beq.n	80058fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	085a      	lsrs	r2, r3, #1
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	441a      	add	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	d909      	bls.n	80058f6 <UART_SetConfig+0x546>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e8:	d205      	bcs.n	80058f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60da      	str	r2, [r3, #12]
 80058f4:	e002      	b.n	80058fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005908:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	@ 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005916:	bf00      	nop
 8005918:	40008000 	.word	0x40008000
 800591c:	00f42400 	.word	0x00f42400

08005920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a1e:	d10a      	bne.n	8005a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b098      	sub	sp, #96	@ 0x60
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a74:	f7fb fa6a 	bl	8000f4c <HAL_GetTick>
 8005a78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d12e      	bne.n	8005ae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a90:	2200      	movs	r2, #0
 8005a92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f88c 	bl	8005bb4 <UART_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d021      	beq.n	8005ae6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ab6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e6      	bne.n	8005aa2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e062      	b.n	8005bac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d149      	bne.n	8005b88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afc:	2200      	movs	r2, #0
 8005afe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f856 	bl	8005bb4 <UART_WaitOnFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03c      	beq.n	8005b88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e6      	bne.n	8005b0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b60:	61fa      	str	r2, [r7, #28]
 8005b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e011      	b.n	8005bac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3758      	adds	r7, #88	@ 0x58
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc4:	e04f      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d04b      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fb f9bd 	bl	8000f4c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e04e      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d037      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b80      	cmp	r3, #128	@ 0x80
 8005bfa:	d034      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	d031      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d110      	bne.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2208      	movs	r2, #8
 8005c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f838 	bl	8005c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2208      	movs	r2, #8
 8005c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e029      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c40:	d111      	bne.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f81e 	bl	8005c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d0a0      	beq.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b095      	sub	sp, #84	@ 0x54
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d118      	bne.n	8005d36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e6      	bne.n	8005d04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d4a:	bf00      	nop
 8005d4c:	3754      	adds	r7, #84	@ 0x54
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fb05 	bl	8005384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b088      	sub	sp, #32
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	613b      	str	r3, [r7, #16]
   return(result);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fad1 	bl	8005370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dce:	bf00      	nop
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <std>:
 8005dec:	2300      	movs	r3, #0
 8005dee:	b510      	push	{r4, lr}
 8005df0:	4604      	mov	r4, r0
 8005df2:	e9c0 3300 	strd	r3, r3, [r0]
 8005df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dfa:	6083      	str	r3, [r0, #8]
 8005dfc:	8181      	strh	r1, [r0, #12]
 8005dfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e00:	81c2      	strh	r2, [r0, #14]
 8005e02:	6183      	str	r3, [r0, #24]
 8005e04:	4619      	mov	r1, r3
 8005e06:	2208      	movs	r2, #8
 8005e08:	305c      	adds	r0, #92	@ 0x5c
 8005e0a:	f000 f906 	bl	800601a <memset>
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <std+0x58>)
 8005e10:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e12:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <std+0x5c>)
 8005e14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e16:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <std+0x60>)
 8005e18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e50 <std+0x64>)
 8005e1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <std+0x68>)
 8005e20:	6224      	str	r4, [r4, #32]
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d006      	beq.n	8005e34 <std+0x48>
 8005e26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e2a:	4294      	cmp	r4, r2
 8005e2c:	d002      	beq.n	8005e34 <std+0x48>
 8005e2e:	33d0      	adds	r3, #208	@ 0xd0
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d105      	bne.n	8005e40 <std+0x54>
 8005e34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e3c:	f000 b966 	b.w	800610c <__retarget_lock_init_recursive>
 8005e40:	bd10      	pop	{r4, pc}
 8005e42:	bf00      	nop
 8005e44:	08005f95 	.word	0x08005f95
 8005e48:	08005fb7 	.word	0x08005fb7
 8005e4c:	08005fef 	.word	0x08005fef
 8005e50:	08006013 	.word	0x08006013
 8005e54:	200001d8 	.word	0x200001d8

08005e58 <stdio_exit_handler>:
 8005e58:	4a02      	ldr	r2, [pc, #8]	@ (8005e64 <stdio_exit_handler+0xc>)
 8005e5a:	4903      	ldr	r1, [pc, #12]	@ (8005e68 <stdio_exit_handler+0x10>)
 8005e5c:	4803      	ldr	r0, [pc, #12]	@ (8005e6c <stdio_exit_handler+0x14>)
 8005e5e:	f000 b869 	b.w	8005f34 <_fwalk_sglue>
 8005e62:	bf00      	nop
 8005e64:	20000018 	.word	0x20000018
 8005e68:	080069a9 	.word	0x080069a9
 8005e6c:	20000028 	.word	0x20000028

08005e70 <cleanup_stdio>:
 8005e70:	6841      	ldr	r1, [r0, #4]
 8005e72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <cleanup_stdio+0x34>)
 8005e74:	4299      	cmp	r1, r3
 8005e76:	b510      	push	{r4, lr}
 8005e78:	4604      	mov	r4, r0
 8005e7a:	d001      	beq.n	8005e80 <cleanup_stdio+0x10>
 8005e7c:	f000 fd94 	bl	80069a8 <_fflush_r>
 8005e80:	68a1      	ldr	r1, [r4, #8]
 8005e82:	4b09      	ldr	r3, [pc, #36]	@ (8005ea8 <cleanup_stdio+0x38>)
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d002      	beq.n	8005e8e <cleanup_stdio+0x1e>
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 fd8d 	bl	80069a8 <_fflush_r>
 8005e8e:	68e1      	ldr	r1, [r4, #12]
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <cleanup_stdio+0x3c>)
 8005e92:	4299      	cmp	r1, r3
 8005e94:	d004      	beq.n	8005ea0 <cleanup_stdio+0x30>
 8005e96:	4620      	mov	r0, r4
 8005e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e9c:	f000 bd84 	b.w	80069a8 <_fflush_r>
 8005ea0:	bd10      	pop	{r4, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200001d8 	.word	0x200001d8
 8005ea8:	20000240 	.word	0x20000240
 8005eac:	200002a8 	.word	0x200002a8

08005eb0 <global_stdio_init.part.0>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <global_stdio_init.part.0+0x30>)
 8005eb4:	4c0b      	ldr	r4, [pc, #44]	@ (8005ee4 <global_stdio_init.part.0+0x34>)
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ee8 <global_stdio_init.part.0+0x38>)
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	4620      	mov	r0, r4
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	f7ff ff94 	bl	8005dec <std>
 8005ec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2109      	movs	r1, #9
 8005ecc:	f7ff ff8e 	bl	8005dec <std>
 8005ed0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eda:	2112      	movs	r1, #18
 8005edc:	f7ff bf86 	b.w	8005dec <std>
 8005ee0:	20000310 	.word	0x20000310
 8005ee4:	200001d8 	.word	0x200001d8
 8005ee8:	08005e59 	.word	0x08005e59

08005eec <__sfp_lock_acquire>:
 8005eec:	4801      	ldr	r0, [pc, #4]	@ (8005ef4 <__sfp_lock_acquire+0x8>)
 8005eee:	f000 b90e 	b.w	800610e <__retarget_lock_acquire_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	20000319 	.word	0x20000319

08005ef8 <__sfp_lock_release>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	@ (8005f00 <__sfp_lock_release+0x8>)
 8005efa:	f000 b909 	b.w	8006110 <__retarget_lock_release_recursive>
 8005efe:	bf00      	nop
 8005f00:	20000319 	.word	0x20000319

08005f04 <__sinit>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4604      	mov	r4, r0
 8005f08:	f7ff fff0 	bl	8005eec <__sfp_lock_acquire>
 8005f0c:	6a23      	ldr	r3, [r4, #32]
 8005f0e:	b11b      	cbz	r3, 8005f18 <__sinit+0x14>
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f7ff bff0 	b.w	8005ef8 <__sfp_lock_release>
 8005f18:	4b04      	ldr	r3, [pc, #16]	@ (8005f2c <__sinit+0x28>)
 8005f1a:	6223      	str	r3, [r4, #32]
 8005f1c:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <__sinit+0x2c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f5      	bne.n	8005f10 <__sinit+0xc>
 8005f24:	f7ff ffc4 	bl	8005eb0 <global_stdio_init.part.0>
 8005f28:	e7f2      	b.n	8005f10 <__sinit+0xc>
 8005f2a:	bf00      	nop
 8005f2c:	08005e71 	.word	0x08005e71
 8005f30:	20000310 	.word	0x20000310

08005f34 <_fwalk_sglue>:
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f38:	4607      	mov	r7, r0
 8005f3a:	4688      	mov	r8, r1
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	2600      	movs	r6, #0
 8005f40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f44:	f1b9 0901 	subs.w	r9, r9, #1
 8005f48:	d505      	bpl.n	8005f56 <_fwalk_sglue+0x22>
 8005f4a:	6824      	ldr	r4, [r4, #0]
 8005f4c:	2c00      	cmp	r4, #0
 8005f4e:	d1f7      	bne.n	8005f40 <_fwalk_sglue+0xc>
 8005f50:	4630      	mov	r0, r6
 8005f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d907      	bls.n	8005f6c <_fwalk_sglue+0x38>
 8005f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f60:	3301      	adds	r3, #1
 8005f62:	d003      	beq.n	8005f6c <_fwalk_sglue+0x38>
 8005f64:	4629      	mov	r1, r5
 8005f66:	4638      	mov	r0, r7
 8005f68:	47c0      	blx	r8
 8005f6a:	4306      	orrs	r6, r0
 8005f6c:	3568      	adds	r5, #104	@ 0x68
 8005f6e:	e7e9      	b.n	8005f44 <_fwalk_sglue+0x10>

08005f70 <iprintf>:
 8005f70:	b40f      	push	{r0, r1, r2, r3}
 8005f72:	b507      	push	{r0, r1, r2, lr}
 8005f74:	4906      	ldr	r1, [pc, #24]	@ (8005f90 <iprintf+0x20>)
 8005f76:	ab04      	add	r3, sp, #16
 8005f78:	6808      	ldr	r0, [r1, #0]
 8005f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7e:	6881      	ldr	r1, [r0, #8]
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	f000 f9e9 	bl	8006358 <_vfiprintf_r>
 8005f86:	b003      	add	sp, #12
 8005f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f8c:	b004      	add	sp, #16
 8005f8e:	4770      	bx	lr
 8005f90:	20000024 	.word	0x20000024

08005f94 <__sread>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	460c      	mov	r4, r1
 8005f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9c:	f000 f868 	bl	8006070 <_read_r>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	bfab      	itete	ge
 8005fa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fa8:	181b      	addge	r3, r3, r0
 8005faa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fae:	bfac      	ite	ge
 8005fb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fb2:	81a3      	strhlt	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__swrite>:
 8005fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fba:	461f      	mov	r7, r3
 8005fbc:	898b      	ldrh	r3, [r1, #12]
 8005fbe:	05db      	lsls	r3, r3, #23
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	d505      	bpl.n	8005fd4 <__swrite+0x1e>
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	2302      	movs	r3, #2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f000 f83c 	bl	800604c <_lseek_r>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	f000 b853 	b.w	8006094 <_write_r>

08005fee <__sseek>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff6:	f000 f829 	bl	800604c <_lseek_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	bf15      	itete	ne
 8006000:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006002:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006006:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800600a:	81a3      	strheq	r3, [r4, #12]
 800600c:	bf18      	it	ne
 800600e:	81a3      	strhne	r3, [r4, #12]
 8006010:	bd10      	pop	{r4, pc}

08006012 <__sclose>:
 8006012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006016:	f000 b809 	b.w	800602c <_close_r>

0800601a <memset>:
 800601a:	4402      	add	r2, r0
 800601c:	4603      	mov	r3, r0
 800601e:	4293      	cmp	r3, r2
 8006020:	d100      	bne.n	8006024 <memset+0xa>
 8006022:	4770      	bx	lr
 8006024:	f803 1b01 	strb.w	r1, [r3], #1
 8006028:	e7f9      	b.n	800601e <memset+0x4>
	...

0800602c <_close_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d06      	ldr	r5, [pc, #24]	@ (8006048 <_close_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	f7fa fe71 	bl	8000d1e <_close>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_close_r+0x1a>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_close_r+0x1a>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000314 	.word	0x20000314

0800604c <_lseek_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	@ (800606c <_lseek_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fa fe86 	bl	8000d6c <_lseek>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_lseek_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_lseek_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000314 	.word	0x20000314

08006070 <_read_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	@ (8006090 <_read_r+0x20>)
 8006074:	4604      	mov	r4, r0
 8006076:	4608      	mov	r0, r1
 8006078:	4611      	mov	r1, r2
 800607a:	2200      	movs	r2, #0
 800607c:	602a      	str	r2, [r5, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7fa fe14 	bl	8000cac <_read>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_read_r+0x1e>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_read_r+0x1e>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	20000314 	.word	0x20000314

08006094 <_write_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d07      	ldr	r5, [pc, #28]	@ (80060b4 <_write_r+0x20>)
 8006098:	4604      	mov	r4, r0
 800609a:	4608      	mov	r0, r1
 800609c:	4611      	mov	r1, r2
 800609e:	2200      	movs	r2, #0
 80060a0:	602a      	str	r2, [r5, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f7fa fe1f 	bl	8000ce6 <_write>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_write_r+0x1e>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_write_r+0x1e>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000314 	.word	0x20000314

080060b8 <__errno>:
 80060b8:	4b01      	ldr	r3, [pc, #4]	@ (80060c0 <__errno+0x8>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000024 	.word	0x20000024

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	@ (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006108 <__libc_init_array+0x44>)
 80060d8:	f000 fdb6 	bl	8006c48 <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
 80060fc:	08006d14 	.word	0x08006d14
 8006100:	08006d14 	.word	0x08006d14
 8006104:	08006d14 	.word	0x08006d14
 8006108:	08006d18 	.word	0x08006d18

0800610c <__retarget_lock_init_recursive>:
 800610c:	4770      	bx	lr

0800610e <__retarget_lock_acquire_recursive>:
 800610e:	4770      	bx	lr

08006110 <__retarget_lock_release_recursive>:
 8006110:	4770      	bx	lr
	...

08006114 <_free_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4605      	mov	r5, r0
 8006118:	2900      	cmp	r1, #0
 800611a:	d041      	beq.n	80061a0 <_free_r+0x8c>
 800611c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006120:	1f0c      	subs	r4, r1, #4
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfb8      	it	lt
 8006126:	18e4      	addlt	r4, r4, r3
 8006128:	f000 f8e0 	bl	80062ec <__malloc_lock>
 800612c:	4a1d      	ldr	r2, [pc, #116]	@ (80061a4 <_free_r+0x90>)
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	b933      	cbnz	r3, 8006140 <_free_r+0x2c>
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	6014      	str	r4, [r2, #0]
 8006136:	4628      	mov	r0, r5
 8006138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800613c:	f000 b8dc 	b.w	80062f8 <__malloc_unlock>
 8006140:	42a3      	cmp	r3, r4
 8006142:	d908      	bls.n	8006156 <_free_r+0x42>
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	1821      	adds	r1, r4, r0
 8006148:	428b      	cmp	r3, r1
 800614a:	bf01      	itttt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	1809      	addeq	r1, r1, r0
 8006152:	6021      	streq	r1, [r4, #0]
 8006154:	e7ed      	b.n	8006132 <_free_r+0x1e>
 8006156:	461a      	mov	r2, r3
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	b10b      	cbz	r3, 8006160 <_free_r+0x4c>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d9fa      	bls.n	8006156 <_free_r+0x42>
 8006160:	6811      	ldr	r1, [r2, #0]
 8006162:	1850      	adds	r0, r2, r1
 8006164:	42a0      	cmp	r0, r4
 8006166:	d10b      	bne.n	8006180 <_free_r+0x6c>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	4401      	add	r1, r0
 800616c:	1850      	adds	r0, r2, r1
 800616e:	4283      	cmp	r3, r0
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	d1e0      	bne.n	8006136 <_free_r+0x22>
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	6053      	str	r3, [r2, #4]
 800617a:	4408      	add	r0, r1
 800617c:	6010      	str	r0, [r2, #0]
 800617e:	e7da      	b.n	8006136 <_free_r+0x22>
 8006180:	d902      	bls.n	8006188 <_free_r+0x74>
 8006182:	230c      	movs	r3, #12
 8006184:	602b      	str	r3, [r5, #0]
 8006186:	e7d6      	b.n	8006136 <_free_r+0x22>
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	1821      	adds	r1, r4, r0
 800618c:	428b      	cmp	r3, r1
 800618e:	bf04      	itt	eq
 8006190:	6819      	ldreq	r1, [r3, #0]
 8006192:	685b      	ldreq	r3, [r3, #4]
 8006194:	6063      	str	r3, [r4, #4]
 8006196:	bf04      	itt	eq
 8006198:	1809      	addeq	r1, r1, r0
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	6054      	str	r4, [r2, #4]
 800619e:	e7ca      	b.n	8006136 <_free_r+0x22>
 80061a0:	bd38      	pop	{r3, r4, r5, pc}
 80061a2:	bf00      	nop
 80061a4:	20000320 	.word	0x20000320

080061a8 <sbrk_aligned>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4e0f      	ldr	r6, [pc, #60]	@ (80061e8 <sbrk_aligned+0x40>)
 80061ac:	460c      	mov	r4, r1
 80061ae:	6831      	ldr	r1, [r6, #0]
 80061b0:	4605      	mov	r5, r0
 80061b2:	b911      	cbnz	r1, 80061ba <sbrk_aligned+0x12>
 80061b4:	f000 fcb4 	bl	8006b20 <_sbrk_r>
 80061b8:	6030      	str	r0, [r6, #0]
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 fcaf 	bl	8006b20 <_sbrk_r>
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d103      	bne.n	80061ce <sbrk_aligned+0x26>
 80061c6:	f04f 34ff 	mov.w	r4, #4294967295
 80061ca:	4620      	mov	r0, r4
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	1cc4      	adds	r4, r0, #3
 80061d0:	f024 0403 	bic.w	r4, r4, #3
 80061d4:	42a0      	cmp	r0, r4
 80061d6:	d0f8      	beq.n	80061ca <sbrk_aligned+0x22>
 80061d8:	1a21      	subs	r1, r4, r0
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 fca0 	bl	8006b20 <_sbrk_r>
 80061e0:	3001      	adds	r0, #1
 80061e2:	d1f2      	bne.n	80061ca <sbrk_aligned+0x22>
 80061e4:	e7ef      	b.n	80061c6 <sbrk_aligned+0x1e>
 80061e6:	bf00      	nop
 80061e8:	2000031c 	.word	0x2000031c

080061ec <_malloc_r>:
 80061ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f0:	1ccd      	adds	r5, r1, #3
 80061f2:	f025 0503 	bic.w	r5, r5, #3
 80061f6:	3508      	adds	r5, #8
 80061f8:	2d0c      	cmp	r5, #12
 80061fa:	bf38      	it	cc
 80061fc:	250c      	movcc	r5, #12
 80061fe:	2d00      	cmp	r5, #0
 8006200:	4606      	mov	r6, r0
 8006202:	db01      	blt.n	8006208 <_malloc_r+0x1c>
 8006204:	42a9      	cmp	r1, r5
 8006206:	d904      	bls.n	8006212 <_malloc_r+0x26>
 8006208:	230c      	movs	r3, #12
 800620a:	6033      	str	r3, [r6, #0]
 800620c:	2000      	movs	r0, #0
 800620e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062e8 <_malloc_r+0xfc>
 8006216:	f000 f869 	bl	80062ec <__malloc_lock>
 800621a:	f8d8 3000 	ldr.w	r3, [r8]
 800621e:	461c      	mov	r4, r3
 8006220:	bb44      	cbnz	r4, 8006274 <_malloc_r+0x88>
 8006222:	4629      	mov	r1, r5
 8006224:	4630      	mov	r0, r6
 8006226:	f7ff ffbf 	bl	80061a8 <sbrk_aligned>
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	4604      	mov	r4, r0
 800622e:	d158      	bne.n	80062e2 <_malloc_r+0xf6>
 8006230:	f8d8 4000 	ldr.w	r4, [r8]
 8006234:	4627      	mov	r7, r4
 8006236:	2f00      	cmp	r7, #0
 8006238:	d143      	bne.n	80062c2 <_malloc_r+0xd6>
 800623a:	2c00      	cmp	r4, #0
 800623c:	d04b      	beq.n	80062d6 <_malloc_r+0xea>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	4639      	mov	r1, r7
 8006242:	4630      	mov	r0, r6
 8006244:	eb04 0903 	add.w	r9, r4, r3
 8006248:	f000 fc6a 	bl	8006b20 <_sbrk_r>
 800624c:	4581      	cmp	r9, r0
 800624e:	d142      	bne.n	80062d6 <_malloc_r+0xea>
 8006250:	6821      	ldr	r1, [r4, #0]
 8006252:	1a6d      	subs	r5, r5, r1
 8006254:	4629      	mov	r1, r5
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff ffa6 	bl	80061a8 <sbrk_aligned>
 800625c:	3001      	adds	r0, #1
 800625e:	d03a      	beq.n	80062d6 <_malloc_r+0xea>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	442b      	add	r3, r5
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	f8d8 3000 	ldr.w	r3, [r8]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	bb62      	cbnz	r2, 80062c8 <_malloc_r+0xdc>
 800626e:	f8c8 7000 	str.w	r7, [r8]
 8006272:	e00f      	b.n	8006294 <_malloc_r+0xa8>
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	1b52      	subs	r2, r2, r5
 8006278:	d420      	bmi.n	80062bc <_malloc_r+0xd0>
 800627a:	2a0b      	cmp	r2, #11
 800627c:	d917      	bls.n	80062ae <_malloc_r+0xc2>
 800627e:	1961      	adds	r1, r4, r5
 8006280:	42a3      	cmp	r3, r4
 8006282:	6025      	str	r5, [r4, #0]
 8006284:	bf18      	it	ne
 8006286:	6059      	strne	r1, [r3, #4]
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	bf08      	it	eq
 800628c:	f8c8 1000 	streq.w	r1, [r8]
 8006290:	5162      	str	r2, [r4, r5]
 8006292:	604b      	str	r3, [r1, #4]
 8006294:	4630      	mov	r0, r6
 8006296:	f000 f82f 	bl	80062f8 <__malloc_unlock>
 800629a:	f104 000b 	add.w	r0, r4, #11
 800629e:	1d23      	adds	r3, r4, #4
 80062a0:	f020 0007 	bic.w	r0, r0, #7
 80062a4:	1ac2      	subs	r2, r0, r3
 80062a6:	bf1c      	itt	ne
 80062a8:	1a1b      	subne	r3, r3, r0
 80062aa:	50a3      	strne	r3, [r4, r2]
 80062ac:	e7af      	b.n	800620e <_malloc_r+0x22>
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	bf0c      	ite	eq
 80062b4:	f8c8 2000 	streq.w	r2, [r8]
 80062b8:	605a      	strne	r2, [r3, #4]
 80062ba:	e7eb      	b.n	8006294 <_malloc_r+0xa8>
 80062bc:	4623      	mov	r3, r4
 80062be:	6864      	ldr	r4, [r4, #4]
 80062c0:	e7ae      	b.n	8006220 <_malloc_r+0x34>
 80062c2:	463c      	mov	r4, r7
 80062c4:	687f      	ldr	r7, [r7, #4]
 80062c6:	e7b6      	b.n	8006236 <_malloc_r+0x4a>
 80062c8:	461a      	mov	r2, r3
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	d1fb      	bne.n	80062c8 <_malloc_r+0xdc>
 80062d0:	2300      	movs	r3, #0
 80062d2:	6053      	str	r3, [r2, #4]
 80062d4:	e7de      	b.n	8006294 <_malloc_r+0xa8>
 80062d6:	230c      	movs	r3, #12
 80062d8:	6033      	str	r3, [r6, #0]
 80062da:	4630      	mov	r0, r6
 80062dc:	f000 f80c 	bl	80062f8 <__malloc_unlock>
 80062e0:	e794      	b.n	800620c <_malloc_r+0x20>
 80062e2:	6005      	str	r5, [r0, #0]
 80062e4:	e7d6      	b.n	8006294 <_malloc_r+0xa8>
 80062e6:	bf00      	nop
 80062e8:	20000320 	.word	0x20000320

080062ec <__malloc_lock>:
 80062ec:	4801      	ldr	r0, [pc, #4]	@ (80062f4 <__malloc_lock+0x8>)
 80062ee:	f7ff bf0e 	b.w	800610e <__retarget_lock_acquire_recursive>
 80062f2:	bf00      	nop
 80062f4:	20000318 	.word	0x20000318

080062f8 <__malloc_unlock>:
 80062f8:	4801      	ldr	r0, [pc, #4]	@ (8006300 <__malloc_unlock+0x8>)
 80062fa:	f7ff bf09 	b.w	8006110 <__retarget_lock_release_recursive>
 80062fe:	bf00      	nop
 8006300:	20000318 	.word	0x20000318

08006304 <__sfputc_r>:
 8006304:	6893      	ldr	r3, [r2, #8]
 8006306:	3b01      	subs	r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	b410      	push	{r4}
 800630c:	6093      	str	r3, [r2, #8]
 800630e:	da08      	bge.n	8006322 <__sfputc_r+0x1e>
 8006310:	6994      	ldr	r4, [r2, #24]
 8006312:	42a3      	cmp	r3, r4
 8006314:	db01      	blt.n	800631a <__sfputc_r+0x16>
 8006316:	290a      	cmp	r1, #10
 8006318:	d103      	bne.n	8006322 <__sfputc_r+0x1e>
 800631a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800631e:	f000 bb6b 	b.w	80069f8 <__swbuf_r>
 8006322:	6813      	ldr	r3, [r2, #0]
 8006324:	1c58      	adds	r0, r3, #1
 8006326:	6010      	str	r0, [r2, #0]
 8006328:	7019      	strb	r1, [r3, #0]
 800632a:	4608      	mov	r0, r1
 800632c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006330:	4770      	bx	lr

08006332 <__sfputs_r>:
 8006332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006334:	4606      	mov	r6, r0
 8006336:	460f      	mov	r7, r1
 8006338:	4614      	mov	r4, r2
 800633a:	18d5      	adds	r5, r2, r3
 800633c:	42ac      	cmp	r4, r5
 800633e:	d101      	bne.n	8006344 <__sfputs_r+0x12>
 8006340:	2000      	movs	r0, #0
 8006342:	e007      	b.n	8006354 <__sfputs_r+0x22>
 8006344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006348:	463a      	mov	r2, r7
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff ffda 	bl	8006304 <__sfputc_r>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d1f3      	bne.n	800633c <__sfputs_r+0xa>
 8006354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006358 <_vfiprintf_r>:
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	460d      	mov	r5, r1
 800635e:	b09d      	sub	sp, #116	@ 0x74
 8006360:	4614      	mov	r4, r2
 8006362:	4698      	mov	r8, r3
 8006364:	4606      	mov	r6, r0
 8006366:	b118      	cbz	r0, 8006370 <_vfiprintf_r+0x18>
 8006368:	6a03      	ldr	r3, [r0, #32]
 800636a:	b90b      	cbnz	r3, 8006370 <_vfiprintf_r+0x18>
 800636c:	f7ff fdca 	bl	8005f04 <__sinit>
 8006370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	d405      	bmi.n	8006382 <_vfiprintf_r+0x2a>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	059a      	lsls	r2, r3, #22
 800637a:	d402      	bmi.n	8006382 <_vfiprintf_r+0x2a>
 800637c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800637e:	f7ff fec6 	bl	800610e <__retarget_lock_acquire_recursive>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	071b      	lsls	r3, r3, #28
 8006386:	d501      	bpl.n	800638c <_vfiprintf_r+0x34>
 8006388:	692b      	ldr	r3, [r5, #16]
 800638a:	b99b      	cbnz	r3, 80063b4 <_vfiprintf_r+0x5c>
 800638c:	4629      	mov	r1, r5
 800638e:	4630      	mov	r0, r6
 8006390:	f000 fb70 	bl	8006a74 <__swsetup_r>
 8006394:	b170      	cbz	r0, 80063b4 <_vfiprintf_r+0x5c>
 8006396:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006398:	07dc      	lsls	r4, r3, #31
 800639a:	d504      	bpl.n	80063a6 <_vfiprintf_r+0x4e>
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	b01d      	add	sp, #116	@ 0x74
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	0598      	lsls	r0, r3, #22
 80063aa:	d4f7      	bmi.n	800639c <_vfiprintf_r+0x44>
 80063ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ae:	f7ff feaf 	bl	8006110 <__retarget_lock_release_recursive>
 80063b2:	e7f3      	b.n	800639c <_vfiprintf_r+0x44>
 80063b4:	2300      	movs	r3, #0
 80063b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b8:	2320      	movs	r3, #32
 80063ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063be:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c2:	2330      	movs	r3, #48	@ 0x30
 80063c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006574 <_vfiprintf_r+0x21c>
 80063c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063cc:	f04f 0901 	mov.w	r9, #1
 80063d0:	4623      	mov	r3, r4
 80063d2:	469a      	mov	sl, r3
 80063d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d8:	b10a      	cbz	r2, 80063de <_vfiprintf_r+0x86>
 80063da:	2a25      	cmp	r2, #37	@ 0x25
 80063dc:	d1f9      	bne.n	80063d2 <_vfiprintf_r+0x7a>
 80063de:	ebba 0b04 	subs.w	fp, sl, r4
 80063e2:	d00b      	beq.n	80063fc <_vfiprintf_r+0xa4>
 80063e4:	465b      	mov	r3, fp
 80063e6:	4622      	mov	r2, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ffa1 	bl	8006332 <__sfputs_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	f000 80a7 	beq.w	8006544 <_vfiprintf_r+0x1ec>
 80063f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f8:	445a      	add	r2, fp
 80063fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80063fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 809f 	beq.w	8006544 <_vfiprintf_r+0x1ec>
 8006406:	2300      	movs	r3, #0
 8006408:	f04f 32ff 	mov.w	r2, #4294967295
 800640c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006410:	f10a 0a01 	add.w	sl, sl, #1
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800641c:	931a      	str	r3, [sp, #104]	@ 0x68
 800641e:	4654      	mov	r4, sl
 8006420:	2205      	movs	r2, #5
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	4853      	ldr	r0, [pc, #332]	@ (8006574 <_vfiprintf_r+0x21c>)
 8006428:	f7f9 fed2 	bl	80001d0 <memchr>
 800642c:	9a04      	ldr	r2, [sp, #16]
 800642e:	b9d8      	cbnz	r0, 8006468 <_vfiprintf_r+0x110>
 8006430:	06d1      	lsls	r1, r2, #27
 8006432:	bf44      	itt	mi
 8006434:	2320      	movmi	r3, #32
 8006436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800643a:	0713      	lsls	r3, r2, #28
 800643c:	bf44      	itt	mi
 800643e:	232b      	movmi	r3, #43	@ 0x2b
 8006440:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006444:	f89a 3000 	ldrb.w	r3, [sl]
 8006448:	2b2a      	cmp	r3, #42	@ 0x2a
 800644a:	d015      	beq.n	8006478 <_vfiprintf_r+0x120>
 800644c:	9a07      	ldr	r2, [sp, #28]
 800644e:	4654      	mov	r4, sl
 8006450:	2000      	movs	r0, #0
 8006452:	f04f 0c0a 	mov.w	ip, #10
 8006456:	4621      	mov	r1, r4
 8006458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645c:	3b30      	subs	r3, #48	@ 0x30
 800645e:	2b09      	cmp	r3, #9
 8006460:	d94b      	bls.n	80064fa <_vfiprintf_r+0x1a2>
 8006462:	b1b0      	cbz	r0, 8006492 <_vfiprintf_r+0x13a>
 8006464:	9207      	str	r2, [sp, #28]
 8006466:	e014      	b.n	8006492 <_vfiprintf_r+0x13a>
 8006468:	eba0 0308 	sub.w	r3, r0, r8
 800646c:	fa09 f303 	lsl.w	r3, r9, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	46a2      	mov	sl, r4
 8006476:	e7d2      	b.n	800641e <_vfiprintf_r+0xc6>
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	1d19      	adds	r1, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	9103      	str	r1, [sp, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfbb      	ittet	lt
 8006484:	425b      	neglt	r3, r3
 8006486:	f042 0202 	orrlt.w	r2, r2, #2
 800648a:	9307      	strge	r3, [sp, #28]
 800648c:	9307      	strlt	r3, [sp, #28]
 800648e:	bfb8      	it	lt
 8006490:	9204      	strlt	r2, [sp, #16]
 8006492:	7823      	ldrb	r3, [r4, #0]
 8006494:	2b2e      	cmp	r3, #46	@ 0x2e
 8006496:	d10a      	bne.n	80064ae <_vfiprintf_r+0x156>
 8006498:	7863      	ldrb	r3, [r4, #1]
 800649a:	2b2a      	cmp	r3, #42	@ 0x2a
 800649c:	d132      	bne.n	8006504 <_vfiprintf_r+0x1ac>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	9203      	str	r2, [sp, #12]
 80064a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064aa:	3402      	adds	r4, #2
 80064ac:	9305      	str	r3, [sp, #20]
 80064ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006584 <_vfiprintf_r+0x22c>
 80064b2:	7821      	ldrb	r1, [r4, #0]
 80064b4:	2203      	movs	r2, #3
 80064b6:	4650      	mov	r0, sl
 80064b8:	f7f9 fe8a 	bl	80001d0 <memchr>
 80064bc:	b138      	cbz	r0, 80064ce <_vfiprintf_r+0x176>
 80064be:	9b04      	ldr	r3, [sp, #16]
 80064c0:	eba0 000a 	sub.w	r0, r0, sl
 80064c4:	2240      	movs	r2, #64	@ 0x40
 80064c6:	4082      	lsls	r2, r0
 80064c8:	4313      	orrs	r3, r2
 80064ca:	3401      	adds	r4, #1
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d2:	4829      	ldr	r0, [pc, #164]	@ (8006578 <_vfiprintf_r+0x220>)
 80064d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064d8:	2206      	movs	r2, #6
 80064da:	f7f9 fe79 	bl	80001d0 <memchr>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d03f      	beq.n	8006562 <_vfiprintf_r+0x20a>
 80064e2:	4b26      	ldr	r3, [pc, #152]	@ (800657c <_vfiprintf_r+0x224>)
 80064e4:	bb1b      	cbnz	r3, 800652e <_vfiprintf_r+0x1d6>
 80064e6:	9b03      	ldr	r3, [sp, #12]
 80064e8:	3307      	adds	r3, #7
 80064ea:	f023 0307 	bic.w	r3, r3, #7
 80064ee:	3308      	adds	r3, #8
 80064f0:	9303      	str	r3, [sp, #12]
 80064f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f4:	443b      	add	r3, r7
 80064f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80064f8:	e76a      	b.n	80063d0 <_vfiprintf_r+0x78>
 80064fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80064fe:	460c      	mov	r4, r1
 8006500:	2001      	movs	r0, #1
 8006502:	e7a8      	b.n	8006456 <_vfiprintf_r+0xfe>
 8006504:	2300      	movs	r3, #0
 8006506:	3401      	adds	r4, #1
 8006508:	9305      	str	r3, [sp, #20]
 800650a:	4619      	mov	r1, r3
 800650c:	f04f 0c0a 	mov.w	ip, #10
 8006510:	4620      	mov	r0, r4
 8006512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006516:	3a30      	subs	r2, #48	@ 0x30
 8006518:	2a09      	cmp	r2, #9
 800651a:	d903      	bls.n	8006524 <_vfiprintf_r+0x1cc>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0c6      	beq.n	80064ae <_vfiprintf_r+0x156>
 8006520:	9105      	str	r1, [sp, #20]
 8006522:	e7c4      	b.n	80064ae <_vfiprintf_r+0x156>
 8006524:	fb0c 2101 	mla	r1, ip, r1, r2
 8006528:	4604      	mov	r4, r0
 800652a:	2301      	movs	r3, #1
 800652c:	e7f0      	b.n	8006510 <_vfiprintf_r+0x1b8>
 800652e:	ab03      	add	r3, sp, #12
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	462a      	mov	r2, r5
 8006534:	4b12      	ldr	r3, [pc, #72]	@ (8006580 <_vfiprintf_r+0x228>)
 8006536:	a904      	add	r1, sp, #16
 8006538:	4630      	mov	r0, r6
 800653a:	f3af 8000 	nop.w
 800653e:	4607      	mov	r7, r0
 8006540:	1c78      	adds	r0, r7, #1
 8006542:	d1d6      	bne.n	80064f2 <_vfiprintf_r+0x19a>
 8006544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006546:	07d9      	lsls	r1, r3, #31
 8006548:	d405      	bmi.n	8006556 <_vfiprintf_r+0x1fe>
 800654a:	89ab      	ldrh	r3, [r5, #12]
 800654c:	059a      	lsls	r2, r3, #22
 800654e:	d402      	bmi.n	8006556 <_vfiprintf_r+0x1fe>
 8006550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006552:	f7ff fddd 	bl	8006110 <__retarget_lock_release_recursive>
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	065b      	lsls	r3, r3, #25
 800655a:	f53f af1f 	bmi.w	800639c <_vfiprintf_r+0x44>
 800655e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006560:	e71e      	b.n	80063a0 <_vfiprintf_r+0x48>
 8006562:	ab03      	add	r3, sp, #12
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	462a      	mov	r2, r5
 8006568:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <_vfiprintf_r+0x228>)
 800656a:	a904      	add	r1, sp, #16
 800656c:	4630      	mov	r0, r6
 800656e:	f000 f879 	bl	8006664 <_printf_i>
 8006572:	e7e4      	b.n	800653e <_vfiprintf_r+0x1e6>
 8006574:	08006cd8 	.word	0x08006cd8
 8006578:	08006ce2 	.word	0x08006ce2
 800657c:	00000000 	.word	0x00000000
 8006580:	08006333 	.word	0x08006333
 8006584:	08006cde 	.word	0x08006cde

08006588 <_printf_common>:
 8006588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	4616      	mov	r6, r2
 800658e:	4698      	mov	r8, r3
 8006590:	688a      	ldr	r2, [r1, #8]
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006598:	4293      	cmp	r3, r2
 800659a:	bfb8      	it	lt
 800659c:	4613      	movlt	r3, r2
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065a4:	4607      	mov	r7, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	b10a      	cbz	r2, 80065ae <_printf_common+0x26>
 80065aa:	3301      	adds	r3, #1
 80065ac:	6033      	str	r3, [r6, #0]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	0699      	lsls	r1, r3, #26
 80065b2:	bf42      	ittt	mi
 80065b4:	6833      	ldrmi	r3, [r6, #0]
 80065b6:	3302      	addmi	r3, #2
 80065b8:	6033      	strmi	r3, [r6, #0]
 80065ba:	6825      	ldr	r5, [r4, #0]
 80065bc:	f015 0506 	ands.w	r5, r5, #6
 80065c0:	d106      	bne.n	80065d0 <_printf_common+0x48>
 80065c2:	f104 0a19 	add.w	sl, r4, #25
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	6832      	ldr	r2, [r6, #0]
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	42ab      	cmp	r3, r5
 80065ce:	dc26      	bgt.n	800661e <_printf_common+0x96>
 80065d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	3b00      	subs	r3, #0
 80065d8:	bf18      	it	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	0692      	lsls	r2, r2, #26
 80065de:	d42b      	bmi.n	8006638 <_printf_common+0xb0>
 80065e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065e4:	4641      	mov	r1, r8
 80065e6:	4638      	mov	r0, r7
 80065e8:	47c8      	blx	r9
 80065ea:	3001      	adds	r0, #1
 80065ec:	d01e      	beq.n	800662c <_printf_common+0xa4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	6922      	ldr	r2, [r4, #16]
 80065f2:	f003 0306 	and.w	r3, r3, #6
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	bf02      	ittt	eq
 80065fa:	68e5      	ldreq	r5, [r4, #12]
 80065fc:	6833      	ldreq	r3, [r6, #0]
 80065fe:	1aed      	subeq	r5, r5, r3
 8006600:	68a3      	ldr	r3, [r4, #8]
 8006602:	bf0c      	ite	eq
 8006604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006608:	2500      	movne	r5, #0
 800660a:	4293      	cmp	r3, r2
 800660c:	bfc4      	itt	gt
 800660e:	1a9b      	subgt	r3, r3, r2
 8006610:	18ed      	addgt	r5, r5, r3
 8006612:	2600      	movs	r6, #0
 8006614:	341a      	adds	r4, #26
 8006616:	42b5      	cmp	r5, r6
 8006618:	d11a      	bne.n	8006650 <_printf_common+0xc8>
 800661a:	2000      	movs	r0, #0
 800661c:	e008      	b.n	8006630 <_printf_common+0xa8>
 800661e:	2301      	movs	r3, #1
 8006620:	4652      	mov	r2, sl
 8006622:	4641      	mov	r1, r8
 8006624:	4638      	mov	r0, r7
 8006626:	47c8      	blx	r9
 8006628:	3001      	adds	r0, #1
 800662a:	d103      	bne.n	8006634 <_printf_common+0xac>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	3501      	adds	r5, #1
 8006636:	e7c6      	b.n	80065c6 <_printf_common+0x3e>
 8006638:	18e1      	adds	r1, r4, r3
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	2030      	movs	r0, #48	@ 0x30
 800663e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006642:	4422      	add	r2, r4
 8006644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800664c:	3302      	adds	r3, #2
 800664e:	e7c7      	b.n	80065e0 <_printf_common+0x58>
 8006650:	2301      	movs	r3, #1
 8006652:	4622      	mov	r2, r4
 8006654:	4641      	mov	r1, r8
 8006656:	4638      	mov	r0, r7
 8006658:	47c8      	blx	r9
 800665a:	3001      	adds	r0, #1
 800665c:	d0e6      	beq.n	800662c <_printf_common+0xa4>
 800665e:	3601      	adds	r6, #1
 8006660:	e7d9      	b.n	8006616 <_printf_common+0x8e>
	...

08006664 <_printf_i>:
 8006664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	7e0f      	ldrb	r7, [r1, #24]
 800666a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800666c:	2f78      	cmp	r7, #120	@ 0x78
 800666e:	4691      	mov	r9, r2
 8006670:	4680      	mov	r8, r0
 8006672:	460c      	mov	r4, r1
 8006674:	469a      	mov	sl, r3
 8006676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800667a:	d807      	bhi.n	800668c <_printf_i+0x28>
 800667c:	2f62      	cmp	r7, #98	@ 0x62
 800667e:	d80a      	bhi.n	8006696 <_printf_i+0x32>
 8006680:	2f00      	cmp	r7, #0
 8006682:	f000 80d1 	beq.w	8006828 <_printf_i+0x1c4>
 8006686:	2f58      	cmp	r7, #88	@ 0x58
 8006688:	f000 80b8 	beq.w	80067fc <_printf_i+0x198>
 800668c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006694:	e03a      	b.n	800670c <_printf_i+0xa8>
 8006696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800669a:	2b15      	cmp	r3, #21
 800669c:	d8f6      	bhi.n	800668c <_printf_i+0x28>
 800669e:	a101      	add	r1, pc, #4	@ (adr r1, 80066a4 <_printf_i+0x40>)
 80066a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	08006711 	.word	0x08006711
 80066ac:	0800668d 	.word	0x0800668d
 80066b0:	0800668d 	.word	0x0800668d
 80066b4:	0800668d 	.word	0x0800668d
 80066b8:	0800668d 	.word	0x0800668d
 80066bc:	08006711 	.word	0x08006711
 80066c0:	0800668d 	.word	0x0800668d
 80066c4:	0800668d 	.word	0x0800668d
 80066c8:	0800668d 	.word	0x0800668d
 80066cc:	0800668d 	.word	0x0800668d
 80066d0:	0800680f 	.word	0x0800680f
 80066d4:	0800673b 	.word	0x0800673b
 80066d8:	080067c9 	.word	0x080067c9
 80066dc:	0800668d 	.word	0x0800668d
 80066e0:	0800668d 	.word	0x0800668d
 80066e4:	08006831 	.word	0x08006831
 80066e8:	0800668d 	.word	0x0800668d
 80066ec:	0800673b 	.word	0x0800673b
 80066f0:	0800668d 	.word	0x0800668d
 80066f4:	0800668d 	.word	0x0800668d
 80066f8:	080067d1 	.word	0x080067d1
 80066fc:	6833      	ldr	r3, [r6, #0]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6032      	str	r2, [r6, #0]
 8006704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800670c:	2301      	movs	r3, #1
 800670e:	e09c      	b.n	800684a <_printf_i+0x1e6>
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	1d19      	adds	r1, r3, #4
 8006716:	6031      	str	r1, [r6, #0]
 8006718:	0606      	lsls	r6, r0, #24
 800671a:	d501      	bpl.n	8006720 <_printf_i+0xbc>
 800671c:	681d      	ldr	r5, [r3, #0]
 800671e:	e003      	b.n	8006728 <_printf_i+0xc4>
 8006720:	0645      	lsls	r5, r0, #25
 8006722:	d5fb      	bpl.n	800671c <_printf_i+0xb8>
 8006724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006728:	2d00      	cmp	r5, #0
 800672a:	da03      	bge.n	8006734 <_printf_i+0xd0>
 800672c:	232d      	movs	r3, #45	@ 0x2d
 800672e:	426d      	negs	r5, r5
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006734:	4858      	ldr	r0, [pc, #352]	@ (8006898 <_printf_i+0x234>)
 8006736:	230a      	movs	r3, #10
 8006738:	e011      	b.n	800675e <_printf_i+0xfa>
 800673a:	6821      	ldr	r1, [r4, #0]
 800673c:	6833      	ldr	r3, [r6, #0]
 800673e:	0608      	lsls	r0, r1, #24
 8006740:	f853 5b04 	ldr.w	r5, [r3], #4
 8006744:	d402      	bmi.n	800674c <_printf_i+0xe8>
 8006746:	0649      	lsls	r1, r1, #25
 8006748:	bf48      	it	mi
 800674a:	b2ad      	uxthmi	r5, r5
 800674c:	2f6f      	cmp	r7, #111	@ 0x6f
 800674e:	4852      	ldr	r0, [pc, #328]	@ (8006898 <_printf_i+0x234>)
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	bf14      	ite	ne
 8006754:	230a      	movne	r3, #10
 8006756:	2308      	moveq	r3, #8
 8006758:	2100      	movs	r1, #0
 800675a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800675e:	6866      	ldr	r6, [r4, #4]
 8006760:	60a6      	str	r6, [r4, #8]
 8006762:	2e00      	cmp	r6, #0
 8006764:	db05      	blt.n	8006772 <_printf_i+0x10e>
 8006766:	6821      	ldr	r1, [r4, #0]
 8006768:	432e      	orrs	r6, r5
 800676a:	f021 0104 	bic.w	r1, r1, #4
 800676e:	6021      	str	r1, [r4, #0]
 8006770:	d04b      	beq.n	800680a <_printf_i+0x1a6>
 8006772:	4616      	mov	r6, r2
 8006774:	fbb5 f1f3 	udiv	r1, r5, r3
 8006778:	fb03 5711 	mls	r7, r3, r1, r5
 800677c:	5dc7      	ldrb	r7, [r0, r7]
 800677e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006782:	462f      	mov	r7, r5
 8006784:	42bb      	cmp	r3, r7
 8006786:	460d      	mov	r5, r1
 8006788:	d9f4      	bls.n	8006774 <_printf_i+0x110>
 800678a:	2b08      	cmp	r3, #8
 800678c:	d10b      	bne.n	80067a6 <_printf_i+0x142>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	07df      	lsls	r7, r3, #31
 8006792:	d508      	bpl.n	80067a6 <_printf_i+0x142>
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	6861      	ldr	r1, [r4, #4]
 8006798:	4299      	cmp	r1, r3
 800679a:	bfde      	ittt	le
 800679c:	2330      	movle	r3, #48	@ 0x30
 800679e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067a6:	1b92      	subs	r2, r2, r6
 80067a8:	6122      	str	r2, [r4, #16]
 80067aa:	f8cd a000 	str.w	sl, [sp]
 80067ae:	464b      	mov	r3, r9
 80067b0:	aa03      	add	r2, sp, #12
 80067b2:	4621      	mov	r1, r4
 80067b4:	4640      	mov	r0, r8
 80067b6:	f7ff fee7 	bl	8006588 <_printf_common>
 80067ba:	3001      	adds	r0, #1
 80067bc:	d14a      	bne.n	8006854 <_printf_i+0x1f0>
 80067be:	f04f 30ff 	mov.w	r0, #4294967295
 80067c2:	b004      	add	sp, #16
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	f043 0320 	orr.w	r3, r3, #32
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	4832      	ldr	r0, [pc, #200]	@ (800689c <_printf_i+0x238>)
 80067d2:	2778      	movs	r7, #120	@ 0x78
 80067d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	6831      	ldr	r1, [r6, #0]
 80067dc:	061f      	lsls	r7, r3, #24
 80067de:	f851 5b04 	ldr.w	r5, [r1], #4
 80067e2:	d402      	bmi.n	80067ea <_printf_i+0x186>
 80067e4:	065f      	lsls	r7, r3, #25
 80067e6:	bf48      	it	mi
 80067e8:	b2ad      	uxthmi	r5, r5
 80067ea:	6031      	str	r1, [r6, #0]
 80067ec:	07d9      	lsls	r1, r3, #31
 80067ee:	bf44      	itt	mi
 80067f0:	f043 0320 	orrmi.w	r3, r3, #32
 80067f4:	6023      	strmi	r3, [r4, #0]
 80067f6:	b11d      	cbz	r5, 8006800 <_printf_i+0x19c>
 80067f8:	2310      	movs	r3, #16
 80067fa:	e7ad      	b.n	8006758 <_printf_i+0xf4>
 80067fc:	4826      	ldr	r0, [pc, #152]	@ (8006898 <_printf_i+0x234>)
 80067fe:	e7e9      	b.n	80067d4 <_printf_i+0x170>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	f023 0320 	bic.w	r3, r3, #32
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	e7f6      	b.n	80067f8 <_printf_i+0x194>
 800680a:	4616      	mov	r6, r2
 800680c:	e7bd      	b.n	800678a <_printf_i+0x126>
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	6825      	ldr	r5, [r4, #0]
 8006812:	6961      	ldr	r1, [r4, #20]
 8006814:	1d18      	adds	r0, r3, #4
 8006816:	6030      	str	r0, [r6, #0]
 8006818:	062e      	lsls	r6, r5, #24
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	d501      	bpl.n	8006822 <_printf_i+0x1be>
 800681e:	6019      	str	r1, [r3, #0]
 8006820:	e002      	b.n	8006828 <_printf_i+0x1c4>
 8006822:	0668      	lsls	r0, r5, #25
 8006824:	d5fb      	bpl.n	800681e <_printf_i+0x1ba>
 8006826:	8019      	strh	r1, [r3, #0]
 8006828:	2300      	movs	r3, #0
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	4616      	mov	r6, r2
 800682e:	e7bc      	b.n	80067aa <_printf_i+0x146>
 8006830:	6833      	ldr	r3, [r6, #0]
 8006832:	1d1a      	adds	r2, r3, #4
 8006834:	6032      	str	r2, [r6, #0]
 8006836:	681e      	ldr	r6, [r3, #0]
 8006838:	6862      	ldr	r2, [r4, #4]
 800683a:	2100      	movs	r1, #0
 800683c:	4630      	mov	r0, r6
 800683e:	f7f9 fcc7 	bl	80001d0 <memchr>
 8006842:	b108      	cbz	r0, 8006848 <_printf_i+0x1e4>
 8006844:	1b80      	subs	r0, r0, r6
 8006846:	6060      	str	r0, [r4, #4]
 8006848:	6863      	ldr	r3, [r4, #4]
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	2300      	movs	r3, #0
 800684e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006852:	e7aa      	b.n	80067aa <_printf_i+0x146>
 8006854:	6923      	ldr	r3, [r4, #16]
 8006856:	4632      	mov	r2, r6
 8006858:	4649      	mov	r1, r9
 800685a:	4640      	mov	r0, r8
 800685c:	47d0      	blx	sl
 800685e:	3001      	adds	r0, #1
 8006860:	d0ad      	beq.n	80067be <_printf_i+0x15a>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	079b      	lsls	r3, r3, #30
 8006866:	d413      	bmi.n	8006890 <_printf_i+0x22c>
 8006868:	68e0      	ldr	r0, [r4, #12]
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	4298      	cmp	r0, r3
 800686e:	bfb8      	it	lt
 8006870:	4618      	movlt	r0, r3
 8006872:	e7a6      	b.n	80067c2 <_printf_i+0x15e>
 8006874:	2301      	movs	r3, #1
 8006876:	4632      	mov	r2, r6
 8006878:	4649      	mov	r1, r9
 800687a:	4640      	mov	r0, r8
 800687c:	47d0      	blx	sl
 800687e:	3001      	adds	r0, #1
 8006880:	d09d      	beq.n	80067be <_printf_i+0x15a>
 8006882:	3501      	adds	r5, #1
 8006884:	68e3      	ldr	r3, [r4, #12]
 8006886:	9903      	ldr	r1, [sp, #12]
 8006888:	1a5b      	subs	r3, r3, r1
 800688a:	42ab      	cmp	r3, r5
 800688c:	dcf2      	bgt.n	8006874 <_printf_i+0x210>
 800688e:	e7eb      	b.n	8006868 <_printf_i+0x204>
 8006890:	2500      	movs	r5, #0
 8006892:	f104 0619 	add.w	r6, r4, #25
 8006896:	e7f5      	b.n	8006884 <_printf_i+0x220>
 8006898:	08006ce9 	.word	0x08006ce9
 800689c:	08006cfa 	.word	0x08006cfa

080068a0 <__sflush_r>:
 80068a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	0716      	lsls	r6, r2, #28
 80068aa:	4605      	mov	r5, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	d454      	bmi.n	800695a <__sflush_r+0xba>
 80068b0:	684b      	ldr	r3, [r1, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dc02      	bgt.n	80068bc <__sflush_r+0x1c>
 80068b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	dd48      	ble.n	800694e <__sflush_r+0xae>
 80068bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d045      	beq.n	800694e <__sflush_r+0xae>
 80068c2:	2300      	movs	r3, #0
 80068c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068c8:	682f      	ldr	r7, [r5, #0]
 80068ca:	6a21      	ldr	r1, [r4, #32]
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	d030      	beq.n	8006932 <__sflush_r+0x92>
 80068d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	0759      	lsls	r1, r3, #29
 80068d6:	d505      	bpl.n	80068e4 <__sflush_r+0x44>
 80068d8:	6863      	ldr	r3, [r4, #4]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068de:	b10b      	cbz	r3, 80068e4 <__sflush_r+0x44>
 80068e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	2300      	movs	r3, #0
 80068e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068e8:	6a21      	ldr	r1, [r4, #32]
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b0      	blx	r6
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	d106      	bne.n	8006902 <__sflush_r+0x62>
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	291d      	cmp	r1, #29
 80068f8:	d82b      	bhi.n	8006952 <__sflush_r+0xb2>
 80068fa:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <__sflush_r+0x104>)
 80068fc:	40ca      	lsrs	r2, r1
 80068fe:	07d6      	lsls	r6, r2, #31
 8006900:	d527      	bpl.n	8006952 <__sflush_r+0xb2>
 8006902:	2200      	movs	r2, #0
 8006904:	6062      	str	r2, [r4, #4]
 8006906:	04d9      	lsls	r1, r3, #19
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	d504      	bpl.n	8006918 <__sflush_r+0x78>
 800690e:	1c42      	adds	r2, r0, #1
 8006910:	d101      	bne.n	8006916 <__sflush_r+0x76>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b903      	cbnz	r3, 8006918 <__sflush_r+0x78>
 8006916:	6560      	str	r0, [r4, #84]	@ 0x54
 8006918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800691a:	602f      	str	r7, [r5, #0]
 800691c:	b1b9      	cbz	r1, 800694e <__sflush_r+0xae>
 800691e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006922:	4299      	cmp	r1, r3
 8006924:	d002      	beq.n	800692c <__sflush_r+0x8c>
 8006926:	4628      	mov	r0, r5
 8006928:	f7ff fbf4 	bl	8006114 <_free_r>
 800692c:	2300      	movs	r3, #0
 800692e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006930:	e00d      	b.n	800694e <__sflush_r+0xae>
 8006932:	2301      	movs	r3, #1
 8006934:	4628      	mov	r0, r5
 8006936:	47b0      	blx	r6
 8006938:	4602      	mov	r2, r0
 800693a:	1c50      	adds	r0, r2, #1
 800693c:	d1c9      	bne.n	80068d2 <__sflush_r+0x32>
 800693e:	682b      	ldr	r3, [r5, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0c6      	beq.n	80068d2 <__sflush_r+0x32>
 8006944:	2b1d      	cmp	r3, #29
 8006946:	d001      	beq.n	800694c <__sflush_r+0xac>
 8006948:	2b16      	cmp	r3, #22
 800694a:	d11e      	bne.n	800698a <__sflush_r+0xea>
 800694c:	602f      	str	r7, [r5, #0]
 800694e:	2000      	movs	r0, #0
 8006950:	e022      	b.n	8006998 <__sflush_r+0xf8>
 8006952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006956:	b21b      	sxth	r3, r3
 8006958:	e01b      	b.n	8006992 <__sflush_r+0xf2>
 800695a:	690f      	ldr	r7, [r1, #16]
 800695c:	2f00      	cmp	r7, #0
 800695e:	d0f6      	beq.n	800694e <__sflush_r+0xae>
 8006960:	0793      	lsls	r3, r2, #30
 8006962:	680e      	ldr	r6, [r1, #0]
 8006964:	bf08      	it	eq
 8006966:	694b      	ldreq	r3, [r1, #20]
 8006968:	600f      	str	r7, [r1, #0]
 800696a:	bf18      	it	ne
 800696c:	2300      	movne	r3, #0
 800696e:	eba6 0807 	sub.w	r8, r6, r7
 8006972:	608b      	str	r3, [r1, #8]
 8006974:	f1b8 0f00 	cmp.w	r8, #0
 8006978:	dde9      	ble.n	800694e <__sflush_r+0xae>
 800697a:	6a21      	ldr	r1, [r4, #32]
 800697c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800697e:	4643      	mov	r3, r8
 8006980:	463a      	mov	r2, r7
 8006982:	4628      	mov	r0, r5
 8006984:	47b0      	blx	r6
 8006986:	2800      	cmp	r0, #0
 8006988:	dc08      	bgt.n	800699c <__sflush_r+0xfc>
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699c:	4407      	add	r7, r0
 800699e:	eba8 0800 	sub.w	r8, r8, r0
 80069a2:	e7e7      	b.n	8006974 <__sflush_r+0xd4>
 80069a4:	20400001 	.word	0x20400001

080069a8 <_fflush_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	690b      	ldr	r3, [r1, #16]
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b913      	cbnz	r3, 80069b8 <_fflush_r+0x10>
 80069b2:	2500      	movs	r5, #0
 80069b4:	4628      	mov	r0, r5
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	b118      	cbz	r0, 80069c2 <_fflush_r+0x1a>
 80069ba:	6a03      	ldr	r3, [r0, #32]
 80069bc:	b90b      	cbnz	r3, 80069c2 <_fflush_r+0x1a>
 80069be:	f7ff faa1 	bl	8005f04 <__sinit>
 80069c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f3      	beq.n	80069b2 <_fflush_r+0xa>
 80069ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069cc:	07d0      	lsls	r0, r2, #31
 80069ce:	d404      	bmi.n	80069da <_fflush_r+0x32>
 80069d0:	0599      	lsls	r1, r3, #22
 80069d2:	d402      	bmi.n	80069da <_fflush_r+0x32>
 80069d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069d6:	f7ff fb9a 	bl	800610e <__retarget_lock_acquire_recursive>
 80069da:	4628      	mov	r0, r5
 80069dc:	4621      	mov	r1, r4
 80069de:	f7ff ff5f 	bl	80068a0 <__sflush_r>
 80069e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069e4:	07da      	lsls	r2, r3, #31
 80069e6:	4605      	mov	r5, r0
 80069e8:	d4e4      	bmi.n	80069b4 <_fflush_r+0xc>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	059b      	lsls	r3, r3, #22
 80069ee:	d4e1      	bmi.n	80069b4 <_fflush_r+0xc>
 80069f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069f2:	f7ff fb8d 	bl	8006110 <__retarget_lock_release_recursive>
 80069f6:	e7dd      	b.n	80069b4 <_fflush_r+0xc>

080069f8 <__swbuf_r>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	460e      	mov	r6, r1
 80069fc:	4614      	mov	r4, r2
 80069fe:	4605      	mov	r5, r0
 8006a00:	b118      	cbz	r0, 8006a0a <__swbuf_r+0x12>
 8006a02:	6a03      	ldr	r3, [r0, #32]
 8006a04:	b90b      	cbnz	r3, 8006a0a <__swbuf_r+0x12>
 8006a06:	f7ff fa7d 	bl	8005f04 <__sinit>
 8006a0a:	69a3      	ldr	r3, [r4, #24]
 8006a0c:	60a3      	str	r3, [r4, #8]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	071a      	lsls	r2, r3, #28
 8006a12:	d501      	bpl.n	8006a18 <__swbuf_r+0x20>
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	b943      	cbnz	r3, 8006a2a <__swbuf_r+0x32>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 f82a 	bl	8006a74 <__swsetup_r>
 8006a20:	b118      	cbz	r0, 8006a2a <__swbuf_r+0x32>
 8006a22:	f04f 37ff 	mov.w	r7, #4294967295
 8006a26:	4638      	mov	r0, r7
 8006a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	6922      	ldr	r2, [r4, #16]
 8006a2e:	1a98      	subs	r0, r3, r2
 8006a30:	6963      	ldr	r3, [r4, #20]
 8006a32:	b2f6      	uxtb	r6, r6
 8006a34:	4283      	cmp	r3, r0
 8006a36:	4637      	mov	r7, r6
 8006a38:	dc05      	bgt.n	8006a46 <__swbuf_r+0x4e>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f7ff ffb3 	bl	80069a8 <_fflush_r>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d1ed      	bne.n	8006a22 <__swbuf_r+0x2a>
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	60a3      	str	r3, [r4, #8]
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	6022      	str	r2, [r4, #0]
 8006a52:	701e      	strb	r6, [r3, #0]
 8006a54:	6962      	ldr	r2, [r4, #20]
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d004      	beq.n	8006a66 <__swbuf_r+0x6e>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	07db      	lsls	r3, r3, #31
 8006a60:	d5e1      	bpl.n	8006a26 <__swbuf_r+0x2e>
 8006a62:	2e0a      	cmp	r6, #10
 8006a64:	d1df      	bne.n	8006a26 <__swbuf_r+0x2e>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f7ff ff9d 	bl	80069a8 <_fflush_r>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d0d9      	beq.n	8006a26 <__swbuf_r+0x2e>
 8006a72:	e7d6      	b.n	8006a22 <__swbuf_r+0x2a>

08006a74 <__swsetup_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4b29      	ldr	r3, [pc, #164]	@ (8006b1c <__swsetup_r+0xa8>)
 8006a78:	4605      	mov	r5, r0
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	b118      	cbz	r0, 8006a88 <__swsetup_r+0x14>
 8006a80:	6a03      	ldr	r3, [r0, #32]
 8006a82:	b90b      	cbnz	r3, 8006a88 <__swsetup_r+0x14>
 8006a84:	f7ff fa3e 	bl	8005f04 <__sinit>
 8006a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8c:	0719      	lsls	r1, r3, #28
 8006a8e:	d422      	bmi.n	8006ad6 <__swsetup_r+0x62>
 8006a90:	06da      	lsls	r2, r3, #27
 8006a92:	d407      	bmi.n	8006aa4 <__swsetup_r+0x30>
 8006a94:	2209      	movs	r2, #9
 8006a96:	602a      	str	r2, [r5, #0]
 8006a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa2:	e033      	b.n	8006b0c <__swsetup_r+0x98>
 8006aa4:	0758      	lsls	r0, r3, #29
 8006aa6:	d512      	bpl.n	8006ace <__swsetup_r+0x5a>
 8006aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aaa:	b141      	cbz	r1, 8006abe <__swsetup_r+0x4a>
 8006aac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	d002      	beq.n	8006aba <__swsetup_r+0x46>
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f7ff fb2d 	bl	8006114 <_free_r>
 8006aba:	2300      	movs	r3, #0
 8006abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f043 0308 	orr.w	r3, r3, #8
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	b94b      	cbnz	r3, 8006aee <__swsetup_r+0x7a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae4:	d003      	beq.n	8006aee <__swsetup_r+0x7a>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 f84f 	bl	8006b8c <__smakebuf_r>
 8006aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af2:	f013 0201 	ands.w	r2, r3, #1
 8006af6:	d00a      	beq.n	8006b0e <__swsetup_r+0x9a>
 8006af8:	2200      	movs	r2, #0
 8006afa:	60a2      	str	r2, [r4, #8]
 8006afc:	6962      	ldr	r2, [r4, #20]
 8006afe:	4252      	negs	r2, r2
 8006b00:	61a2      	str	r2, [r4, #24]
 8006b02:	6922      	ldr	r2, [r4, #16]
 8006b04:	b942      	cbnz	r2, 8006b18 <__swsetup_r+0xa4>
 8006b06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b0a:	d1c5      	bne.n	8006a98 <__swsetup_r+0x24>
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
 8006b0e:	0799      	lsls	r1, r3, #30
 8006b10:	bf58      	it	pl
 8006b12:	6962      	ldrpl	r2, [r4, #20]
 8006b14:	60a2      	str	r2, [r4, #8]
 8006b16:	e7f4      	b.n	8006b02 <__swsetup_r+0x8e>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e7f7      	b.n	8006b0c <__swsetup_r+0x98>
 8006b1c:	20000024 	.word	0x20000024

08006b20 <_sbrk_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d06      	ldr	r5, [pc, #24]	@ (8006b3c <_sbrk_r+0x1c>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fa f92c 	bl	8000d88 <_sbrk>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_sbrk_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_sbrk_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000314 	.word	0x20000314

08006b40 <__swhatbuf_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	460c      	mov	r4, r1
 8006b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	b096      	sub	sp, #88	@ 0x58
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	461e      	mov	r6, r3
 8006b50:	da0d      	bge.n	8006b6e <__swhatbuf_r+0x2e>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b58:	f04f 0100 	mov.w	r1, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2340      	movne	r3, #64	@ 0x40
 8006b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b64:	2000      	movs	r0, #0
 8006b66:	6031      	str	r1, [r6, #0]
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	b016      	add	sp, #88	@ 0x58
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	466a      	mov	r2, sp
 8006b70:	f000 f848 	bl	8006c04 <_fstat_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	dbec      	blt.n	8006b52 <__swhatbuf_r+0x12>
 8006b78:	9901      	ldr	r1, [sp, #4]
 8006b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b82:	4259      	negs	r1, r3
 8006b84:	4159      	adcs	r1, r3
 8006b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b8a:	e7eb      	b.n	8006b64 <__swhatbuf_r+0x24>

08006b8c <__smakebuf_r>:
 8006b8c:	898b      	ldrh	r3, [r1, #12]
 8006b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b90:	079d      	lsls	r5, r3, #30
 8006b92:	4606      	mov	r6, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	d507      	bpl.n	8006ba8 <__smakebuf_r+0x1c>
 8006b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	6163      	str	r3, [r4, #20]
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba8:	ab01      	add	r3, sp, #4
 8006baa:	466a      	mov	r2, sp
 8006bac:	f7ff ffc8 	bl	8006b40 <__swhatbuf_r>
 8006bb0:	9f00      	ldr	r7, [sp, #0]
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff fb18 	bl	80061ec <_malloc_r>
 8006bbc:	b948      	cbnz	r0, 8006bd2 <__smakebuf_r+0x46>
 8006bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc2:	059a      	lsls	r2, r3, #22
 8006bc4:	d4ee      	bmi.n	8006ba4 <__smakebuf_r+0x18>
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	f043 0302 	orr.w	r3, r3, #2
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	e7e2      	b.n	8006b98 <__smakebuf_r+0xc>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	6020      	str	r0, [r4, #0]
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006be2:	b15b      	cbz	r3, 8006bfc <__smakebuf_r+0x70>
 8006be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be8:	4630      	mov	r0, r6
 8006bea:	f000 f81d 	bl	8006c28 <_isatty_r>
 8006bee:	b128      	cbz	r0, 8006bfc <__smakebuf_r+0x70>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	431d      	orrs	r5, r3
 8006c00:	81a5      	strh	r5, [r4, #12]
 8006c02:	e7cf      	b.n	8006ba4 <__smakebuf_r+0x18>

08006c04 <_fstat_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	@ (8006c24 <_fstat_r+0x20>)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	f7fa f890 	bl	8000d36 <_fstat>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d102      	bne.n	8006c20 <_fstat_r+0x1c>
 8006c1a:	682b      	ldr	r3, [r5, #0]
 8006c1c:	b103      	cbz	r3, 8006c20 <_fstat_r+0x1c>
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	bd38      	pop	{r3, r4, r5, pc}
 8006c22:	bf00      	nop
 8006c24:	20000314 	.word	0x20000314

08006c28 <_isatty_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d06      	ldr	r5, [pc, #24]	@ (8006c44 <_isatty_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fa f88f 	bl	8000d56 <_isatty>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_isatty_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_isatty_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	20000314 	.word	0x20000314

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
