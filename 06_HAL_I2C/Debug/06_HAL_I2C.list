
06_HAL_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005140  08005140  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005148  08005148  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005148  08005148  00006148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800514c  0800514c  0000614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005150  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000074  080051c4  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080051c4  0000732c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc20  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e89  00000000  00000000  00014cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00016b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ac  00000000  00000000  000177d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e0d  00000000  00000000  0001817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4b2  00000000  00000000  0003ef89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec4ab  00000000  00000000  0004e43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a8e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b04  00000000  00000000  0013a92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800506c 	.word	0x0800506c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800506c 	.word	0x0800506c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:

uint8_t txData[] = "HELLO_I2C";
uint8_t rxData[20];
int count = 0;
int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f003 f8c1 	bl	8003734 <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000138 	.word	0x20000138

080005c0 <main>:
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fbfd 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f85d 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f95d 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f92b 	bl	800082c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005d6:	f000 f8a9 	bl	800072c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005da:	f000 f8e7 	bl	80007ac <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
     // --- Step 1: Slave waits to receive ---
     if (HAL_I2C_Slave_Receive(&hi2c2, rxData, sizeof(txData), HAL_MAX_DELAY) != HAL_OK)
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	220a      	movs	r2, #10
 80005e4:	491e      	ldr	r1, [pc, #120]	@ (8000660 <main+0xa0>)
 80005e6:	481f      	ldr	r0, [pc, #124]	@ (8000664 <main+0xa4>)
 80005e8:	f001 f8e8 	bl	80017bc <HAL_I2C_Slave_Receive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d009      	beq.n	8000606 <main+0x46>
     {
       //printf("Slave Receive error: %lu\r\n", HAL_I2C_GetError(&hi2c2));
    	 count = 1;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <main+0xa8>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
       HAL_UART_Transmit(&huart2, (uint8_t*)"I2C slave", 10, HAL_MAX_DELAY);
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	220a      	movs	r2, #10
 80005fe:	491b      	ldr	r1, [pc, #108]	@ (800066c <main+0xac>)
 8000600:	481b      	ldr	r0, [pc, #108]	@ (8000670 <main+0xb0>)
 8000602:	f003 f897 	bl	8003734 <HAL_UART_Transmit>
     }

     // --- Step 2: Master sends ---
     if (HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS, txData, sizeof(txData), HAL_MAX_DELAY) != HAL_OK)
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	230a      	movs	r3, #10
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <main+0xb4>)
 8000610:	2178      	movs	r1, #120	@ 0x78
 8000612:	4819      	ldr	r0, [pc, #100]	@ (8000678 <main+0xb8>)
 8000614:	f000 ffba 	bl	800158c <HAL_I2C_Master_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d009      	beq.n	8000632 <main+0x72>
     {
       //printf("Master Transmit error: %lu\r\n", HAL_I2C_GetError(&hi2c1));
    	 count = 2;
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <main+0xa8>)
 8000620:	2202      	movs	r2, #2
 8000622:	601a      	str	r2, [r3, #0]
       HAL_UART_Transmit(&huart2, (uint8_t*)"I2C master", 11, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	220b      	movs	r2, #11
 800062a:	4914      	ldr	r1, [pc, #80]	@ (800067c <main+0xbc>)
 800062c:	4810      	ldr	r0, [pc, #64]	@ (8000670 <main+0xb0>)
 800062e:	f003 f881 	bl	8003734 <HAL_UART_Transmit>
     }

     // --- Step 3: Check ---
     if (memcmp(txData, rxData, sizeof(txData)) == 0)
 8000632:	220a      	movs	r2, #10
 8000634:	490a      	ldr	r1, [pc, #40]	@ (8000660 <main+0xa0>)
 8000636:	480f      	ldr	r0, [pc, #60]	@ (8000674 <main+0xb4>)
 8000638:	f003 fef1 	bl	800441e <memcmp>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <main+0x8c>
     {
       printf("I2C OK: %s\r\n", rxData);
 8000642:	4907      	ldr	r1, [pc, #28]	@ (8000660 <main+0xa0>)
 8000644:	480e      	ldr	r0, [pc, #56]	@ (8000680 <main+0xc0>)
 8000646:	f003 fe95 	bl	8004374 <iprintf>
 800064a:	e004      	b.n	8000656 <main+0x96>
     }
     else
     {
       printf("Mismatch! TX=%s RX=%s\r\n", txData, rxData);
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <main+0xa0>)
 800064e:	4909      	ldr	r1, [pc, #36]	@ (8000674 <main+0xb4>)
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <main+0xc4>)
 8000652:	f003 fe8f 	bl	8004374 <iprintf>
     }

     HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065a:	f000 fc2f 	bl	8000ebc <HAL_Delay>
     if (HAL_I2C_Slave_Receive(&hi2c2, rxData, sizeof(txData), HAL_MAX_DELAY) != HAL_OK)
 800065e:	e7be      	b.n	80005de <main+0x1e>
 8000660:	200001c0 	.word	0x200001c0
 8000664:	200000e4 	.word	0x200000e4
 8000668:	200001d4 	.word	0x200001d4
 800066c:	08005084 	.word	0x08005084
 8000670:	20000138 	.word	0x20000138
 8000674:	20000000 	.word	0x20000000
 8000678:	20000090 	.word	0x20000090
 800067c:	08005090 	.word	0x08005090
 8000680:	0800509c 	.word	0x0800509c
 8000684:	080050ac 	.word	0x080050ac

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2244      	movs	r2, #68	@ 0x44
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fed1 	bl	800443e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f001 fce1 	bl	8002074 <HAL_PWREx_ControlVoltageScaling>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b8:	f000 f94e 	bl	8000958 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	2310      	movs	r3, #16
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ce:	2302      	movs	r3, #2
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006d6:	230a      	movs	r3, #10
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fd18 	bl	8002120 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006f6:	f000 f92f 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	2104      	movs	r1, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f002 f8e0 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071e:	f000 f91b 	bl	8000958 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3758      	adds	r7, #88	@ 0x58
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f000 fe74 	bl	8001454 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f8f1 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f001 fbd5 	bl	8001f28 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f8e8 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f001 fc17 	bl	8001fbe <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f8df 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40005400 	.word	0x40005400
 80007a8:	10d19ce4 	.word	0x10d19ce4

080007ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_I2C2_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000828 <MX_I2C2_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = SLAVE_ADDRESS;
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007be:	2278      	movs	r2, #120	@ 0x78
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007e8:	f000 fe34 	bl	8001454 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 f8b1 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007fa:	f001 fb95 	bl	8001f28 <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f8a8 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_I2C2_Init+0x74>)
 800080c:	f001 fbd7 	bl	8001fbe <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f89f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000e4 	.word	0x200000e4
 8000824:	40005800 	.word	0x40005800
 8000828:	10d19ce4 	.word	0x10d19ce4

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <MX_USART2_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART2_UART_Init+0x58>)
 8000870:	f002 ff12 	bl	8003698 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f86d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000138 	.word	0x20000138
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a24      	ldr	r2, [pc, #144]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a18      	ldr	r2, [pc, #96]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_GPIO_Init+0xc4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f000 fd8b 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000914:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <MX_GPIO_Init+0xc8>)
 8000926:	f000 fbd3 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800092a:	2320      	movs	r3, #32
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f000 fbc4 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	48000800 	.word	0x48000800

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	@ 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	@ 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0ae      	sub	sp, #184	@ 0xb8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	2288      	movs	r2, #136	@ 0x88
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fd36 	bl	800443e <memset>
  if(hi2c->Instance==I2C1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a42      	ldr	r2, [pc, #264]	@ (8000ae0 <HAL_I2C_MspInit+0x134>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13b      	bne.n	8000a54 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 f999 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009f4:	f7ff ffb0 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a39      	ldr	r2, [pc, #228]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b37      	ldr	r3, [pc, #220]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a10:	23c0      	movs	r3, #192	@ 0xc0
 8000a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a32:	4619      	mov	r1, r3
 8000a34:	482c      	ldr	r0, [pc, #176]	@ (8000ae8 <HAL_I2C_MspInit+0x13c>)
 8000a36:	f000 fb4b 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a46:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a52:	e040      	b.n	8000ad6 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a24      	ldr	r2, [pc, #144]	@ (8000aec <HAL_I2C_MspInit+0x140>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d13b      	bne.n	8000ad6 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 f958 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000a76:	f7ff ff6f 	bl	8000958 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aac:	2304      	movs	r3, #4
 8000aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <HAL_I2C_MspInit+0x13c>)
 8000aba:	f000 fb09 	bl	80010d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_I2C_MspInit+0x138>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
}
 8000ad6:	bf00      	nop
 8000ad8:	37b8      	adds	r7, #184	@ 0xb8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	40005800 	.word	0x40005800

08000af0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ac      	sub	sp, #176	@ 0xb0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2288      	movs	r2, #136	@ 0x88
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fc94 	bl	800443e <memset>
  if(huart->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ba0 <HAL_UART_MspInit+0xb0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d13b      	bne.n	8000b98 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 f8f7 	bl	8002d20 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b38:	f7ff ff0e 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b40:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b58:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 fa9c 	bl	80010d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b98:	bf00      	nop
 8000b9a:	37b0      	adds	r7, #176	@ 0xb0
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 f93d 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e00a      	b.n	8000c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c18:	f3af 8000 	nop.w
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	60ba      	str	r2, [r7, #8]
 8000c24:	b2ca      	uxtb	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbf0      	blt.n	8000c18 <_read+0x12>
  }

  return len;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e009      	b.n	8000c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fc9e 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf1      	blt.n	8000c52 <_write+0x12>
  }
  return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_close>:

int _close(int file)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_isatty>:

int _isatty(int file)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fbe4 	bl	80044dc <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20018000 	.word	0x20018000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200001d8 	.word	0x200001d8
 8000d48:	20000330 	.word	0x20000330

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fba3 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fc0d 	bl	80005c0 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000db4:	08005150 	.word	0x08005150
  ldr r2, =_sbss
 8000db8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dbc:	2000032c 	.word	0x2000032c

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <HAL_Init+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e00 <HAL_Init+0x3c>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f000 f944 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f80f 	bl	8000e04 <HAL_InitTick>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	e001      	b.n	8000df6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df2:	f7ff fdb7 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <HAL_InitTick+0x6c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d023      	beq.n	8000e60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_InitTick+0x70>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_InitTick+0x6c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f941 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d809      	bhi.n	8000e54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f919 	bl	800107e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_InitTick+0x74>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e007      	b.n	8000e64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e004      	b.n	8000e64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e001      	b.n	8000e64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000014 	.word	0x20000014
 8000e74:	2000000c 	.word	0x2000000c
 8000e78:	20000010 	.word	0x20000010

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000014 	.word	0x20000014
 8000ea0:	200001dc 	.word	0x200001dc

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001dc 	.word	0x200001dc

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000014 	.word	0x20000014

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	@ 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff47 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff5c 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff8e 	bl	8000fbc <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5d 	bl	8000f68 <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffb0 	bl	8001024 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e17f      	b.n	80013e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8171 	beq.w	80013da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x40>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 0201 	and.w	r2, r3, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b03      	cmp	r3, #3
 800117c:	d118      	bne.n	80011b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80ac 	beq.w	80013da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b5f      	ldr	r3, [pc, #380]	@ (8001400 <HAL_GPIO_Init+0x330>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	4a5e      	ldr	r2, [pc, #376]	@ (8001400 <HAL_GPIO_Init+0x330>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6613      	str	r3, [r2, #96]	@ 0x60
 800128e:	4b5c      	ldr	r3, [pc, #368]	@ (8001400 <HAL_GPIO_Init+0x330>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129a:	4a5a      	ldr	r2, [pc, #360]	@ (8001404 <HAL_GPIO_Init+0x334>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x242>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001408 <HAL_GPIO_Init+0x338>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x23e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	@ (800140c <HAL_GPIO_Init+0x33c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x23a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001410 <HAL_GPIO_Init+0x340>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x236>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x344>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x232>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_GPIO_Init+0x348>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x22e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4a      	ldr	r2, [pc, #296]	@ (800141c <HAL_GPIO_Init+0x34c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x22a>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00c      	b.n	8001314 <HAL_GPIO_Init+0x244>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00a      	b.n	8001314 <HAL_GPIO_Init+0x244>
 80012fe:	2305      	movs	r3, #5
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x244>
 8001302:	2304      	movs	r3, #4
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x244>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x244>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x244>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x244>
 8001312:	2300      	movs	r3, #0
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001324:	4937      	ldr	r1, [pc, #220]	@ (8001404 <HAL_GPIO_Init+0x334>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_GPIO_Init+0x350>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001356:	4a32      	ldr	r2, [pc, #200]	@ (8001420 <HAL_GPIO_Init+0x350>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800135c:	4b30      	ldr	r3, [pc, #192]	@ (8001420 <HAL_GPIO_Init+0x350>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001380:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <HAL_GPIO_Init+0x350>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <HAL_GPIO_Init+0x350>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001420 <HAL_GPIO_Init+0x350>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_GPIO_Init+0x350>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d4:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <HAL_GPIO_Init+0x350>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae78 	bne.w	80010e0 <HAL_GPIO_Init+0x10>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000800 	.word	0x48000800
 8001410:	48000c00 	.word	0x48000c00
 8001414:	48001000 	.word	0x48001000
 8001418:	48001400 	.word	0x48001400
 800141c:	48001800 	.word	0x48001800
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e002      	b.n	8001448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e08d      	b.n	8001582 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fa96 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	e006      	b.n	80014dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80014da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d108      	bne.n	80014f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	e007      	b.n	8001506 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001504:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001518:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001528:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69d9      	ldr	r1, [r3, #28]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	817b      	strh	r3, [r7, #10]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	f040 80fd 	bne.w	80017a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_I2C_Master_Transmit+0x30>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e0f6      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015c4:	f7ff fc6e 	bl	8000ea4 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2319      	movs	r3, #25
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fa24 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0e1      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2221      	movs	r2, #33	@ 0x21
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2210      	movs	r2, #16
 80015f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	893a      	ldrh	r2, [r7, #8]
 8001606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001612:	b29b      	uxth	r3, r3
 8001614:	2bff      	cmp	r3, #255	@ 0xff
 8001616:	d906      	bls.n	8001626 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	22ff      	movs	r2, #255	@ 0xff
 800161c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800161e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e007      	b.n	8001636 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001634:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800163a:	2b00      	cmp	r3, #0
 800163c:	d024      	beq.n	8001688 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	8979      	ldrh	r1, [r7, #10]
 800167a:	4b4e      	ldr	r3, [pc, #312]	@ (80017b4 <HAL_I2C_Master_Transmit+0x228>)
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fc1f 	bl	8001ec4 <I2C_TransferConfig>
 8001686:	e066      	b.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	b2da      	uxtb	r2, r3
 800168e:	8979      	ldrh	r1, [r7, #10]
 8001690:	4b48      	ldr	r3, [pc, #288]	@ (80017b4 <HAL_I2C_Master_Transmit+0x228>)
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 fc14 	bl	8001ec4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800169c:	e05b      	b.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fa17 	bl	8001ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07b      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d034      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d130      	bne.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	2200      	movs	r2, #0
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f990 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e04d      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	2bff      	cmp	r3, #255	@ 0xff
 8001716:	d90e      	bls.n	8001736 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	22ff      	movs	r2, #255	@ 0xff
 800171c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	2300      	movs	r3, #0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 fbc8 	bl	8001ec4 <I2C_TransferConfig>
 8001734:	e00f      	b.n	8001756 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001744:	b2da      	uxtb	r2, r3
 8001746:	8979      	ldrh	r1, [r7, #10]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fbb7 	bl	8001ec4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d19e      	bne.n	800169e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	6a39      	ldr	r1, [r7, #32]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 f9fd 	bl	8001b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e01a      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2220      	movs	r2, #32
 800177a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6859      	ldr	r1, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_I2C_Master_Transmit+0x22c>)
 8001788:	400b      	ands	r3, r1
 800178a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	80002000 	.word	0x80002000
 80017b8:	fe00e800 	.word	0xfe00e800

080017bc <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	f040 80fc 	bne.w	80019d2 <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <HAL_I2C_Slave_Receive+0x2a>
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0f0      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_I2C_Slave_Receive+0x44>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0e9      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001808:	f7ff fb4c 	bl	8000ea4 <HAL_GetTick>
 800180c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2222      	movs	r2, #34	@ 0x22
 8001812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferISR   = NULL;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800184e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	2108      	movs	r1, #8
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f8e2 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001874:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0ac      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2208      	movs	r2, #8
 8001880:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f8c8 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d054      	beq.n	8001944 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018a8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e092      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f99a 	bl	8001bec <I2C_WaitOnRXNEFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d029      	beq.n	8001912 <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018cc:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d118      	bne.n	800190e <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24

          hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	@ 0x2a
          hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }

        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e060      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1af      	bne.n	80018ae <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f906 	bl	8001b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e030      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2220      	movs	r2, #32
 8001978:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f84c 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019a0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e016      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	619a      	str	r2, [r3, #24]
  }
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a34:	e03b      	b.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f962 	bl	8001d04 <I2C_IsErrorOccurred>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d02d      	beq.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7ff fa27 	bl	8000ea4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d122      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d113      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d0b4      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ae2:	e033      	b.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f90b 	bl	8001d04 <I2C_IsErrorOccurred>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e031      	b.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afe:	d025      	beq.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b00:	f7ff f9d0 	bl	8000ea4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d302      	bcc.n	8001b16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11a      	bne.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d013      	beq.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e007      	b.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d1c4      	bne.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b70:	e02f      	b.n	8001bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f8c4 	bl	8001d04 <I2C_IsErrorOccurred>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e02d      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7ff f98d 	bl	8000ea4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11a      	bne.n	8001bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d013      	beq.n	8001bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f043 0220 	orr.w	r2, r3, #32
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e007      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d1c8      	bne.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001bfc:	e071      	b.n	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f87e 	bl	8001d04 <I2C_IsErrorOccurred>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d13b      	bne.n	8001c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d138      	bne.n	8001c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d105      	bne.n	8001c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d121      	bne.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2210      	movs	r2, #16
 8001c54:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2220      	movs	r2, #32
 8001c62:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001c70:	400b      	ands	r3, r1
 8001c72:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	75fb      	strb	r3, [r7, #23]
 8001c90:	e002      	b.n	8001c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001c98:	f7ff f904 	bl	8000ea4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d302      	bcc.n	8001cae <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d119      	bne.n	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d116      	bne.n	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d00f      	beq.n	8001ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d002      	beq.n	8001cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d083      	beq.n	8001bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	fe00e800 	.word	0xfe00e800

08001d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d068      	beq.n	8001e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2210      	movs	r2, #16
 8001d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d38:	e049      	b.n	8001dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d045      	beq.n	8001dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff f8af 	bl	8000ea4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_IsErrorOccurred+0x54>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d13a      	bne.n	8001dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d7a:	d121      	bne.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d82:	d01d      	beq.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d01a      	beq.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d9a:	f7ff f883 	bl	8000ea4 <HAL_GetTick>
 8001d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da0:	e00e      	b.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001da2:	f7ff f87f 	bl	8000ea4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b19      	cmp	r3, #25
 8001dae:	d907      	bls.n	8001dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f043 0320 	orr.w	r3, r3, #32
 8001db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001dbe:	e006      	b.n	8001dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d1e9      	bne.n	8001da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d003      	beq.n	8001de4 <I2C_IsErrorOccurred+0xe0>
 8001ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0aa      	beq.n	8001d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01c      	beq.n	8001eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fdaf 	bl	80019dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <I2C_IsErrorOccurred+0x1bc>)
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001edc:	7a7b      	ldrb	r3, [r7, #9]
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ef2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	0d5b      	lsrs	r3, r3, #21
 8001efe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <I2C_TransferConfig+0x60>)
 8001f04:	430b      	orrs	r3, r1
 8001f06:	43db      	mvns	r3, r3
 8001f08:	ea02 0103 	and.w	r1, r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	03ff63ff 	.word	0x03ff63ff

08001f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d138      	bne.n	8001fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e032      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	@ 0x24
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d139      	bne.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e033      	b.n	800204a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2224      	movs	r2, #36	@ 0x24
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e000      	b.n	800204a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
  }
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <HAL_PWREx_GetVoltageRange+0x18>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000

08002074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002082:	d130      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800208c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002090:	d038      	beq.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800209a:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2232      	movs	r2, #50	@ 0x32
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9b      	lsrs	r3, r3, #18
 80020b4:	3301      	adds	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b8:	e002      	b.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3b01      	subs	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c0:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020cc:	d102      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f2      	bne.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e0:	d110      	bne.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e00f      	b.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f2:	d007      	beq.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fc:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000
 8002118:	2000000c 	.word	0x2000000c
 800211c:	431bde83 	.word	0x431bde83

08002120 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e3ca      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b97      	ldr	r3, [pc, #604]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4b94      	ldr	r3, [pc, #592]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80e4 	beq.w	800231c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_RCC_OscConfig+0x4a>
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	f040 808b 	bne.w	8002278 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 8087 	bne.w	8002278 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800216a:	4b89      	ldr	r3, [pc, #548]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e3a2      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <HAL_RCC_OscConfig+0x7c>
 8002192:	4b7f      	ldr	r3, [pc, #508]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219a:	e005      	b.n	80021a8 <HAL_RCC_OscConfig+0x88>
 800219c:	4b7c      	ldr	r3, [pc, #496]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d223      	bcs.n	80021f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fd55 	bl	8002c60 <RCC_SetFlashLatencyFromMSIRange>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e383      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c0:	4b73      	ldr	r3, [pc, #460]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a72      	ldr	r2, [pc, #456]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b70      	ldr	r3, [pc, #448]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	496d      	ldr	r1, [pc, #436]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021de:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4968      	ldr	r1, [pc, #416]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
 80021f2:	e025      	b.n	8002240 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b63      	ldr	r3, [pc, #396]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4960      	ldr	r1, [pc, #384]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b5f      	ldr	r3, [pc, #380]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	495b      	ldr	r1, [pc, #364]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fd15 	bl	8002c60 <RCC_SetFlashLatencyFromMSIRange>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e343      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002240:	f000 fc4a 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b52      	ldr	r3, [pc, #328]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	4950      	ldr	r1, [pc, #320]	@ (8002394 <HAL_RCC_OscConfig+0x274>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	4a4e      	ldr	r2, [pc, #312]	@ (8002398 <HAL_RCC_OscConfig+0x278>)
 800225e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002260:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fdcd 	bl	8000e04 <HAL_InitTick>
 800226a:	4603      	mov	r3, r0
 800226c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d052      	beq.n	800231a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	e327      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d032      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002280:	4b43      	ldr	r3, [pc, #268]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a42      	ldr	r2, [pc, #264]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228c:	f7fe fe0a 	bl	8000ea4 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002294:	f7fe fe06 	bl	8000ea4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e310      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b2:	4b37      	ldr	r3, [pc, #220]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a36      	ldr	r2, [pc, #216]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b34      	ldr	r3, [pc, #208]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4931      	ldr	r1, [pc, #196]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	492c      	ldr	r1, [pc, #176]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e01a      	b.n	800231c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fdd7 	bl	8000ea4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fa:	f7fe fdd3 	bl	8000ea4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e2dd      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800230c:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x1da>
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800231a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d074      	beq.n	8002412 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x21a>
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d10e      	bne.n	8002352 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d10b      	bne.n	8002352 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d064      	beq.n	8002410 <HAL_RCC_OscConfig+0x2f0>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d160      	bne.n	8002410 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e2ba      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x24a>
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0b      	ldr	r2, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e026      	b.n	80023b8 <HAL_RCC_OscConfig+0x298>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002372:	d115      	bne.n	80023a0 <HAL_RCC_OscConfig+0x280>
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a05      	ldr	r2, [pc, #20]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 800237a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b03      	ldr	r3, [pc, #12]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a02      	ldr	r2, [pc, #8]	@ (8002390 <HAL_RCC_OscConfig+0x270>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x298>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	080050c4 	.word	0x080050c4
 8002398:	2000000c 	.word	0x2000000c
 800239c:	20000010 	.word	0x20000010
 80023a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd70 	bl	8000ea4 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fd6c 	bl	8000ea4 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e276      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023da:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2a8>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fd5c 	bl	8000ea4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fd58 	bl	8000ea4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	@ 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e262      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002402:	4b88      	ldr	r3, [pc, #544]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2d0>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d060      	beq.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x310>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d119      	bne.n	800245e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d116      	bne.n	800245e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002430:	4b7c      	ldr	r3, [pc, #496]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x328>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e23f      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	4973      	ldr	r1, [pc, #460]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	e040      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d023      	beq.n	80024ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002466:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fd17 	bl	8000ea4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fd13 	bl	8000ea4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e21d      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b65      	ldr	r3, [pc, #404]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b62      	ldr	r3, [pc, #392]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	495f      	ldr	r1, [pc, #380]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e018      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fcf3 	bl	8000ea4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fcef 	bl	8000ea4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1f9      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03c      	beq.n	8002566 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01c      	beq.n	800252e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fcce 	bl	8000ea4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fcca 	bl	8000ea4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1d4      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251e:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ef      	beq.n	800250c <HAL_RCC_OscConfig+0x3ec>
 800252c:	e01b      	b.n	8002566 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002534:	4a3b      	ldr	r2, [pc, #236]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fcb1 	bl	8000ea4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002546:	f7fe fcad 	bl	8000ea4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1b7      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800255a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ef      	bne.n	8002546 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80a6 	beq.w	80026c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10d      	bne.n	80025a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	4a26      	ldr	r2, [pc, #152]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002590:	4b24      	ldr	r3, [pc, #144]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259c:	2301      	movs	r3, #1
 800259e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d118      	bne.n	80025de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b8:	f7fe fc74 	bl	8000ea4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7fe fc70 	bl	8000ea4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e17a      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <HAL_RCC_OscConfig+0x508>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4d8>
 80025e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f6:	e029      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d115      	bne.n	800262c <HAL_RCC_OscConfig+0x50c>
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002616:	4a03      	ldr	r2, [pc, #12]	@ (8002624 <HAL_RCC_OscConfig+0x504>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x52c>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
 800262c:	4b9c      	ldr	r3, [pc, #624]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	4a9b      	ldr	r2, [pc, #620]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800263c:	4b98      	ldr	r3, [pc, #608]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	4a97      	ldr	r2, [pc, #604]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d016      	beq.n	8002682 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fc26 	bl	8000ea4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fc22 	bl	8000ea4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e12a      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002672:	4b8b      	ldr	r3, [pc, #556]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ed      	beq.n	800265c <HAL_RCC_OscConfig+0x53c>
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fc0f 	bl	8000ea4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fc0b 	bl	8000ea4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e113      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a0:	4b7f      	ldr	r3, [pc, #508]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ed      	bne.n	800268a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b7a      	ldr	r3, [pc, #488]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b8:	4a79      	ldr	r2, [pc, #484]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80fe 	beq.w	80028c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	f040 80d0 	bne.w	8002874 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026d4:	4b72      	ldr	r3, [pc, #456]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d130      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	3b01      	subs	r3, #1
 80026f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d127      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002704:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d11f      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002714:	2a07      	cmp	r2, #7
 8002716:	bf14      	ite	ne
 8002718:	2201      	movne	r2, #1
 800271a:	2200      	moveq	r2, #0
 800271c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271e:	4293      	cmp	r3, r2
 8002720:	d113      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	3b01      	subs	r3, #1
 8002730:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d109      	bne.n	800274a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	3b01      	subs	r3, #1
 8002744:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d06e      	beq.n	8002828 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d069      	beq.n	8002824 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0ad      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800276c:	4b4c      	ldr	r3, [pc, #304]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4b      	ldr	r2, [pc, #300]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002778:	f7fe fb94 	bl	8000ea4 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fb90 	bl	8000ea4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e09a      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002792:	4b43      	ldr	r3, [pc, #268]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279e:	4b40      	ldr	r3, [pc, #256]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b40      	ldr	r3, [pc, #256]	@ (80028a4 <HAL_RCC_OscConfig+0x784>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027ae:	3a01      	subs	r2, #1
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027b8:	0212      	lsls	r2, r2, #8
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027c0:	0852      	lsrs	r2, r2, #1
 80027c2:	3a01      	subs	r2, #1
 80027c4:	0552      	lsls	r2, r2, #21
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027cc:	0852      	lsrs	r2, r2, #1
 80027ce:	3a01      	subs	r2, #1
 80027d0:	0652      	lsls	r2, r2, #25
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027d8:	0912      	lsrs	r2, r2, #4
 80027da:	0452      	lsls	r2, r2, #17
 80027dc:	430a      	orrs	r2, r1
 80027de:	4930      	ldr	r1, [pc, #192]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027e4:	4b2e      	ldr	r3, [pc, #184]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f0:	4b2b      	ldr	r3, [pc, #172]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a2a      	ldr	r2, [pc, #168]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027fc:	f7fe fb52 	bl	8000ea4 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fb4e 	bl	8000ea4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e058      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002822:	e050      	b.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04f      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d148      	bne.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800284a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800284c:	f7fe fb2a 	bl	8000ea4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fb26 	bl	8000ea4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e030      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x734>
 8002872:	e028      	b.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d023      	beq.n	80028c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a08      	ldr	r2, [pc, #32]	@ (80028a0 <HAL_RCC_OscConfig+0x780>)
 8002880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7fe fb0d 	bl	8000ea4 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	e00c      	b.n	80028a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe fb09 	bl	8000ea4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d905      	bls.n	80028a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_OscConfig+0x7b0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ec      	bne.n	800288e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_RCC_OscConfig+0x7b0>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4905      	ldr	r1, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x7b0>)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x7b4>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
 80028c0:	e001      	b.n	80028c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	feeefffc 	.word	0xfeeefffc

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0e7      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b72      	ldr	r3, [pc, #456]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	4970      	ldr	r1, [pc, #448]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0cf      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	429a      	cmp	r2, r3
 8002936:	d908      	bls.n	800294a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b63      	ldr	r3, [pc, #396]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4960      	ldr	r1, [pc, #384]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04c      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d121      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0a6      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	4b54      	ldr	r3, [pc, #336]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d115      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e09a      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800298e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e08e      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e086      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b46      	ldr	r3, [pc, #280]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4943      	ldr	r1, [pc, #268]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7fe fa70 	bl	8000ea4 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fa6c 	bl	8000ea4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e06e      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b31      	ldr	r3, [pc, #196]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d208      	bcs.n	8002a1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	492b      	ldr	r1, [pc, #172]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d210      	bcs.n	8002a4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 0207 	bic.w	r2, r3, #7
 8002a34:	4923      	ldr	r1, [pc, #140]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e036      	b.n	8002abc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4918      	ldr	r1, [pc, #96]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4910      	ldr	r1, [pc, #64]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a8c:	f000 f824 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	490b      	ldr	r1, [pc, #44]	@ (8002acc <HAL_RCC_ClockConfig+0x1f4>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <HAL_RCC_ClockConfig+0x1f8>)
 8002aaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1fc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe f9a7 	bl	8000e04 <HAL_InitTick>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aba:	7afb      	ldrb	r3, [r7, #11]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	080050c4 	.word	0x080050c4
 8002ad0:	2000000c 	.word	0x2000000c
 8002ad4:	20000010 	.word	0x20000010

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af0:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x34>
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d121      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d11e      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b0c:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e005      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b28:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b34:	4a2b      	ldr	r2, [pc, #172]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b50:	4b25      	ldr	r3, [pc, #148]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e004      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b5c:	4b23      	ldr	r3, [pc, #140]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x114>)
 8002b5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d134      	bne.n	8002bd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d003      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xac>
 8002b7c:	e005      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b80:	617b      	str	r3, [r7, #20]
      break;
 8002b82:	e005      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x114>)
 8002b86:	617b      	str	r3, [r7, #20]
      break;
 8002b88:	e002      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	617b      	str	r3, [r7, #20]
      break;
 8002b8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	0a1b      	lsrs	r3, r3, #8
 8002ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	fb03 f202 	mul.w	r2, r3, r2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	0e5b      	lsrs	r3, r3, #25
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	080050dc 	.word	0x080050dc
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	007a1200 	.word	0x007a1200

08002bf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c0c:	f7ff fff0 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4904      	ldr	r1, [pc, #16]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	080050d4 	.word	0x080050d4

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c38:	f7ff ffda 	bl	8002bf0 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4904      	ldr	r1, [pc, #16]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	080050d4 	.word	0x080050d4

08002c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c78:	f7ff f9ee 	bl	8002058 <HAL_PWREx_GetVoltageRange>
 8002c7c:	6178      	str	r0, [r7, #20]
 8002c7e:	e014      	b.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c80:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	4a24      	ldr	r2, [pc, #144]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8c:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c98:	f7ff f9de 	bl	8002058 <HAL_PWREx_GetVoltageRange>
 8002c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb0:	d10b      	bne.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b80      	cmp	r3, #128	@ 0x80
 8002cb6:	d919      	bls.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cbc:	d902      	bls.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	e013      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e010      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b80      	cmp	r3, #128	@ 0x80
 8002cce:	d902      	bls.n	8002cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	e00a      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b80      	cmp	r3, #128	@ 0x80
 8002cda:	d102      	bne.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cdc:	2302      	movs	r3, #2
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e004      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b70      	cmp	r3, #112	@ 0x70
 8002ce6:	d101      	bne.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ce8:	2301      	movs	r3, #1
 8002cea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 0207 	bic.w	r2, r3, #7
 8002cf4:	4909      	ldr	r1, [pc, #36]	@ (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40022000 	.word	0x40022000

08002d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d041      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d44:	d02a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d4a:	d824      	bhi.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d56:	d81e      	bhi.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d60:	d010      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d62:	e018      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d64:	4b86      	ldr	r3, [pc, #536]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a85      	ldr	r2, [pc, #532]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d70:	e015      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fabb 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d82:	e00c      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3320      	adds	r3, #32
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fba6 	bl	80034dc <RCCEx_PLLSAI2_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d94:	e003      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	74fb      	strb	r3, [r7, #19]
      break;
 8002d9a:	e000      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da4:	4b76      	ldr	r3, [pc, #472]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db2:	4973      	ldr	r1, [pc, #460]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dba:	e001      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d041      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dd4:	d02a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dda:	d824      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002de2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de6:	d81e      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df0:	d010      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002df2:	e018      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002df4:	4b62      	ldr	r3, [pc, #392]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a61      	ldr	r2, [pc, #388]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e00:	e015      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fa73 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e12:	e00c      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3320      	adds	r3, #32
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fb5e 	bl	80034dc <RCCEx_PLLSAI2_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	74fb      	strb	r3, [r7, #19]
      break;
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e34:	4b52      	ldr	r3, [pc, #328]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e42:	494f      	ldr	r1, [pc, #316]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e4a:	e001      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a0 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e62:	4b47      	ldr	r3, [pc, #284]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	4a40      	ldr	r2, [pc, #256]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e84:	4b3e      	ldr	r3, [pc, #248]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e94:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3a      	ldr	r2, [pc, #232]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe f800 	bl	8000ea4 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea6:	e009      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fd fffc 	bl	8000ea4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	74fb      	strb	r3, [r7, #19]
        break;
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ef      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d15c      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ece:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01f      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d019      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eec:	4b24      	ldr	r3, [pc, #144]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ef8:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	4a20      	ldr	r2, [pc, #128]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f18:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fd ffbb 	bl	8000ea4 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f30:	e00b      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fd ffb7 	bl	8000ea4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d902      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	74fb      	strb	r3, [r7, #19]
            break;
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ec      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f6e:	4904      	ldr	r1, [pc, #16]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f76:	e009      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
 8002f7c:	e006      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8c:	7c7b      	ldrb	r3, [r7, #17]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b9e      	ldr	r3, [pc, #632]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a9d      	ldr	r2, [pc, #628]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002faa:	4b98      	ldr	r3, [pc, #608]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f023 0203 	bic.w	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	4994      	ldr	r1, [pc, #592]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	f023 020c 	bic.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	498c      	ldr	r1, [pc, #560]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fee:	4b87      	ldr	r3, [pc, #540]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	4983      	ldr	r1, [pc, #524]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003010:	4b7e      	ldr	r3, [pc, #504]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	497b      	ldr	r1, [pc, #492]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003032:	4b76      	ldr	r3, [pc, #472]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003040:	4972      	ldr	r1, [pc, #456]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003054:	4b6d      	ldr	r3, [pc, #436]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	496a      	ldr	r1, [pc, #424]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	4961      	ldr	r1, [pc, #388]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003098:	4b5c      	ldr	r3, [pc, #368]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	4959      	ldr	r1, [pc, #356]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ba:	4b54      	ldr	r3, [pc, #336]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c8:	4950      	ldr	r1, [pc, #320]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030dc:	4b4b      	ldr	r3, [pc, #300]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	4948      	ldr	r1, [pc, #288]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fe:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	493f      	ldr	r1, [pc, #252]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d028      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003120:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312e:	4937      	ldr	r1, [pc, #220]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800313a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800313e:	d106      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003140:	4b32      	ldr	r3, [pc, #200]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a31      	ldr	r2, [pc, #196]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800314a:	60d3      	str	r3, [r2, #12]
 800314c:	e011      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003152:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003156:	d10c      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f8c8 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800317e:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003184:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	491f      	ldr	r1, [pc, #124]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800319c:	d106      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319e:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a1a      	ldr	r2, [pc, #104]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a8:	60d3      	str	r3, [r2, #12]
 80031aa:	e011      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f899 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	4908      	ldr	r1, [pc, #32]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031fa:	d109      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a02      	ldr	r2, [pc, #8]	@ (800320c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003206:	60d3      	str	r3, [r2, #12]
 8003208:	e014      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f867 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02f      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800324e:	4928      	ldr	r1, [pc, #160]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325e:	d10d      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2102      	movs	r1, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f844 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	74bb      	strb	r3, [r7, #18]
 800327a:	e011      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3320      	adds	r3, #32
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f925 	bl	80034dc <RCCEx_PLLSAI2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ba:	490d      	ldr	r1, [pc, #52]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032de:	4904      	ldr	r1, [pc, #16]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40021000 	.word	0x40021000

080032f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003302:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800330e:	4b72      	ldr	r3, [pc, #456]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
       ||
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003326:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
       ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d047      	beq.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e044      	b.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d018      	beq.n	800337a <RCCEx_PLLSAI1_Config+0x86>
 8003348:	2b03      	cmp	r3, #3
 800334a:	d825      	bhi.n	8003398 <RCCEx_PLLSAI1_Config+0xa4>
 800334c:	2b01      	cmp	r3, #1
 800334e:	d002      	beq.n	8003356 <RCCEx_PLLSAI1_Config+0x62>
 8003350:	2b02      	cmp	r3, #2
 8003352:	d009      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0x74>
 8003354:	e020      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003356:	4b60      	ldr	r3, [pc, #384]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11d      	bne.n	800339e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003366:	e01a      	b.n	800339e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003368:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003378:	e013      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800337a:	4b57      	ldr	r3, [pc, #348]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003386:	4b54      	ldr	r3, [pc, #336]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003396:	e006      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e004      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ae:	4b4a      	ldr	r3, [pc, #296]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	430b      	orrs	r3, r1
 80033c4:	4944      	ldr	r1, [pc, #272]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d17d      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033d0:	4b41      	ldr	r3, [pc, #260]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a40      	ldr	r2, [pc, #256]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fd fd62 	bl	8000ea4 <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e2:	e009      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e4:	f7fd fd5e 	bl	8000ea4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d902      	bls.n	80033f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	73fb      	strb	r3, [r7, #15]
        break;
 80033f6:	e005      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f8:	4b37      	ldr	r3, [pc, #220]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ef      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d160      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003410:	4b31      	ldr	r3, [pc, #196]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6892      	ldr	r2, [r2, #8]
 8003420:	0211      	lsls	r1, r2, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68d2      	ldr	r2, [r2, #12]
 8003426:	0912      	lsrs	r2, r2, #4
 8003428:	0452      	lsls	r2, r2, #17
 800342a:	430a      	orrs	r2, r1
 800342c:	492a      	ldr	r1, [pc, #168]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]
 8003432:	e027      	b.n	8003484 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d112      	bne.n	8003460 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003442:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	0211      	lsls	r1, r2, #8
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6912      	ldr	r2, [r2, #16]
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0552      	lsls	r2, r2, #21
 8003456:	430a      	orrs	r2, r1
 8003458:	491f      	ldr	r1, [pc, #124]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345a:	4313      	orrs	r3, r2
 800345c:	610b      	str	r3, [r1, #16]
 800345e:	e011      	b.n	8003484 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003460:	4b1d      	ldr	r3, [pc, #116]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003468:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	0211      	lsls	r1, r2, #8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6952      	ldr	r2, [r2, #20]
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0652      	lsls	r2, r2, #25
 800347c:	430a      	orrs	r2, r1
 800347e:	4916      	ldr	r1, [pc, #88]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003484:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a13      	ldr	r2, [pc, #76]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800348e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fd08 	bl	8000ea4 <HAL_GetTick>
 8003494:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003496:	e009      	b.n	80034ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003498:	f7fd fd04 	bl	8000ea4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d902      	bls.n	80034ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	73fb      	strb	r3, [r7, #15]
          break;
 80034aa:	e005      	b.n	80034b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ac:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ef      	beq.n	8003498 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	4904      	ldr	r1, [pc, #16]	@ (80034d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034f6:	4b67      	ldr	r3, [pc, #412]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0203 	and.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d10d      	bne.n	8003522 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
       ||
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800350e:	4b61      	ldr	r3, [pc, #388]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
       ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d047      	beq.n	80035b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e044      	b.n	80035b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d018      	beq.n	8003562 <RCCEx_PLLSAI2_Config+0x86>
 8003530:	2b03      	cmp	r3, #3
 8003532:	d825      	bhi.n	8003580 <RCCEx_PLLSAI2_Config+0xa4>
 8003534:	2b01      	cmp	r3, #1
 8003536:	d002      	beq.n	800353e <RCCEx_PLLSAI2_Config+0x62>
 8003538:	2b02      	cmp	r3, #2
 800353a:	d009      	beq.n	8003550 <RCCEx_PLLSAI2_Config+0x74>
 800353c:	e020      	b.n	8003580 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800353e:	4b55      	ldr	r3, [pc, #340]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11d      	bne.n	8003586 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354e:	e01a      	b.n	8003586 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e013      	b.n	800358a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003562:	4b4c      	ldr	r3, [pc, #304]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800356e:	4b49      	ldr	r3, [pc, #292]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800357e:	e006      	b.n	800358e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e004      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800358e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003596:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6819      	ldr	r1, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	430b      	orrs	r3, r1
 80035ac:	4939      	ldr	r1, [pc, #228]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d167      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035b8:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a35      	ldr	r2, [pc, #212]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fd fc6e 	bl	8000ea4 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ca:	e009      	b.n	80035e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035cc:	f7fd fc6a 	bl	8000ea4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d902      	bls.n	80035e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	73fb      	strb	r3, [r7, #15]
        break;
 80035de:	e005      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d14a      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035f8:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	0211      	lsls	r1, r2, #8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68d2      	ldr	r2, [r2, #12]
 800360e:	0912      	lsrs	r2, r2, #4
 8003610:	0452      	lsls	r2, r2, #17
 8003612:	430a      	orrs	r2, r1
 8003614:	491f      	ldr	r1, [pc, #124]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	614b      	str	r3, [r1, #20]
 800361a:	e011      	b.n	8003640 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003624:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	0211      	lsls	r1, r2, #8
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6912      	ldr	r2, [r2, #16]
 8003632:	0852      	lsrs	r2, r2, #1
 8003634:	3a01      	subs	r2, #1
 8003636:	0652      	lsls	r2, r2, #25
 8003638:	430a      	orrs	r2, r1
 800363a:	4916      	ldr	r1, [pc, #88]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	4313      	orrs	r3, r2
 800363e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fc2a 	bl	8000ea4 <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003652:	e009      	b.n	8003668 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003654:	f7fd fc26 	bl	8000ea4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	73fb      	strb	r3, [r7, #15]
          break;
 8003666:	e005      	b.n	8003674 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4904      	ldr	r1, [pc, #16]	@ (8003694 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	4313      	orrs	r3, r2
 8003686:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e040      	b.n	800372c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fa18 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fb6a 	bl	8003db8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8af 	bl	8003848 <UART_SetConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e01b      	b.n	800372c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fbe9 	bl	8003efc <UART_CheckIdleState>
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003748:	2b20      	cmp	r3, #32
 800374a:	d177      	bne.n	800383c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x24>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e070      	b.n	800383e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	@ 0x21
 8003768:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fb9b 	bl	8000ea4 <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Transmit+0x68>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a4:	e02f      	b.n	8003806 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fc4b 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e03b      	b.n	800383e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	b292      	uxth	r2, r2
 80037da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	3302      	adds	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e007      	b.n	80037f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1c9      	bne.n	80037a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	2140      	movs	r1, #64	@ 0x40
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fc15 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e005      	b.n	800383e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b08a      	sub	sp, #40	@ 0x28
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4313      	orrs	r3, r2
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4ba4      	ldr	r3, [pc, #656]	@ (8003b08 <UART_SetConfig+0x2c0>)
 8003878:	4013      	ands	r3, r2
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003880:	430b      	orrs	r3, r1
 8003882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a99      	ldr	r2, [pc, #612]	@ (8003b0c <UART_SetConfig+0x2c4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4313      	orrs	r3, r2
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a90      	ldr	r2, [pc, #576]	@ (8003b10 <UART_SetConfig+0x2c8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d126      	bne.n	8003920 <UART_SetConfig+0xd8>
 80038d2:	4b90      	ldr	r3, [pc, #576]	@ (8003b14 <UART_SetConfig+0x2cc>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d81b      	bhi.n	8003918 <UART_SetConfig+0xd0>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <UART_SetConfig+0xa0>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	08003909 	.word	0x08003909
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003911 	.word	0x08003911
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fe:	e116      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003900:	2302      	movs	r3, #2
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003906:	e112      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003908:	2304      	movs	r3, #4
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390e:	e10e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003910:	2308      	movs	r3, #8
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003916:	e10a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003918:	2310      	movs	r3, #16
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391e:	e106      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a7c      	ldr	r2, [pc, #496]	@ (8003b18 <UART_SetConfig+0x2d0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d138      	bne.n	800399c <UART_SetConfig+0x154>
 800392a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b14 <UART_SetConfig+0x2cc>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d82d      	bhi.n	8003994 <UART_SetConfig+0x14c>
 8003938:	a201      	add	r2, pc, #4	@ (adr r2, 8003940 <UART_SetConfig+0xf8>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003975 	.word	0x08003975
 8003944:	08003995 	.word	0x08003995
 8003948:	08003995 	.word	0x08003995
 800394c:	08003995 	.word	0x08003995
 8003950:	08003985 	.word	0x08003985
 8003954:	08003995 	.word	0x08003995
 8003958:	08003995 	.word	0x08003995
 800395c:	08003995 	.word	0x08003995
 8003960:	0800397d 	.word	0x0800397d
 8003964:	08003995 	.word	0x08003995
 8003968:	08003995 	.word	0x08003995
 800396c:	08003995 	.word	0x08003995
 8003970:	0800398d 	.word	0x0800398d
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397a:	e0d8      	b.n	8003b2e <UART_SetConfig+0x2e6>
 800397c:	2302      	movs	r3, #2
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003982:	e0d4      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003984:	2304      	movs	r3, #4
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398a:	e0d0      	b.n	8003b2e <UART_SetConfig+0x2e6>
 800398c:	2308      	movs	r3, #8
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003992:	e0cc      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003994:	2310      	movs	r3, #16
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399a:	e0c8      	b.n	8003b2e <UART_SetConfig+0x2e6>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b1c <UART_SetConfig+0x2d4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d125      	bne.n	80039f2 <UART_SetConfig+0x1aa>
 80039a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b14 <UART_SetConfig+0x2cc>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039b0:	2b30      	cmp	r3, #48	@ 0x30
 80039b2:	d016      	beq.n	80039e2 <UART_SetConfig+0x19a>
 80039b4:	2b30      	cmp	r3, #48	@ 0x30
 80039b6:	d818      	bhi.n	80039ea <UART_SetConfig+0x1a2>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d00a      	beq.n	80039d2 <UART_SetConfig+0x18a>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d814      	bhi.n	80039ea <UART_SetConfig+0x1a2>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <UART_SetConfig+0x182>
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d008      	beq.n	80039da <UART_SetConfig+0x192>
 80039c8:	e00f      	b.n	80039ea <UART_SetConfig+0x1a2>
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d0:	e0ad      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039d2:	2302      	movs	r3, #2
 80039d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d8:	e0a9      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039da:	2304      	movs	r3, #4
 80039dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e0:	e0a5      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039e2:	2308      	movs	r3, #8
 80039e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e8:	e0a1      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039ea:	2310      	movs	r3, #16
 80039ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f0:	e09d      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b20 <UART_SetConfig+0x2d8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d125      	bne.n	8003a48 <UART_SetConfig+0x200>
 80039fc:	4b45      	ldr	r3, [pc, #276]	@ (8003b14 <UART_SetConfig+0x2cc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a08:	d016      	beq.n	8003a38 <UART_SetConfig+0x1f0>
 8003a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a0c:	d818      	bhi.n	8003a40 <UART_SetConfig+0x1f8>
 8003a0e:	2b80      	cmp	r3, #128	@ 0x80
 8003a10:	d00a      	beq.n	8003a28 <UART_SetConfig+0x1e0>
 8003a12:	2b80      	cmp	r3, #128	@ 0x80
 8003a14:	d814      	bhi.n	8003a40 <UART_SetConfig+0x1f8>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <UART_SetConfig+0x1d8>
 8003a1a:	2b40      	cmp	r3, #64	@ 0x40
 8003a1c:	d008      	beq.n	8003a30 <UART_SetConfig+0x1e8>
 8003a1e:	e00f      	b.n	8003a40 <UART_SetConfig+0x1f8>
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e082      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e07e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a36:	e07a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3e:	e076      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a46:	e072      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a35      	ldr	r2, [pc, #212]	@ (8003b24 <UART_SetConfig+0x2dc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d12a      	bne.n	8003aa8 <UART_SetConfig+0x260>
 8003a52:	4b30      	ldr	r3, [pc, #192]	@ (8003b14 <UART_SetConfig+0x2cc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a60:	d01a      	beq.n	8003a98 <UART_SetConfig+0x250>
 8003a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a66:	d81b      	bhi.n	8003aa0 <UART_SetConfig+0x258>
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6c:	d00c      	beq.n	8003a88 <UART_SetConfig+0x240>
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a72:	d815      	bhi.n	8003aa0 <UART_SetConfig+0x258>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <UART_SetConfig+0x238>
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7c:	d008      	beq.n	8003a90 <UART_SetConfig+0x248>
 8003a7e:	e00f      	b.n	8003aa0 <UART_SetConfig+0x258>
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e052      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e04e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a90:	2304      	movs	r3, #4
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e04a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9e:	e046      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa6:	e042      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <UART_SetConfig+0x2c4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d13a      	bne.n	8003b28 <UART_SetConfig+0x2e0>
 8003ab2:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <UART_SetConfig+0x2cc>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003abc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac0:	d01a      	beq.n	8003af8 <UART_SetConfig+0x2b0>
 8003ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac6:	d81b      	bhi.n	8003b00 <UART_SetConfig+0x2b8>
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003acc:	d00c      	beq.n	8003ae8 <UART_SetConfig+0x2a0>
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad2:	d815      	bhi.n	8003b00 <UART_SetConfig+0x2b8>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <UART_SetConfig+0x298>
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003adc:	d008      	beq.n	8003af0 <UART_SetConfig+0x2a8>
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x2b8>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e022      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e01e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e01a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e016      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e012      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003b08:	efff69f3 	.word	0xefff69f3
 8003b0c:	40008000 	.word	0x40008000
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40004c00 	.word	0x40004c00
 8003b24:	40005000 	.word	0x40005000
 8003b28:	2310      	movs	r3, #16
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a9f      	ldr	r2, [pc, #636]	@ (8003db0 <UART_SetConfig+0x568>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d17a      	bne.n	8003c2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d824      	bhi.n	8003b8a <UART_SetConfig+0x342>
 8003b40:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <UART_SetConfig+0x300>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b8b 	.word	0x08003b8b
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b7b 	.word	0x08003b7b
 8003b5c:	08003b8b 	.word	0x08003b8b
 8003b60:	08003b8b 	.word	0x08003b8b
 8003b64:	08003b8b 	.word	0x08003b8b
 8003b68:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7ff f84c 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003b70:	61f8      	str	r0, [r7, #28]
        break;
 8003b72:	e010      	b.n	8003b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <UART_SetConfig+0x56c>)
 8003b76:	61fb      	str	r3, [r7, #28]
        break;
 8003b78:	e00d      	b.n	8003b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7fe ffad 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003b7e:	61f8      	str	r0, [r7, #28]
        break;
 8003b80:	e009      	b.n	8003b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b86:	61fb      	str	r3, [r7, #28]
        break;
 8003b88:	e005      	b.n	8003b96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80fb 	beq.w	8003d94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d305      	bcc.n	8003bba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d903      	bls.n	8003bc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bc0:	e0e8      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	461c      	mov	r4, r3
 8003bc8:	4615      	mov	r5, r2
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	022b      	lsls	r3, r5, #8
 8003bd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bd8:	0222      	lsls	r2, r4, #8
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	6849      	ldr	r1, [r1, #4]
 8003bde:	0849      	lsrs	r1, r1, #1
 8003be0:	2000      	movs	r0, #0
 8003be2:	4688      	mov	r8, r1
 8003be4:	4681      	mov	r9, r0
 8003be6:	eb12 0a08 	adds.w	sl, r2, r8
 8003bea:	eb43 0b09 	adc.w	fp, r3, r9
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bfc:	4650      	mov	r0, sl
 8003bfe:	4659      	mov	r1, fp
 8003c00:	f7fc fb36 	bl	8000270 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c12:	d308      	bcc.n	8003c26 <UART_SetConfig+0x3de>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c1a:	d204      	bcs.n	8003c26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e0b6      	b.n	8003d94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c2c:	e0b2      	b.n	8003d94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c36:	d15e      	bne.n	8003cf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d828      	bhi.n	8003c92 <UART_SetConfig+0x44a>
 8003c40:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <UART_SetConfig+0x400>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c7d 	.word	0x08003c7d
 8003c54:	08003c93 	.word	0x08003c93
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c93 	.word	0x08003c93
 8003c60:	08003c93 	.word	0x08003c93
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	08003c8b 	.word	0x08003c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe ffcc 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003c70:	61f8      	str	r0, [r7, #28]
        break;
 8003c72:	e014      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe ffde 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003c78:	61f8      	str	r0, [r7, #28]
        break;
 8003c7a:	e010      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003db4 <UART_SetConfig+0x56c>)
 8003c7e:	61fb      	str	r3, [r7, #28]
        break;
 8003c80:	e00d      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c82:	f7fe ff29 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003c86:	61f8      	str	r0, [r7, #28]
        break;
 8003c88:	e009      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c8e:	61fb      	str	r3, [r7, #28]
        break;
 8003c90:	e005      	b.n	8003c9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d077      	beq.n	8003d94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005a      	lsls	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	d916      	bls.n	8003cee <UART_SetConfig+0x4a6>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc6:	d212      	bcs.n	8003cee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f023 030f 	bic.w	r3, r3, #15
 8003cd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	8afa      	ldrh	r2, [r7, #22]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e052      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cf4:	e04e      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d827      	bhi.n	8003d4e <UART_SetConfig+0x506>
 8003cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003d04 <UART_SetConfig+0x4bc>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe ff6e 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	61f8      	str	r0, [r7, #28]
        break;
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7fe ff80 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	@ (8003db4 <UART_SetConfig+0x56c>)
 8003d3a:	61fb      	str	r3, [r7, #28]
        break;
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe fecb 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003d42:	61f8      	str	r0, [r7, #28]
        break;
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4a:	61fb      	str	r3, [r7, #28]
        break;
 8003d4c:	e005      	b.n	8003d5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d58:	bf00      	nop
    }

    if (pclk != 0U)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d019      	beq.n	8003d94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	085a      	lsrs	r2, r3, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	d909      	bls.n	8003d8e <UART_SetConfig+0x546>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d80:	d205      	bcs.n	8003d8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	e002      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003da0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	@ 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	40008000 	.word	0x40008000
 8003db4:	00f42400 	.word	0x00f42400

08003db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01a      	beq.n	8003ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb6:	d10a      	bne.n	8003ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b098      	sub	sp, #96	@ 0x60
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f0c:	f7fc ffca 	bl	8000ea4 <HAL_GetTick>
 8003f10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d12e      	bne.n	8003f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f88c 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e062      	b.n	8004044 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d149      	bne.n	8004020 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f856 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d03c      	beq.n	8004020 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	617b      	str	r3, [r7, #20]
   return(result);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e011      	b.n	8004044 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3758      	adds	r7, #88	@ 0x58
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	e04f      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d04b      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fc ff1d 	bl	8000ea4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <UART_WaitOnFlagUntilTimeout+0x30>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e04e      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d037      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d034      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b40      	cmp	r3, #64	@ 0x40
 8004098:	d031      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d110      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2208      	movs	r2, #8
 80040ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f838 	bl	8004126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2208      	movs	r2, #8
 80040ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e029      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d8:	d111      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f81e 	bl	8004126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e00f      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	429a      	cmp	r2, r3
 800411a:	d0a0      	beq.n	800405e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004126:	b480      	push	{r7}
 8004128:	b095      	sub	sp, #84	@ 0x54
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800414c:	643b      	str	r3, [r7, #64]	@ 0x40
 800414e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800415a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004198:	2b01      	cmp	r3, #1
 800419a:	d118      	bne.n	80041ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f023 0310 	bic.w	r3, r3, #16
 80041b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6979      	ldr	r1, [r7, #20]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	613b      	str	r3, [r7, #16]
   return(result);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e6      	bne.n	800419c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041e2:	bf00      	nop
 80041e4:	3754      	adds	r7, #84	@ 0x54
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <std>:
 80041f0:	2300      	movs	r3, #0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	4604      	mov	r4, r0
 80041f6:	e9c0 3300 	strd	r3, r3, [r0]
 80041fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041fe:	6083      	str	r3, [r0, #8]
 8004200:	8181      	strh	r1, [r0, #12]
 8004202:	6643      	str	r3, [r0, #100]	@ 0x64
 8004204:	81c2      	strh	r2, [r0, #14]
 8004206:	6183      	str	r3, [r0, #24]
 8004208:	4619      	mov	r1, r3
 800420a:	2208      	movs	r2, #8
 800420c:	305c      	adds	r0, #92	@ 0x5c
 800420e:	f000 f916 	bl	800443e <memset>
 8004212:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <std+0x58>)
 8004214:	6263      	str	r3, [r4, #36]	@ 0x24
 8004216:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <std+0x5c>)
 8004218:	62a3      	str	r3, [r4, #40]	@ 0x28
 800421a:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <std+0x60>)
 800421c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <std+0x64>)
 8004220:	6323      	str	r3, [r4, #48]	@ 0x30
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <std+0x68>)
 8004224:	6224      	str	r4, [r4, #32]
 8004226:	429c      	cmp	r4, r3
 8004228:	d006      	beq.n	8004238 <std+0x48>
 800422a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800422e:	4294      	cmp	r4, r2
 8004230:	d002      	beq.n	8004238 <std+0x48>
 8004232:	33d0      	adds	r3, #208	@ 0xd0
 8004234:	429c      	cmp	r4, r3
 8004236:	d105      	bne.n	8004244 <std+0x54>
 8004238:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800423c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004240:	f000 b976 	b.w	8004530 <__retarget_lock_init_recursive>
 8004244:	bd10      	pop	{r4, pc}
 8004246:	bf00      	nop
 8004248:	08004399 	.word	0x08004399
 800424c:	080043bb 	.word	0x080043bb
 8004250:	080043f3 	.word	0x080043f3
 8004254:	08004417 	.word	0x08004417
 8004258:	200001e0 	.word	0x200001e0

0800425c <stdio_exit_handler>:
 800425c:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <stdio_exit_handler+0xc>)
 800425e:	4903      	ldr	r1, [pc, #12]	@ (800426c <stdio_exit_handler+0x10>)
 8004260:	4803      	ldr	r0, [pc, #12]	@ (8004270 <stdio_exit_handler+0x14>)
 8004262:	f000 b869 	b.w	8004338 <_fwalk_sglue>
 8004266:	bf00      	nop
 8004268:	20000018 	.word	0x20000018
 800426c:	08004dcd 	.word	0x08004dcd
 8004270:	20000028 	.word	0x20000028

08004274 <cleanup_stdio>:
 8004274:	6841      	ldr	r1, [r0, #4]
 8004276:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <cleanup_stdio+0x34>)
 8004278:	4299      	cmp	r1, r3
 800427a:	b510      	push	{r4, lr}
 800427c:	4604      	mov	r4, r0
 800427e:	d001      	beq.n	8004284 <cleanup_stdio+0x10>
 8004280:	f000 fda4 	bl	8004dcc <_fflush_r>
 8004284:	68a1      	ldr	r1, [r4, #8]
 8004286:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <cleanup_stdio+0x38>)
 8004288:	4299      	cmp	r1, r3
 800428a:	d002      	beq.n	8004292 <cleanup_stdio+0x1e>
 800428c:	4620      	mov	r0, r4
 800428e:	f000 fd9d 	bl	8004dcc <_fflush_r>
 8004292:	68e1      	ldr	r1, [r4, #12]
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <cleanup_stdio+0x3c>)
 8004296:	4299      	cmp	r1, r3
 8004298:	d004      	beq.n	80042a4 <cleanup_stdio+0x30>
 800429a:	4620      	mov	r0, r4
 800429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a0:	f000 bd94 	b.w	8004dcc <_fflush_r>
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	bf00      	nop
 80042a8:	200001e0 	.word	0x200001e0
 80042ac:	20000248 	.word	0x20000248
 80042b0:	200002b0 	.word	0x200002b0

080042b4 <global_stdio_init.part.0>:
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <global_stdio_init.part.0+0x30>)
 80042b8:	4c0b      	ldr	r4, [pc, #44]	@ (80042e8 <global_stdio_init.part.0+0x34>)
 80042ba:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <global_stdio_init.part.0+0x38>)
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	4620      	mov	r0, r4
 80042c0:	2200      	movs	r2, #0
 80042c2:	2104      	movs	r1, #4
 80042c4:	f7ff ff94 	bl	80041f0 <std>
 80042c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042cc:	2201      	movs	r2, #1
 80042ce:	2109      	movs	r1, #9
 80042d0:	f7ff ff8e 	bl	80041f0 <std>
 80042d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042d8:	2202      	movs	r2, #2
 80042da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042de:	2112      	movs	r1, #18
 80042e0:	f7ff bf86 	b.w	80041f0 <std>
 80042e4:	20000318 	.word	0x20000318
 80042e8:	200001e0 	.word	0x200001e0
 80042ec:	0800425d 	.word	0x0800425d

080042f0 <__sfp_lock_acquire>:
 80042f0:	4801      	ldr	r0, [pc, #4]	@ (80042f8 <__sfp_lock_acquire+0x8>)
 80042f2:	f000 b91e 	b.w	8004532 <__retarget_lock_acquire_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000321 	.word	0x20000321

080042fc <__sfp_lock_release>:
 80042fc:	4801      	ldr	r0, [pc, #4]	@ (8004304 <__sfp_lock_release+0x8>)
 80042fe:	f000 b919 	b.w	8004534 <__retarget_lock_release_recursive>
 8004302:	bf00      	nop
 8004304:	20000321 	.word	0x20000321

08004308 <__sinit>:
 8004308:	b510      	push	{r4, lr}
 800430a:	4604      	mov	r4, r0
 800430c:	f7ff fff0 	bl	80042f0 <__sfp_lock_acquire>
 8004310:	6a23      	ldr	r3, [r4, #32]
 8004312:	b11b      	cbz	r3, 800431c <__sinit+0x14>
 8004314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004318:	f7ff bff0 	b.w	80042fc <__sfp_lock_release>
 800431c:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <__sinit+0x28>)
 800431e:	6223      	str	r3, [r4, #32]
 8004320:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <__sinit+0x2c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f5      	bne.n	8004314 <__sinit+0xc>
 8004328:	f7ff ffc4 	bl	80042b4 <global_stdio_init.part.0>
 800432c:	e7f2      	b.n	8004314 <__sinit+0xc>
 800432e:	bf00      	nop
 8004330:	08004275 	.word	0x08004275
 8004334:	20000318 	.word	0x20000318

08004338 <_fwalk_sglue>:
 8004338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800433c:	4607      	mov	r7, r0
 800433e:	4688      	mov	r8, r1
 8004340:	4614      	mov	r4, r2
 8004342:	2600      	movs	r6, #0
 8004344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004348:	f1b9 0901 	subs.w	r9, r9, #1
 800434c:	d505      	bpl.n	800435a <_fwalk_sglue+0x22>
 800434e:	6824      	ldr	r4, [r4, #0]
 8004350:	2c00      	cmp	r4, #0
 8004352:	d1f7      	bne.n	8004344 <_fwalk_sglue+0xc>
 8004354:	4630      	mov	r0, r6
 8004356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800435a:	89ab      	ldrh	r3, [r5, #12]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d907      	bls.n	8004370 <_fwalk_sglue+0x38>
 8004360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004364:	3301      	adds	r3, #1
 8004366:	d003      	beq.n	8004370 <_fwalk_sglue+0x38>
 8004368:	4629      	mov	r1, r5
 800436a:	4638      	mov	r0, r7
 800436c:	47c0      	blx	r8
 800436e:	4306      	orrs	r6, r0
 8004370:	3568      	adds	r5, #104	@ 0x68
 8004372:	e7e9      	b.n	8004348 <_fwalk_sglue+0x10>

08004374 <iprintf>:
 8004374:	b40f      	push	{r0, r1, r2, r3}
 8004376:	b507      	push	{r0, r1, r2, lr}
 8004378:	4906      	ldr	r1, [pc, #24]	@ (8004394 <iprintf+0x20>)
 800437a:	ab04      	add	r3, sp, #16
 800437c:	6808      	ldr	r0, [r1, #0]
 800437e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004382:	6881      	ldr	r1, [r0, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	f000 f9f9 	bl	800477c <_vfiprintf_r>
 800438a:	b003      	add	sp, #12
 800438c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004390:	b004      	add	sp, #16
 8004392:	4770      	bx	lr
 8004394:	20000024 	.word	0x20000024

08004398 <__sread>:
 8004398:	b510      	push	{r4, lr}
 800439a:	460c      	mov	r4, r1
 800439c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a0:	f000 f878 	bl	8004494 <_read_r>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	bfab      	itete	ge
 80043a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043aa:	89a3      	ldrhlt	r3, [r4, #12]
 80043ac:	181b      	addge	r3, r3, r0
 80043ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043b2:	bfac      	ite	ge
 80043b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043b6:	81a3      	strhlt	r3, [r4, #12]
 80043b8:	bd10      	pop	{r4, pc}

080043ba <__swrite>:
 80043ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043be:	461f      	mov	r7, r3
 80043c0:	898b      	ldrh	r3, [r1, #12]
 80043c2:	05db      	lsls	r3, r3, #23
 80043c4:	4605      	mov	r5, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	4616      	mov	r6, r2
 80043ca:	d505      	bpl.n	80043d8 <__swrite+0x1e>
 80043cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d0:	2302      	movs	r3, #2
 80043d2:	2200      	movs	r2, #0
 80043d4:	f000 f84c 	bl	8004470 <_lseek_r>
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	4632      	mov	r2, r6
 80043e6:	463b      	mov	r3, r7
 80043e8:	4628      	mov	r0, r5
 80043ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ee:	f000 b863 	b.w	80044b8 <_write_r>

080043f2 <__sseek>:
 80043f2:	b510      	push	{r4, lr}
 80043f4:	460c      	mov	r4, r1
 80043f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fa:	f000 f839 	bl	8004470 <_lseek_r>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	bf15      	itete	ne
 8004404:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004406:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800440a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800440e:	81a3      	strheq	r3, [r4, #12]
 8004410:	bf18      	it	ne
 8004412:	81a3      	strhne	r3, [r4, #12]
 8004414:	bd10      	pop	{r4, pc}

08004416 <__sclose>:
 8004416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441a:	f000 b819 	b.w	8004450 <_close_r>

0800441e <memcmp>:
 800441e:	b510      	push	{r4, lr}
 8004420:	3901      	subs	r1, #1
 8004422:	4402      	add	r2, r0
 8004424:	4290      	cmp	r0, r2
 8004426:	d101      	bne.n	800442c <memcmp+0xe>
 8004428:	2000      	movs	r0, #0
 800442a:	e005      	b.n	8004438 <memcmp+0x1a>
 800442c:	7803      	ldrb	r3, [r0, #0]
 800442e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004432:	42a3      	cmp	r3, r4
 8004434:	d001      	beq.n	800443a <memcmp+0x1c>
 8004436:	1b18      	subs	r0, r3, r4
 8004438:	bd10      	pop	{r4, pc}
 800443a:	3001      	adds	r0, #1
 800443c:	e7f2      	b.n	8004424 <memcmp+0x6>

0800443e <memset>:
 800443e:	4402      	add	r2, r0
 8004440:	4603      	mov	r3, r0
 8004442:	4293      	cmp	r3, r2
 8004444:	d100      	bne.n	8004448 <memset+0xa>
 8004446:	4770      	bx	lr
 8004448:	f803 1b01 	strb.w	r1, [r3], #1
 800444c:	e7f9      	b.n	8004442 <memset+0x4>
	...

08004450 <_close_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4d06      	ldr	r5, [pc, #24]	@ (800446c <_close_r+0x1c>)
 8004454:	2300      	movs	r3, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fc fc0c 	bl	8000c78 <_close>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d102      	bne.n	800446a <_close_r+0x1a>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	b103      	cbz	r3, 800446a <_close_r+0x1a>
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	2000031c 	.word	0x2000031c

08004470 <_lseek_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4d07      	ldr	r5, [pc, #28]	@ (8004490 <_lseek_r+0x20>)
 8004474:	4604      	mov	r4, r0
 8004476:	4608      	mov	r0, r1
 8004478:	4611      	mov	r1, r2
 800447a:	2200      	movs	r2, #0
 800447c:	602a      	str	r2, [r5, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	f7fc fc21 	bl	8000cc6 <_lseek>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_lseek_r+0x1e>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_lseek_r+0x1e>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	2000031c 	.word	0x2000031c

08004494 <_read_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d07      	ldr	r5, [pc, #28]	@ (80044b4 <_read_r+0x20>)
 8004498:	4604      	mov	r4, r0
 800449a:	4608      	mov	r0, r1
 800449c:	4611      	mov	r1, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fc fbaf 	bl	8000c06 <_read>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_read_r+0x1e>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_read_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	2000031c 	.word	0x2000031c

080044b8 <_write_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d07      	ldr	r5, [pc, #28]	@ (80044d8 <_write_r+0x20>)
 80044bc:	4604      	mov	r4, r0
 80044be:	4608      	mov	r0, r1
 80044c0:	4611      	mov	r1, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7fc fbba 	bl	8000c40 <_write>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_write_r+0x1e>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_write_r+0x1e>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	2000031c 	.word	0x2000031c

080044dc <__errno>:
 80044dc:	4b01      	ldr	r3, [pc, #4]	@ (80044e4 <__errno+0x8>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000024 	.word	0x20000024

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	@ (800452c <__libc_init_array+0x44>)
 80044fc:	f000 fdb6 	bl	800506c <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	08005148 	.word	0x08005148
 8004524:	08005148 	.word	0x08005148
 8004528:	08005148 	.word	0x08005148
 800452c:	0800514c 	.word	0x0800514c

08004530 <__retarget_lock_init_recursive>:
 8004530:	4770      	bx	lr

08004532 <__retarget_lock_acquire_recursive>:
 8004532:	4770      	bx	lr

08004534 <__retarget_lock_release_recursive>:
 8004534:	4770      	bx	lr
	...

08004538 <_free_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4605      	mov	r5, r0
 800453c:	2900      	cmp	r1, #0
 800453e:	d041      	beq.n	80045c4 <_free_r+0x8c>
 8004540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004544:	1f0c      	subs	r4, r1, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfb8      	it	lt
 800454a:	18e4      	addlt	r4, r4, r3
 800454c:	f000 f8e0 	bl	8004710 <__malloc_lock>
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <_free_r+0x90>)
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	b933      	cbnz	r3, 8004564 <_free_r+0x2c>
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	6014      	str	r4, [r2, #0]
 800455a:	4628      	mov	r0, r5
 800455c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004560:	f000 b8dc 	b.w	800471c <__malloc_unlock>
 8004564:	42a3      	cmp	r3, r4
 8004566:	d908      	bls.n	800457a <_free_r+0x42>
 8004568:	6820      	ldr	r0, [r4, #0]
 800456a:	1821      	adds	r1, r4, r0
 800456c:	428b      	cmp	r3, r1
 800456e:	bf01      	itttt	eq
 8004570:	6819      	ldreq	r1, [r3, #0]
 8004572:	685b      	ldreq	r3, [r3, #4]
 8004574:	1809      	addeq	r1, r1, r0
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	e7ed      	b.n	8004556 <_free_r+0x1e>
 800457a:	461a      	mov	r2, r3
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b10b      	cbz	r3, 8004584 <_free_r+0x4c>
 8004580:	42a3      	cmp	r3, r4
 8004582:	d9fa      	bls.n	800457a <_free_r+0x42>
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	1850      	adds	r0, r2, r1
 8004588:	42a0      	cmp	r0, r4
 800458a:	d10b      	bne.n	80045a4 <_free_r+0x6c>
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	4401      	add	r1, r0
 8004590:	1850      	adds	r0, r2, r1
 8004592:	4283      	cmp	r3, r0
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	d1e0      	bne.n	800455a <_free_r+0x22>
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	6053      	str	r3, [r2, #4]
 800459e:	4408      	add	r0, r1
 80045a0:	6010      	str	r0, [r2, #0]
 80045a2:	e7da      	b.n	800455a <_free_r+0x22>
 80045a4:	d902      	bls.n	80045ac <_free_r+0x74>
 80045a6:	230c      	movs	r3, #12
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	e7d6      	b.n	800455a <_free_r+0x22>
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	1821      	adds	r1, r4, r0
 80045b0:	428b      	cmp	r3, r1
 80045b2:	bf04      	itt	eq
 80045b4:	6819      	ldreq	r1, [r3, #0]
 80045b6:	685b      	ldreq	r3, [r3, #4]
 80045b8:	6063      	str	r3, [r4, #4]
 80045ba:	bf04      	itt	eq
 80045bc:	1809      	addeq	r1, r1, r0
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	6054      	str	r4, [r2, #4]
 80045c2:	e7ca      	b.n	800455a <_free_r+0x22>
 80045c4:	bd38      	pop	{r3, r4, r5, pc}
 80045c6:	bf00      	nop
 80045c8:	20000328 	.word	0x20000328

080045cc <sbrk_aligned>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4e0f      	ldr	r6, [pc, #60]	@ (800460c <sbrk_aligned+0x40>)
 80045d0:	460c      	mov	r4, r1
 80045d2:	6831      	ldr	r1, [r6, #0]
 80045d4:	4605      	mov	r5, r0
 80045d6:	b911      	cbnz	r1, 80045de <sbrk_aligned+0x12>
 80045d8:	f000 fcb4 	bl	8004f44 <_sbrk_r>
 80045dc:	6030      	str	r0, [r6, #0]
 80045de:	4621      	mov	r1, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	f000 fcaf 	bl	8004f44 <_sbrk_r>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	d103      	bne.n	80045f2 <sbrk_aligned+0x26>
 80045ea:	f04f 34ff 	mov.w	r4, #4294967295
 80045ee:	4620      	mov	r0, r4
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	1cc4      	adds	r4, r0, #3
 80045f4:	f024 0403 	bic.w	r4, r4, #3
 80045f8:	42a0      	cmp	r0, r4
 80045fa:	d0f8      	beq.n	80045ee <sbrk_aligned+0x22>
 80045fc:	1a21      	subs	r1, r4, r0
 80045fe:	4628      	mov	r0, r5
 8004600:	f000 fca0 	bl	8004f44 <_sbrk_r>
 8004604:	3001      	adds	r0, #1
 8004606:	d1f2      	bne.n	80045ee <sbrk_aligned+0x22>
 8004608:	e7ef      	b.n	80045ea <sbrk_aligned+0x1e>
 800460a:	bf00      	nop
 800460c:	20000324 	.word	0x20000324

08004610 <_malloc_r>:
 8004610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004614:	1ccd      	adds	r5, r1, #3
 8004616:	f025 0503 	bic.w	r5, r5, #3
 800461a:	3508      	adds	r5, #8
 800461c:	2d0c      	cmp	r5, #12
 800461e:	bf38      	it	cc
 8004620:	250c      	movcc	r5, #12
 8004622:	2d00      	cmp	r5, #0
 8004624:	4606      	mov	r6, r0
 8004626:	db01      	blt.n	800462c <_malloc_r+0x1c>
 8004628:	42a9      	cmp	r1, r5
 800462a:	d904      	bls.n	8004636 <_malloc_r+0x26>
 800462c:	230c      	movs	r3, #12
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	2000      	movs	r0, #0
 8004632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800470c <_malloc_r+0xfc>
 800463a:	f000 f869 	bl	8004710 <__malloc_lock>
 800463e:	f8d8 3000 	ldr.w	r3, [r8]
 8004642:	461c      	mov	r4, r3
 8004644:	bb44      	cbnz	r4, 8004698 <_malloc_r+0x88>
 8004646:	4629      	mov	r1, r5
 8004648:	4630      	mov	r0, r6
 800464a:	f7ff ffbf 	bl	80045cc <sbrk_aligned>
 800464e:	1c43      	adds	r3, r0, #1
 8004650:	4604      	mov	r4, r0
 8004652:	d158      	bne.n	8004706 <_malloc_r+0xf6>
 8004654:	f8d8 4000 	ldr.w	r4, [r8]
 8004658:	4627      	mov	r7, r4
 800465a:	2f00      	cmp	r7, #0
 800465c:	d143      	bne.n	80046e6 <_malloc_r+0xd6>
 800465e:	2c00      	cmp	r4, #0
 8004660:	d04b      	beq.n	80046fa <_malloc_r+0xea>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	4639      	mov	r1, r7
 8004666:	4630      	mov	r0, r6
 8004668:	eb04 0903 	add.w	r9, r4, r3
 800466c:	f000 fc6a 	bl	8004f44 <_sbrk_r>
 8004670:	4581      	cmp	r9, r0
 8004672:	d142      	bne.n	80046fa <_malloc_r+0xea>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	1a6d      	subs	r5, r5, r1
 8004678:	4629      	mov	r1, r5
 800467a:	4630      	mov	r0, r6
 800467c:	f7ff ffa6 	bl	80045cc <sbrk_aligned>
 8004680:	3001      	adds	r0, #1
 8004682:	d03a      	beq.n	80046fa <_malloc_r+0xea>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	442b      	add	r3, r5
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	f8d8 3000 	ldr.w	r3, [r8]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	bb62      	cbnz	r2, 80046ec <_malloc_r+0xdc>
 8004692:	f8c8 7000 	str.w	r7, [r8]
 8004696:	e00f      	b.n	80046b8 <_malloc_r+0xa8>
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	1b52      	subs	r2, r2, r5
 800469c:	d420      	bmi.n	80046e0 <_malloc_r+0xd0>
 800469e:	2a0b      	cmp	r2, #11
 80046a0:	d917      	bls.n	80046d2 <_malloc_r+0xc2>
 80046a2:	1961      	adds	r1, r4, r5
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	6025      	str	r5, [r4, #0]
 80046a8:	bf18      	it	ne
 80046aa:	6059      	strne	r1, [r3, #4]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	bf08      	it	eq
 80046b0:	f8c8 1000 	streq.w	r1, [r8]
 80046b4:	5162      	str	r2, [r4, r5]
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f82f 	bl	800471c <__malloc_unlock>
 80046be:	f104 000b 	add.w	r0, r4, #11
 80046c2:	1d23      	adds	r3, r4, #4
 80046c4:	f020 0007 	bic.w	r0, r0, #7
 80046c8:	1ac2      	subs	r2, r0, r3
 80046ca:	bf1c      	itt	ne
 80046cc:	1a1b      	subne	r3, r3, r0
 80046ce:	50a3      	strne	r3, [r4, r2]
 80046d0:	e7af      	b.n	8004632 <_malloc_r+0x22>
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	bf0c      	ite	eq
 80046d8:	f8c8 2000 	streq.w	r2, [r8]
 80046dc:	605a      	strne	r2, [r3, #4]
 80046de:	e7eb      	b.n	80046b8 <_malloc_r+0xa8>
 80046e0:	4623      	mov	r3, r4
 80046e2:	6864      	ldr	r4, [r4, #4]
 80046e4:	e7ae      	b.n	8004644 <_malloc_r+0x34>
 80046e6:	463c      	mov	r4, r7
 80046e8:	687f      	ldr	r7, [r7, #4]
 80046ea:	e7b6      	b.n	800465a <_malloc_r+0x4a>
 80046ec:	461a      	mov	r2, r3
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	42a3      	cmp	r3, r4
 80046f2:	d1fb      	bne.n	80046ec <_malloc_r+0xdc>
 80046f4:	2300      	movs	r3, #0
 80046f6:	6053      	str	r3, [r2, #4]
 80046f8:	e7de      	b.n	80046b8 <_malloc_r+0xa8>
 80046fa:	230c      	movs	r3, #12
 80046fc:	6033      	str	r3, [r6, #0]
 80046fe:	4630      	mov	r0, r6
 8004700:	f000 f80c 	bl	800471c <__malloc_unlock>
 8004704:	e794      	b.n	8004630 <_malloc_r+0x20>
 8004706:	6005      	str	r5, [r0, #0]
 8004708:	e7d6      	b.n	80046b8 <_malloc_r+0xa8>
 800470a:	bf00      	nop
 800470c:	20000328 	.word	0x20000328

08004710 <__malloc_lock>:
 8004710:	4801      	ldr	r0, [pc, #4]	@ (8004718 <__malloc_lock+0x8>)
 8004712:	f7ff bf0e 	b.w	8004532 <__retarget_lock_acquire_recursive>
 8004716:	bf00      	nop
 8004718:	20000320 	.word	0x20000320

0800471c <__malloc_unlock>:
 800471c:	4801      	ldr	r0, [pc, #4]	@ (8004724 <__malloc_unlock+0x8>)
 800471e:	f7ff bf09 	b.w	8004534 <__retarget_lock_release_recursive>
 8004722:	bf00      	nop
 8004724:	20000320 	.word	0x20000320

08004728 <__sfputc_r>:
 8004728:	6893      	ldr	r3, [r2, #8]
 800472a:	3b01      	subs	r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	b410      	push	{r4}
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	da08      	bge.n	8004746 <__sfputc_r+0x1e>
 8004734:	6994      	ldr	r4, [r2, #24]
 8004736:	42a3      	cmp	r3, r4
 8004738:	db01      	blt.n	800473e <__sfputc_r+0x16>
 800473a:	290a      	cmp	r1, #10
 800473c:	d103      	bne.n	8004746 <__sfputc_r+0x1e>
 800473e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004742:	f000 bb6b 	b.w	8004e1c <__swbuf_r>
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	1c58      	adds	r0, r3, #1
 800474a:	6010      	str	r0, [r2, #0]
 800474c:	7019      	strb	r1, [r3, #0]
 800474e:	4608      	mov	r0, r1
 8004750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004754:	4770      	bx	lr

08004756 <__sfputs_r>:
 8004756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004758:	4606      	mov	r6, r0
 800475a:	460f      	mov	r7, r1
 800475c:	4614      	mov	r4, r2
 800475e:	18d5      	adds	r5, r2, r3
 8004760:	42ac      	cmp	r4, r5
 8004762:	d101      	bne.n	8004768 <__sfputs_r+0x12>
 8004764:	2000      	movs	r0, #0
 8004766:	e007      	b.n	8004778 <__sfputs_r+0x22>
 8004768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476c:	463a      	mov	r2, r7
 800476e:	4630      	mov	r0, r6
 8004770:	f7ff ffda 	bl	8004728 <__sfputc_r>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d1f3      	bne.n	8004760 <__sfputs_r+0xa>
 8004778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800477c <_vfiprintf_r>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	460d      	mov	r5, r1
 8004782:	b09d      	sub	sp, #116	@ 0x74
 8004784:	4614      	mov	r4, r2
 8004786:	4698      	mov	r8, r3
 8004788:	4606      	mov	r6, r0
 800478a:	b118      	cbz	r0, 8004794 <_vfiprintf_r+0x18>
 800478c:	6a03      	ldr	r3, [r0, #32]
 800478e:	b90b      	cbnz	r3, 8004794 <_vfiprintf_r+0x18>
 8004790:	f7ff fdba 	bl	8004308 <__sinit>
 8004794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004796:	07d9      	lsls	r1, r3, #31
 8004798:	d405      	bmi.n	80047a6 <_vfiprintf_r+0x2a>
 800479a:	89ab      	ldrh	r3, [r5, #12]
 800479c:	059a      	lsls	r2, r3, #22
 800479e:	d402      	bmi.n	80047a6 <_vfiprintf_r+0x2a>
 80047a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047a2:	f7ff fec6 	bl	8004532 <__retarget_lock_acquire_recursive>
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	d501      	bpl.n	80047b0 <_vfiprintf_r+0x34>
 80047ac:	692b      	ldr	r3, [r5, #16]
 80047ae:	b99b      	cbnz	r3, 80047d8 <_vfiprintf_r+0x5c>
 80047b0:	4629      	mov	r1, r5
 80047b2:	4630      	mov	r0, r6
 80047b4:	f000 fb70 	bl	8004e98 <__swsetup_r>
 80047b8:	b170      	cbz	r0, 80047d8 <_vfiprintf_r+0x5c>
 80047ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047bc:	07dc      	lsls	r4, r3, #31
 80047be:	d504      	bpl.n	80047ca <_vfiprintf_r+0x4e>
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	b01d      	add	sp, #116	@ 0x74
 80047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	0598      	lsls	r0, r3, #22
 80047ce:	d4f7      	bmi.n	80047c0 <_vfiprintf_r+0x44>
 80047d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047d2:	f7ff feaf 	bl	8004534 <__retarget_lock_release_recursive>
 80047d6:	e7f3      	b.n	80047c0 <_vfiprintf_r+0x44>
 80047d8:	2300      	movs	r3, #0
 80047da:	9309      	str	r3, [sp, #36]	@ 0x24
 80047dc:	2320      	movs	r3, #32
 80047de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047e6:	2330      	movs	r3, #48	@ 0x30
 80047e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004998 <_vfiprintf_r+0x21c>
 80047ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047f0:	f04f 0901 	mov.w	r9, #1
 80047f4:	4623      	mov	r3, r4
 80047f6:	469a      	mov	sl, r3
 80047f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047fc:	b10a      	cbz	r2, 8004802 <_vfiprintf_r+0x86>
 80047fe:	2a25      	cmp	r2, #37	@ 0x25
 8004800:	d1f9      	bne.n	80047f6 <_vfiprintf_r+0x7a>
 8004802:	ebba 0b04 	subs.w	fp, sl, r4
 8004806:	d00b      	beq.n	8004820 <_vfiprintf_r+0xa4>
 8004808:	465b      	mov	r3, fp
 800480a:	4622      	mov	r2, r4
 800480c:	4629      	mov	r1, r5
 800480e:	4630      	mov	r0, r6
 8004810:	f7ff ffa1 	bl	8004756 <__sfputs_r>
 8004814:	3001      	adds	r0, #1
 8004816:	f000 80a7 	beq.w	8004968 <_vfiprintf_r+0x1ec>
 800481a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800481c:	445a      	add	r2, fp
 800481e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004820:	f89a 3000 	ldrb.w	r3, [sl]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 809f 	beq.w	8004968 <_vfiprintf_r+0x1ec>
 800482a:	2300      	movs	r3, #0
 800482c:	f04f 32ff 	mov.w	r2, #4294967295
 8004830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004834:	f10a 0a01 	add.w	sl, sl, #1
 8004838:	9304      	str	r3, [sp, #16]
 800483a:	9307      	str	r3, [sp, #28]
 800483c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004840:	931a      	str	r3, [sp, #104]	@ 0x68
 8004842:	4654      	mov	r4, sl
 8004844:	2205      	movs	r2, #5
 8004846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484a:	4853      	ldr	r0, [pc, #332]	@ (8004998 <_vfiprintf_r+0x21c>)
 800484c:	f7fb fcc0 	bl	80001d0 <memchr>
 8004850:	9a04      	ldr	r2, [sp, #16]
 8004852:	b9d8      	cbnz	r0, 800488c <_vfiprintf_r+0x110>
 8004854:	06d1      	lsls	r1, r2, #27
 8004856:	bf44      	itt	mi
 8004858:	2320      	movmi	r3, #32
 800485a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800485e:	0713      	lsls	r3, r2, #28
 8004860:	bf44      	itt	mi
 8004862:	232b      	movmi	r3, #43	@ 0x2b
 8004864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004868:	f89a 3000 	ldrb.w	r3, [sl]
 800486c:	2b2a      	cmp	r3, #42	@ 0x2a
 800486e:	d015      	beq.n	800489c <_vfiprintf_r+0x120>
 8004870:	9a07      	ldr	r2, [sp, #28]
 8004872:	4654      	mov	r4, sl
 8004874:	2000      	movs	r0, #0
 8004876:	f04f 0c0a 	mov.w	ip, #10
 800487a:	4621      	mov	r1, r4
 800487c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004880:	3b30      	subs	r3, #48	@ 0x30
 8004882:	2b09      	cmp	r3, #9
 8004884:	d94b      	bls.n	800491e <_vfiprintf_r+0x1a2>
 8004886:	b1b0      	cbz	r0, 80048b6 <_vfiprintf_r+0x13a>
 8004888:	9207      	str	r2, [sp, #28]
 800488a:	e014      	b.n	80048b6 <_vfiprintf_r+0x13a>
 800488c:	eba0 0308 	sub.w	r3, r0, r8
 8004890:	fa09 f303 	lsl.w	r3, r9, r3
 8004894:	4313      	orrs	r3, r2
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	46a2      	mov	sl, r4
 800489a:	e7d2      	b.n	8004842 <_vfiprintf_r+0xc6>
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	1d19      	adds	r1, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	9103      	str	r1, [sp, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bfbb      	ittet	lt
 80048a8:	425b      	neglt	r3, r3
 80048aa:	f042 0202 	orrlt.w	r2, r2, #2
 80048ae:	9307      	strge	r3, [sp, #28]
 80048b0:	9307      	strlt	r3, [sp, #28]
 80048b2:	bfb8      	it	lt
 80048b4:	9204      	strlt	r2, [sp, #16]
 80048b6:	7823      	ldrb	r3, [r4, #0]
 80048b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80048ba:	d10a      	bne.n	80048d2 <_vfiprintf_r+0x156>
 80048bc:	7863      	ldrb	r3, [r4, #1]
 80048be:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c0:	d132      	bne.n	8004928 <_vfiprintf_r+0x1ac>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	9203      	str	r2, [sp, #12]
 80048ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048ce:	3402      	adds	r4, #2
 80048d0:	9305      	str	r3, [sp, #20]
 80048d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80049a8 <_vfiprintf_r+0x22c>
 80048d6:	7821      	ldrb	r1, [r4, #0]
 80048d8:	2203      	movs	r2, #3
 80048da:	4650      	mov	r0, sl
 80048dc:	f7fb fc78 	bl	80001d0 <memchr>
 80048e0:	b138      	cbz	r0, 80048f2 <_vfiprintf_r+0x176>
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	eba0 000a 	sub.w	r0, r0, sl
 80048e8:	2240      	movs	r2, #64	@ 0x40
 80048ea:	4082      	lsls	r2, r0
 80048ec:	4313      	orrs	r3, r2
 80048ee:	3401      	adds	r4, #1
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f6:	4829      	ldr	r0, [pc, #164]	@ (800499c <_vfiprintf_r+0x220>)
 80048f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048fc:	2206      	movs	r2, #6
 80048fe:	f7fb fc67 	bl	80001d0 <memchr>
 8004902:	2800      	cmp	r0, #0
 8004904:	d03f      	beq.n	8004986 <_vfiprintf_r+0x20a>
 8004906:	4b26      	ldr	r3, [pc, #152]	@ (80049a0 <_vfiprintf_r+0x224>)
 8004908:	bb1b      	cbnz	r3, 8004952 <_vfiprintf_r+0x1d6>
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	3307      	adds	r3, #7
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	3308      	adds	r3, #8
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004918:	443b      	add	r3, r7
 800491a:	9309      	str	r3, [sp, #36]	@ 0x24
 800491c:	e76a      	b.n	80047f4 <_vfiprintf_r+0x78>
 800491e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004922:	460c      	mov	r4, r1
 8004924:	2001      	movs	r0, #1
 8004926:	e7a8      	b.n	800487a <_vfiprintf_r+0xfe>
 8004928:	2300      	movs	r3, #0
 800492a:	3401      	adds	r4, #1
 800492c:	9305      	str	r3, [sp, #20]
 800492e:	4619      	mov	r1, r3
 8004930:	f04f 0c0a 	mov.w	ip, #10
 8004934:	4620      	mov	r0, r4
 8004936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800493a:	3a30      	subs	r2, #48	@ 0x30
 800493c:	2a09      	cmp	r2, #9
 800493e:	d903      	bls.n	8004948 <_vfiprintf_r+0x1cc>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0c6      	beq.n	80048d2 <_vfiprintf_r+0x156>
 8004944:	9105      	str	r1, [sp, #20]
 8004946:	e7c4      	b.n	80048d2 <_vfiprintf_r+0x156>
 8004948:	fb0c 2101 	mla	r1, ip, r1, r2
 800494c:	4604      	mov	r4, r0
 800494e:	2301      	movs	r3, #1
 8004950:	e7f0      	b.n	8004934 <_vfiprintf_r+0x1b8>
 8004952:	ab03      	add	r3, sp, #12
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	462a      	mov	r2, r5
 8004958:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <_vfiprintf_r+0x228>)
 800495a:	a904      	add	r1, sp, #16
 800495c:	4630      	mov	r0, r6
 800495e:	f3af 8000 	nop.w
 8004962:	4607      	mov	r7, r0
 8004964:	1c78      	adds	r0, r7, #1
 8004966:	d1d6      	bne.n	8004916 <_vfiprintf_r+0x19a>
 8004968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800496a:	07d9      	lsls	r1, r3, #31
 800496c:	d405      	bmi.n	800497a <_vfiprintf_r+0x1fe>
 800496e:	89ab      	ldrh	r3, [r5, #12]
 8004970:	059a      	lsls	r2, r3, #22
 8004972:	d402      	bmi.n	800497a <_vfiprintf_r+0x1fe>
 8004974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004976:	f7ff fddd 	bl	8004534 <__retarget_lock_release_recursive>
 800497a:	89ab      	ldrh	r3, [r5, #12]
 800497c:	065b      	lsls	r3, r3, #25
 800497e:	f53f af1f 	bmi.w	80047c0 <_vfiprintf_r+0x44>
 8004982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004984:	e71e      	b.n	80047c4 <_vfiprintf_r+0x48>
 8004986:	ab03      	add	r3, sp, #12
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	462a      	mov	r2, r5
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <_vfiprintf_r+0x228>)
 800498e:	a904      	add	r1, sp, #16
 8004990:	4630      	mov	r0, r6
 8004992:	f000 f879 	bl	8004a88 <_printf_i>
 8004996:	e7e4      	b.n	8004962 <_vfiprintf_r+0x1e6>
 8004998:	0800510c 	.word	0x0800510c
 800499c:	08005116 	.word	0x08005116
 80049a0:	00000000 	.word	0x00000000
 80049a4:	08004757 	.word	0x08004757
 80049a8:	08005112 	.word	0x08005112

080049ac <_printf_common>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	4616      	mov	r6, r2
 80049b2:	4698      	mov	r8, r3
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	690b      	ldr	r3, [r1, #16]
 80049b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049bc:	4293      	cmp	r3, r2
 80049be:	bfb8      	it	lt
 80049c0:	4613      	movlt	r3, r2
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049c8:	4607      	mov	r7, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b10a      	cbz	r2, 80049d2 <_printf_common+0x26>
 80049ce:	3301      	adds	r3, #1
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	6833      	ldrmi	r3, [r6, #0]
 80049da:	3302      	addmi	r3, #2
 80049dc:	6033      	strmi	r3, [r6, #0]
 80049de:	6825      	ldr	r5, [r4, #0]
 80049e0:	f015 0506 	ands.w	r5, r5, #6
 80049e4:	d106      	bne.n	80049f4 <_printf_common+0x48>
 80049e6:	f104 0a19 	add.w	sl, r4, #25
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	6832      	ldr	r2, [r6, #0]
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dc26      	bgt.n	8004a42 <_printf_common+0x96>
 80049f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	3b00      	subs	r3, #0
 80049fc:	bf18      	it	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	0692      	lsls	r2, r2, #26
 8004a02:	d42b      	bmi.n	8004a5c <_printf_common+0xb0>
 8004a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a08:	4641      	mov	r1, r8
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c8      	blx	r9
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d01e      	beq.n	8004a50 <_printf_common+0xa4>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	6922      	ldr	r2, [r4, #16]
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	bf02      	ittt	eq
 8004a1e:	68e5      	ldreq	r5, [r4, #12]
 8004a20:	6833      	ldreq	r3, [r6, #0]
 8004a22:	1aed      	subeq	r5, r5, r3
 8004a24:	68a3      	ldr	r3, [r4, #8]
 8004a26:	bf0c      	ite	eq
 8004a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a2c:	2500      	movne	r5, #0
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	bfc4      	itt	gt
 8004a32:	1a9b      	subgt	r3, r3, r2
 8004a34:	18ed      	addgt	r5, r5, r3
 8004a36:	2600      	movs	r6, #0
 8004a38:	341a      	adds	r4, #26
 8004a3a:	42b5      	cmp	r5, r6
 8004a3c:	d11a      	bne.n	8004a74 <_printf_common+0xc8>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e008      	b.n	8004a54 <_printf_common+0xa8>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4652      	mov	r2, sl
 8004a46:	4641      	mov	r1, r8
 8004a48:	4638      	mov	r0, r7
 8004a4a:	47c8      	blx	r9
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d103      	bne.n	8004a58 <_printf_common+0xac>
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	3501      	adds	r5, #1
 8004a5a:	e7c6      	b.n	80049ea <_printf_common+0x3e>
 8004a5c:	18e1      	adds	r1, r4, r3
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	2030      	movs	r0, #48	@ 0x30
 8004a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a66:	4422      	add	r2, r4
 8004a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a70:	3302      	adds	r3, #2
 8004a72:	e7c7      	b.n	8004a04 <_printf_common+0x58>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4622      	mov	r2, r4
 8004a78:	4641      	mov	r1, r8
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	47c8      	blx	r9
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d0e6      	beq.n	8004a50 <_printf_common+0xa4>
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7d9      	b.n	8004a3a <_printf_common+0x8e>
	...

08004a88 <_printf_i>:
 8004a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	7e0f      	ldrb	r7, [r1, #24]
 8004a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a90:	2f78      	cmp	r7, #120	@ 0x78
 8004a92:	4691      	mov	r9, r2
 8004a94:	4680      	mov	r8, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	469a      	mov	sl, r3
 8004a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a9e:	d807      	bhi.n	8004ab0 <_printf_i+0x28>
 8004aa0:	2f62      	cmp	r7, #98	@ 0x62
 8004aa2:	d80a      	bhi.n	8004aba <_printf_i+0x32>
 8004aa4:	2f00      	cmp	r7, #0
 8004aa6:	f000 80d1 	beq.w	8004c4c <_printf_i+0x1c4>
 8004aaa:	2f58      	cmp	r7, #88	@ 0x58
 8004aac:	f000 80b8 	beq.w	8004c20 <_printf_i+0x198>
 8004ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ab8:	e03a      	b.n	8004b30 <_printf_i+0xa8>
 8004aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004abe:	2b15      	cmp	r3, #21
 8004ac0:	d8f6      	bhi.n	8004ab0 <_printf_i+0x28>
 8004ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ac8 <_printf_i+0x40>)
 8004ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	08004b35 	.word	0x08004b35
 8004ad0:	08004ab1 	.word	0x08004ab1
 8004ad4:	08004ab1 	.word	0x08004ab1
 8004ad8:	08004ab1 	.word	0x08004ab1
 8004adc:	08004ab1 	.word	0x08004ab1
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004ab1 	.word	0x08004ab1
 8004ae8:	08004ab1 	.word	0x08004ab1
 8004aec:	08004ab1 	.word	0x08004ab1
 8004af0:	08004ab1 	.word	0x08004ab1
 8004af4:	08004c33 	.word	0x08004c33
 8004af8:	08004b5f 	.word	0x08004b5f
 8004afc:	08004bed 	.word	0x08004bed
 8004b00:	08004ab1 	.word	0x08004ab1
 8004b04:	08004ab1 	.word	0x08004ab1
 8004b08:	08004c55 	.word	0x08004c55
 8004b0c:	08004ab1 	.word	0x08004ab1
 8004b10:	08004b5f 	.word	0x08004b5f
 8004b14:	08004ab1 	.word	0x08004ab1
 8004b18:	08004ab1 	.word	0x08004ab1
 8004b1c:	08004bf5 	.word	0x08004bf5
 8004b20:	6833      	ldr	r3, [r6, #0]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6032      	str	r2, [r6, #0]
 8004b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b30:	2301      	movs	r3, #1
 8004b32:	e09c      	b.n	8004c6e <_printf_i+0x1e6>
 8004b34:	6833      	ldr	r3, [r6, #0]
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	1d19      	adds	r1, r3, #4
 8004b3a:	6031      	str	r1, [r6, #0]
 8004b3c:	0606      	lsls	r6, r0, #24
 8004b3e:	d501      	bpl.n	8004b44 <_printf_i+0xbc>
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	e003      	b.n	8004b4c <_printf_i+0xc4>
 8004b44:	0645      	lsls	r5, r0, #25
 8004b46:	d5fb      	bpl.n	8004b40 <_printf_i+0xb8>
 8004b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	da03      	bge.n	8004b58 <_printf_i+0xd0>
 8004b50:	232d      	movs	r3, #45	@ 0x2d
 8004b52:	426d      	negs	r5, r5
 8004b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b58:	4858      	ldr	r0, [pc, #352]	@ (8004cbc <_printf_i+0x234>)
 8004b5a:	230a      	movs	r3, #10
 8004b5c:	e011      	b.n	8004b82 <_printf_i+0xfa>
 8004b5e:	6821      	ldr	r1, [r4, #0]
 8004b60:	6833      	ldr	r3, [r6, #0]
 8004b62:	0608      	lsls	r0, r1, #24
 8004b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b68:	d402      	bmi.n	8004b70 <_printf_i+0xe8>
 8004b6a:	0649      	lsls	r1, r1, #25
 8004b6c:	bf48      	it	mi
 8004b6e:	b2ad      	uxthmi	r5, r5
 8004b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b72:	4852      	ldr	r0, [pc, #328]	@ (8004cbc <_printf_i+0x234>)
 8004b74:	6033      	str	r3, [r6, #0]
 8004b76:	bf14      	ite	ne
 8004b78:	230a      	movne	r3, #10
 8004b7a:	2308      	moveq	r3, #8
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b82:	6866      	ldr	r6, [r4, #4]
 8004b84:	60a6      	str	r6, [r4, #8]
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	db05      	blt.n	8004b96 <_printf_i+0x10e>
 8004b8a:	6821      	ldr	r1, [r4, #0]
 8004b8c:	432e      	orrs	r6, r5
 8004b8e:	f021 0104 	bic.w	r1, r1, #4
 8004b92:	6021      	str	r1, [r4, #0]
 8004b94:	d04b      	beq.n	8004c2e <_printf_i+0x1a6>
 8004b96:	4616      	mov	r6, r2
 8004b98:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b9c:	fb03 5711 	mls	r7, r3, r1, r5
 8004ba0:	5dc7      	ldrb	r7, [r0, r7]
 8004ba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ba6:	462f      	mov	r7, r5
 8004ba8:	42bb      	cmp	r3, r7
 8004baa:	460d      	mov	r5, r1
 8004bac:	d9f4      	bls.n	8004b98 <_printf_i+0x110>
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d10b      	bne.n	8004bca <_printf_i+0x142>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	07df      	lsls	r7, r3, #31
 8004bb6:	d508      	bpl.n	8004bca <_printf_i+0x142>
 8004bb8:	6923      	ldr	r3, [r4, #16]
 8004bba:	6861      	ldr	r1, [r4, #4]
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	bfde      	ittt	le
 8004bc0:	2330      	movle	r3, #48	@ 0x30
 8004bc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bca:	1b92      	subs	r2, r2, r6
 8004bcc:	6122      	str	r2, [r4, #16]
 8004bce:	f8cd a000 	str.w	sl, [sp]
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	aa03      	add	r2, sp, #12
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4640      	mov	r0, r8
 8004bda:	f7ff fee7 	bl	80049ac <_printf_common>
 8004bde:	3001      	adds	r0, #1
 8004be0:	d14a      	bne.n	8004c78 <_printf_i+0x1f0>
 8004be2:	f04f 30ff 	mov.w	r0, #4294967295
 8004be6:	b004      	add	sp, #16
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f043 0320 	orr.w	r3, r3, #32
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	4832      	ldr	r0, [pc, #200]	@ (8004cc0 <_printf_i+0x238>)
 8004bf6:	2778      	movs	r7, #120	@ 0x78
 8004bf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	6831      	ldr	r1, [r6, #0]
 8004c00:	061f      	lsls	r7, r3, #24
 8004c02:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c06:	d402      	bmi.n	8004c0e <_printf_i+0x186>
 8004c08:	065f      	lsls	r7, r3, #25
 8004c0a:	bf48      	it	mi
 8004c0c:	b2ad      	uxthmi	r5, r5
 8004c0e:	6031      	str	r1, [r6, #0]
 8004c10:	07d9      	lsls	r1, r3, #31
 8004c12:	bf44      	itt	mi
 8004c14:	f043 0320 	orrmi.w	r3, r3, #32
 8004c18:	6023      	strmi	r3, [r4, #0]
 8004c1a:	b11d      	cbz	r5, 8004c24 <_printf_i+0x19c>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	e7ad      	b.n	8004b7c <_printf_i+0xf4>
 8004c20:	4826      	ldr	r0, [pc, #152]	@ (8004cbc <_printf_i+0x234>)
 8004c22:	e7e9      	b.n	8004bf8 <_printf_i+0x170>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	f023 0320 	bic.w	r3, r3, #32
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	e7f6      	b.n	8004c1c <_printf_i+0x194>
 8004c2e:	4616      	mov	r6, r2
 8004c30:	e7bd      	b.n	8004bae <_printf_i+0x126>
 8004c32:	6833      	ldr	r3, [r6, #0]
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	6961      	ldr	r1, [r4, #20]
 8004c38:	1d18      	adds	r0, r3, #4
 8004c3a:	6030      	str	r0, [r6, #0]
 8004c3c:	062e      	lsls	r6, r5, #24
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	d501      	bpl.n	8004c46 <_printf_i+0x1be>
 8004c42:	6019      	str	r1, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <_printf_i+0x1c4>
 8004c46:	0668      	lsls	r0, r5, #25
 8004c48:	d5fb      	bpl.n	8004c42 <_printf_i+0x1ba>
 8004c4a:	8019      	strh	r1, [r3, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	4616      	mov	r6, r2
 8004c52:	e7bc      	b.n	8004bce <_printf_i+0x146>
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	6032      	str	r2, [r6, #0]
 8004c5a:	681e      	ldr	r6, [r3, #0]
 8004c5c:	6862      	ldr	r2, [r4, #4]
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7fb fab5 	bl	80001d0 <memchr>
 8004c66:	b108      	cbz	r0, 8004c6c <_printf_i+0x1e4>
 8004c68:	1b80      	subs	r0, r0, r6
 8004c6a:	6060      	str	r0, [r4, #4]
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	2300      	movs	r3, #0
 8004c72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c76:	e7aa      	b.n	8004bce <_printf_i+0x146>
 8004c78:	6923      	ldr	r3, [r4, #16]
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4640      	mov	r0, r8
 8004c80:	47d0      	blx	sl
 8004c82:	3001      	adds	r0, #1
 8004c84:	d0ad      	beq.n	8004be2 <_printf_i+0x15a>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	079b      	lsls	r3, r3, #30
 8004c8a:	d413      	bmi.n	8004cb4 <_printf_i+0x22c>
 8004c8c:	68e0      	ldr	r0, [r4, #12]
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	4298      	cmp	r0, r3
 8004c92:	bfb8      	it	lt
 8004c94:	4618      	movlt	r0, r3
 8004c96:	e7a6      	b.n	8004be6 <_printf_i+0x15e>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	47d0      	blx	sl
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d09d      	beq.n	8004be2 <_printf_i+0x15a>
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	68e3      	ldr	r3, [r4, #12]
 8004caa:	9903      	ldr	r1, [sp, #12]
 8004cac:	1a5b      	subs	r3, r3, r1
 8004cae:	42ab      	cmp	r3, r5
 8004cb0:	dcf2      	bgt.n	8004c98 <_printf_i+0x210>
 8004cb2:	e7eb      	b.n	8004c8c <_printf_i+0x204>
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	f104 0619 	add.w	r6, r4, #25
 8004cba:	e7f5      	b.n	8004ca8 <_printf_i+0x220>
 8004cbc:	0800511d 	.word	0x0800511d
 8004cc0:	0800512e 	.word	0x0800512e

08004cc4 <__sflush_r>:
 8004cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	0716      	lsls	r6, r2, #28
 8004cce:	4605      	mov	r5, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	d454      	bmi.n	8004d7e <__sflush_r+0xba>
 8004cd4:	684b      	ldr	r3, [r1, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	dc02      	bgt.n	8004ce0 <__sflush_r+0x1c>
 8004cda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	dd48      	ble.n	8004d72 <__sflush_r+0xae>
 8004ce0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d045      	beq.n	8004d72 <__sflush_r+0xae>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004cec:	682f      	ldr	r7, [r5, #0]
 8004cee:	6a21      	ldr	r1, [r4, #32]
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	d030      	beq.n	8004d56 <__sflush_r+0x92>
 8004cf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	0759      	lsls	r1, r3, #29
 8004cfa:	d505      	bpl.n	8004d08 <__sflush_r+0x44>
 8004cfc:	6863      	ldr	r3, [r4, #4]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d02:	b10b      	cbz	r3, 8004d08 <__sflush_r+0x44>
 8004d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d0c:	6a21      	ldr	r1, [r4, #32]
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b0      	blx	r6
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	d106      	bne.n	8004d26 <__sflush_r+0x62>
 8004d18:	6829      	ldr	r1, [r5, #0]
 8004d1a:	291d      	cmp	r1, #29
 8004d1c:	d82b      	bhi.n	8004d76 <__sflush_r+0xb2>
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc8 <__sflush_r+0x104>)
 8004d20:	40ca      	lsrs	r2, r1
 8004d22:	07d6      	lsls	r6, r2, #31
 8004d24:	d527      	bpl.n	8004d76 <__sflush_r+0xb2>
 8004d26:	2200      	movs	r2, #0
 8004d28:	6062      	str	r2, [r4, #4]
 8004d2a:	04d9      	lsls	r1, r3, #19
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	6022      	str	r2, [r4, #0]
 8004d30:	d504      	bpl.n	8004d3c <__sflush_r+0x78>
 8004d32:	1c42      	adds	r2, r0, #1
 8004d34:	d101      	bne.n	8004d3a <__sflush_r+0x76>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	b903      	cbnz	r3, 8004d3c <__sflush_r+0x78>
 8004d3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d3e:	602f      	str	r7, [r5, #0]
 8004d40:	b1b9      	cbz	r1, 8004d72 <__sflush_r+0xae>
 8004d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d46:	4299      	cmp	r1, r3
 8004d48:	d002      	beq.n	8004d50 <__sflush_r+0x8c>
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f7ff fbf4 	bl	8004538 <_free_r>
 8004d50:	2300      	movs	r3, #0
 8004d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d54:	e00d      	b.n	8004d72 <__sflush_r+0xae>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b0      	blx	r6
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	1c50      	adds	r0, r2, #1
 8004d60:	d1c9      	bne.n	8004cf6 <__sflush_r+0x32>
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0c6      	beq.n	8004cf6 <__sflush_r+0x32>
 8004d68:	2b1d      	cmp	r3, #29
 8004d6a:	d001      	beq.n	8004d70 <__sflush_r+0xac>
 8004d6c:	2b16      	cmp	r3, #22
 8004d6e:	d11e      	bne.n	8004dae <__sflush_r+0xea>
 8004d70:	602f      	str	r7, [r5, #0]
 8004d72:	2000      	movs	r0, #0
 8004d74:	e022      	b.n	8004dbc <__sflush_r+0xf8>
 8004d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	e01b      	b.n	8004db6 <__sflush_r+0xf2>
 8004d7e:	690f      	ldr	r7, [r1, #16]
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	d0f6      	beq.n	8004d72 <__sflush_r+0xae>
 8004d84:	0793      	lsls	r3, r2, #30
 8004d86:	680e      	ldr	r6, [r1, #0]
 8004d88:	bf08      	it	eq
 8004d8a:	694b      	ldreq	r3, [r1, #20]
 8004d8c:	600f      	str	r7, [r1, #0]
 8004d8e:	bf18      	it	ne
 8004d90:	2300      	movne	r3, #0
 8004d92:	eba6 0807 	sub.w	r8, r6, r7
 8004d96:	608b      	str	r3, [r1, #8]
 8004d98:	f1b8 0f00 	cmp.w	r8, #0
 8004d9c:	dde9      	ble.n	8004d72 <__sflush_r+0xae>
 8004d9e:	6a21      	ldr	r1, [r4, #32]
 8004da0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004da2:	4643      	mov	r3, r8
 8004da4:	463a      	mov	r2, r7
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b0      	blx	r6
 8004daa:	2800      	cmp	r0, #0
 8004dac:	dc08      	bgt.n	8004dc0 <__sflush_r+0xfc>
 8004dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc0:	4407      	add	r7, r0
 8004dc2:	eba8 0800 	sub.w	r8, r8, r0
 8004dc6:	e7e7      	b.n	8004d98 <__sflush_r+0xd4>
 8004dc8:	20400001 	.word	0x20400001

08004dcc <_fflush_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	b913      	cbnz	r3, 8004ddc <_fflush_r+0x10>
 8004dd6:	2500      	movs	r5, #0
 8004dd8:	4628      	mov	r0, r5
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	b118      	cbz	r0, 8004de6 <_fflush_r+0x1a>
 8004dde:	6a03      	ldr	r3, [r0, #32]
 8004de0:	b90b      	cbnz	r3, 8004de6 <_fflush_r+0x1a>
 8004de2:	f7ff fa91 	bl	8004308 <__sinit>
 8004de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f3      	beq.n	8004dd6 <_fflush_r+0xa>
 8004dee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004df0:	07d0      	lsls	r0, r2, #31
 8004df2:	d404      	bmi.n	8004dfe <_fflush_r+0x32>
 8004df4:	0599      	lsls	r1, r3, #22
 8004df6:	d402      	bmi.n	8004dfe <_fflush_r+0x32>
 8004df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dfa:	f7ff fb9a 	bl	8004532 <__retarget_lock_acquire_recursive>
 8004dfe:	4628      	mov	r0, r5
 8004e00:	4621      	mov	r1, r4
 8004e02:	f7ff ff5f 	bl	8004cc4 <__sflush_r>
 8004e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e08:	07da      	lsls	r2, r3, #31
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	d4e4      	bmi.n	8004dd8 <_fflush_r+0xc>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	059b      	lsls	r3, r3, #22
 8004e12:	d4e1      	bmi.n	8004dd8 <_fflush_r+0xc>
 8004e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e16:	f7ff fb8d 	bl	8004534 <__retarget_lock_release_recursive>
 8004e1a:	e7dd      	b.n	8004dd8 <_fflush_r+0xc>

08004e1c <__swbuf_r>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	460e      	mov	r6, r1
 8004e20:	4614      	mov	r4, r2
 8004e22:	4605      	mov	r5, r0
 8004e24:	b118      	cbz	r0, 8004e2e <__swbuf_r+0x12>
 8004e26:	6a03      	ldr	r3, [r0, #32]
 8004e28:	b90b      	cbnz	r3, 8004e2e <__swbuf_r+0x12>
 8004e2a:	f7ff fa6d 	bl	8004308 <__sinit>
 8004e2e:	69a3      	ldr	r3, [r4, #24]
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	071a      	lsls	r2, r3, #28
 8004e36:	d501      	bpl.n	8004e3c <__swbuf_r+0x20>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	b943      	cbnz	r3, 8004e4e <__swbuf_r+0x32>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 f82a 	bl	8004e98 <__swsetup_r>
 8004e44:	b118      	cbz	r0, 8004e4e <__swbuf_r+0x32>
 8004e46:	f04f 37ff 	mov.w	r7, #4294967295
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	6922      	ldr	r2, [r4, #16]
 8004e52:	1a98      	subs	r0, r3, r2
 8004e54:	6963      	ldr	r3, [r4, #20]
 8004e56:	b2f6      	uxtb	r6, r6
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	4637      	mov	r7, r6
 8004e5c:	dc05      	bgt.n	8004e6a <__swbuf_r+0x4e>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f7ff ffb3 	bl	8004dcc <_fflush_r>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d1ed      	bne.n	8004e46 <__swbuf_r+0x2a>
 8004e6a:	68a3      	ldr	r3, [r4, #8]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	60a3      	str	r3, [r4, #8]
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	6022      	str	r2, [r4, #0]
 8004e76:	701e      	strb	r6, [r3, #0]
 8004e78:	6962      	ldr	r2, [r4, #20]
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d004      	beq.n	8004e8a <__swbuf_r+0x6e>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	07db      	lsls	r3, r3, #31
 8004e84:	d5e1      	bpl.n	8004e4a <__swbuf_r+0x2e>
 8004e86:	2e0a      	cmp	r6, #10
 8004e88:	d1df      	bne.n	8004e4a <__swbuf_r+0x2e>
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f7ff ff9d 	bl	8004dcc <_fflush_r>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d0d9      	beq.n	8004e4a <__swbuf_r+0x2e>
 8004e96:	e7d6      	b.n	8004e46 <__swbuf_r+0x2a>

08004e98 <__swsetup_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4b29      	ldr	r3, [pc, #164]	@ (8004f40 <__swsetup_r+0xa8>)
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	b118      	cbz	r0, 8004eac <__swsetup_r+0x14>
 8004ea4:	6a03      	ldr	r3, [r0, #32]
 8004ea6:	b90b      	cbnz	r3, 8004eac <__swsetup_r+0x14>
 8004ea8:	f7ff fa2e 	bl	8004308 <__sinit>
 8004eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb0:	0719      	lsls	r1, r3, #28
 8004eb2:	d422      	bmi.n	8004efa <__swsetup_r+0x62>
 8004eb4:	06da      	lsls	r2, r3, #27
 8004eb6:	d407      	bmi.n	8004ec8 <__swsetup_r+0x30>
 8004eb8:	2209      	movs	r2, #9
 8004eba:	602a      	str	r2, [r5, #0]
 8004ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec0:	81a3      	strh	r3, [r4, #12]
 8004ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec6:	e033      	b.n	8004f30 <__swsetup_r+0x98>
 8004ec8:	0758      	lsls	r0, r3, #29
 8004eca:	d512      	bpl.n	8004ef2 <__swsetup_r+0x5a>
 8004ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ece:	b141      	cbz	r1, 8004ee2 <__swsetup_r+0x4a>
 8004ed0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ed4:	4299      	cmp	r1, r3
 8004ed6:	d002      	beq.n	8004ede <__swsetup_r+0x46>
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f7ff fb2d 	bl	8004538 <_free_r>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ee8:	81a3      	strh	r3, [r4, #12]
 8004eea:	2300      	movs	r3, #0
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	6923      	ldr	r3, [r4, #16]
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	f043 0308 	orr.w	r3, r3, #8
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	b94b      	cbnz	r3, 8004f12 <__swsetup_r+0x7a>
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f08:	d003      	beq.n	8004f12 <__swsetup_r+0x7a>
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 f84f 	bl	8004fb0 <__smakebuf_r>
 8004f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f16:	f013 0201 	ands.w	r2, r3, #1
 8004f1a:	d00a      	beq.n	8004f32 <__swsetup_r+0x9a>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	60a2      	str	r2, [r4, #8]
 8004f20:	6962      	ldr	r2, [r4, #20]
 8004f22:	4252      	negs	r2, r2
 8004f24:	61a2      	str	r2, [r4, #24]
 8004f26:	6922      	ldr	r2, [r4, #16]
 8004f28:	b942      	cbnz	r2, 8004f3c <__swsetup_r+0xa4>
 8004f2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f2e:	d1c5      	bne.n	8004ebc <__swsetup_r+0x24>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	0799      	lsls	r1, r3, #30
 8004f34:	bf58      	it	pl
 8004f36:	6962      	ldrpl	r2, [r4, #20]
 8004f38:	60a2      	str	r2, [r4, #8]
 8004f3a:	e7f4      	b.n	8004f26 <__swsetup_r+0x8e>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e7f7      	b.n	8004f30 <__swsetup_r+0x98>
 8004f40:	20000024 	.word	0x20000024

08004f44 <_sbrk_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d06      	ldr	r5, [pc, #24]	@ (8004f60 <_sbrk_r+0x1c>)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	f7fb fec6 	bl	8000ce0 <_sbrk>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d102      	bne.n	8004f5e <_sbrk_r+0x1a>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	b103      	cbz	r3, 8004f5e <_sbrk_r+0x1a>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	2000031c 	.word	0x2000031c

08004f64 <__swhatbuf_r>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	460c      	mov	r4, r1
 8004f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	b096      	sub	sp, #88	@ 0x58
 8004f70:	4615      	mov	r5, r2
 8004f72:	461e      	mov	r6, r3
 8004f74:	da0d      	bge.n	8004f92 <__swhatbuf_r+0x2e>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f7c:	f04f 0100 	mov.w	r1, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2340      	movne	r3, #64	@ 0x40
 8004f84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f88:	2000      	movs	r0, #0
 8004f8a:	6031      	str	r1, [r6, #0]
 8004f8c:	602b      	str	r3, [r5, #0]
 8004f8e:	b016      	add	sp, #88	@ 0x58
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
 8004f92:	466a      	mov	r2, sp
 8004f94:	f000 f848 	bl	8005028 <_fstat_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	dbec      	blt.n	8004f76 <__swhatbuf_r+0x12>
 8004f9c:	9901      	ldr	r1, [sp, #4]
 8004f9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fa6:	4259      	negs	r1, r3
 8004fa8:	4159      	adcs	r1, r3
 8004faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fae:	e7eb      	b.n	8004f88 <__swhatbuf_r+0x24>

08004fb0 <__smakebuf_r>:
 8004fb0:	898b      	ldrh	r3, [r1, #12]
 8004fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb4:	079d      	lsls	r5, r3, #30
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	d507      	bpl.n	8004fcc <__smakebuf_r+0x1c>
 8004fbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	6163      	str	r3, [r4, #20]
 8004fc8:	b003      	add	sp, #12
 8004fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fcc:	ab01      	add	r3, sp, #4
 8004fce:	466a      	mov	r2, sp
 8004fd0:	f7ff ffc8 	bl	8004f64 <__swhatbuf_r>
 8004fd4:	9f00      	ldr	r7, [sp, #0]
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7ff fb18 	bl	8004610 <_malloc_r>
 8004fe0:	b948      	cbnz	r0, 8004ff6 <__smakebuf_r+0x46>
 8004fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe6:	059a      	lsls	r2, r3, #22
 8004fe8:	d4ee      	bmi.n	8004fc8 <__smakebuf_r+0x18>
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	f043 0302 	orr.w	r3, r3, #2
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	e7e2      	b.n	8004fbc <__smakebuf_r+0xc>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	6020      	str	r0, [r4, #0]
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005006:	b15b      	cbz	r3, 8005020 <__smakebuf_r+0x70>
 8005008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f81d 	bl	800504c <_isatty_r>
 8005012:	b128      	cbz	r0, 8005020 <__smakebuf_r+0x70>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	431d      	orrs	r5, r3
 8005024:	81a5      	strh	r5, [r4, #12]
 8005026:	e7cf      	b.n	8004fc8 <__smakebuf_r+0x18>

08005028 <_fstat_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d07      	ldr	r5, [pc, #28]	@ (8005048 <_fstat_r+0x20>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	f7fb fe2b 	bl	8000c90 <_fstat>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	d102      	bne.n	8005044 <_fstat_r+0x1c>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b103      	cbz	r3, 8005044 <_fstat_r+0x1c>
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop
 8005048:	2000031c 	.word	0x2000031c

0800504c <_isatty_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	@ (8005068 <_isatty_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fb fe2a 	bl	8000cb0 <_isatty>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_isatty_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_isatty_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	2000031c 	.word	0x2000031c

0800506c <_init>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr

08005078 <_fini>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr
