
08_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800553c  0800553c  0000653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d0  080055d0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055d0  080055d0  000065d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d8  080055d8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055dc  080055dc  000065dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080055e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  08005648  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005648  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b3  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6f  00000000  00000000  0001484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000165c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000916  00000000  00000000  00017198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028307  00000000  00000000  00017aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d625  00000000  00000000  0003fdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc2e8  00000000  00000000  0004d3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001496c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  00149708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014cf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005524 	.word	0x08005524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005524 	.word	0x08005524

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4907      	ldr	r1, [pc, #28]	@ (80005d4 <__NVIC_EnableIRQ+0x38>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0a      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	490c      	ldr	r1, [pc, #48]	@ (8000624 <__NVIC_SetPriority+0x4c>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000600:	e00a      	b.n	8000618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	@ (8000628 <__NVIC_SetPriority+0x50>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	3b04      	subs	r3, #4
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	440b      	add	r3, r1
 8000616:	761a      	strb	r2, [r3, #24]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__io_putchar>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int __io_putchar(int ch)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 10);
 8000634:	1d39      	adds	r1, r7, #4
 8000636:	230a      	movs	r3, #10
 8000638:	2201      	movs	r2, #1
 800063a:	4804      	ldr	r0, [pc, #16]	@ (800064c <__io_putchar+0x20>)
 800063c:	f003 fae6 	bl	8003c0c <HAL_UART_Transmit>
	return ch;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000084 	.word	0x20000084

08000650 <adc_pa0_interrupt_init>:

uint32_t adcValue ;
ADC_HandleTypeDef  hadc1;
void adc_pa0_interrupt_init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]

    __HAL_RCC_ADC_CLK_ENABLE();
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <adc_pa0_interrupt_init+0xac>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066c:	4a23      	ldr	r2, [pc, #140]	@ (80006fc <adc_pa0_interrupt_init+0xac>)
 800066e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <adc_pa0_interrupt_init+0xac>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

    hadc1.Instance = ADC1;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 8000682:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <adc_pa0_interrupt_init+0xb4>)
 8000684:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 8000688:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800068c:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 8000696:	2201      	movs	r2, #1
 8000698:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	615a      	str	r2, [r3, #20]

    HAL_ADC_Init(&hadc1);
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006ca:	f000 fd93 	bl	80011f4 <HAL_ADC_Init>

    sConfig.Channel = ADC_CHANNEL_5;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <adc_pa0_interrupt_init+0xb8>)
 80006d0:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d2:	2306      	movs	r3, #6
 80006d4:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006d6:	2307      	movs	r3, #7
 80006d8:	613b      	str	r3, [r7, #16]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	@ (8000700 <adc_pa0_interrupt_init+0xb0>)
 80006e2:	f001 f805 	bl	80016f0 <HAL_ADC_ConfigChannel>

    NVIC_SetPriority(ADC1_2_IRQn, 0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2012      	movs	r0, #18
 80006ea:	f7ff ff75 	bl	80005d8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(ADC1_2_IRQn);
 80006ee:	2012      	movs	r0, #18
 80006f0:	f7ff ff54 	bl	800059c <__NVIC_EnableIRQ>
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000
 8000700:	20000110 	.word	0x20000110
 8000704:	50040000 	.word	0x50040000
 8000708:	14f00020 	.word	0x14f00020

0800070c <adc_init_start>:
void adc_init_start(void)
 {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	 adc_pa0_interrupt_init();
 8000710:	f7ff ff9e 	bl	8000650 <adc_pa0_interrupt_init>
 }
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <main>:

	adcValue = HAL_ADC_GetValue(&hadc1);
}

int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fb08 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f820 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f8a0 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000728:	f000 f86e 	bl	8000808 <MX_USART2_UART_Init>
  //MX_ADC1_Init();
  adc_init_start();
 800072c:	f7ff ffee 	bl	800070c <adc_init_start>
  HAL_ADC_Start_IT(&hadc1);
 8000730:	4808      	ldr	r0, [pc, #32]	@ (8000754 <main+0x3c>)
 8000732:	f000 feaf 	bl	8001494 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hi");
 8000736:	4808      	ldr	r0, [pc, #32]	@ (8000758 <main+0x40>)
 8000738:	f004 f888 	bl	800484c <iprintf>
  while (1)
  {

	  	 printf("ADC Value %lu \r\n",adcValue);
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <main+0x44>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	@ (8000760 <main+0x48>)
 8000744:	f004 f882 	bl	800484c <iprintf>
	      /* Delay for 100 milliseconds */
	  	 HAL_Delay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f000 fb6c 	bl	8000e28 <HAL_Delay>
	  	 printf("ADC Value %lu \r\n",adcValue);
 8000750:	bf00      	nop
 8000752:	e7f3      	b.n	800073c <main+0x24>
 8000754:	20000110 	.word	0x20000110
 8000758:	0800553c 	.word	0x0800553c
 800075c:	2000010c 	.word	0x2000010c
 8000760:	08005540 	.word	0x08005540

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	@ 0x58
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2244      	movs	r2, #68	@ 0x44
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 f8bf 	bl	80048f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000786:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078a:	f001 fedf 	bl	800254c <HAL_PWREx_ControlVoltageScaling>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000794:	f000 f8ce 	bl	8000934 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007aa:	2302      	movs	r3, #2
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b2:	230a      	movs	r3, #10
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 ff16 	bl	80025f8 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007d2:	f000 f8af 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2104      	movs	r1, #4
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fade 	bl	8002db0 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fa:	f000 f89b 	bl	8000934 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3758      	adds	r7, #88	@ 0x58
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	@ (8000864 <MX_USART2_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_USART2_UART_Init+0x58>)
 800084c:	f003 f990 	bl	8003b70 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f86d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000084 	.word	0x20000084
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a2a      	ldr	r2, [pc, #168]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a24      	ldr	r2, [pc, #144]	@ (800092c <MX_GPIO_Init+0xc4>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a18      	ldr	r2, [pc, #96]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f001 fe0b 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0xc8>)
 8000902:	f001 fc53 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000906:	2320      	movs	r3, #32
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f001 fc44 	bl	80021ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	@ 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	@ (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	@ 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	@ 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0ac      	sub	sp, #176	@ 0xb0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2288      	movs	r2, #136	@ 0x88
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 ffa4 	bl	80048f6 <memset>
  if(hadc->Instance==ADC1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a27      	ldr	r2, [pc, #156]	@ (8000a50 <HAL_ADC_MspInit+0xc8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d146      	bne.n	8000a46 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009ce:	2308      	movs	r3, #8
 80009d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009e2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fc05 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009f4:	f7ff ff9e 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_ADC_MspInit+0xcc>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <HAL_ADC_MspInit+0xcc>)
 80009fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <HAL_ADC_MspInit+0xcc>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_ADC_MspInit+0xcc>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_ADC_MspInit+0xcc>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_ADC_MspInit+0xcc>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <HAL_ADC_MspInit+0xd0>)
 8000a42:	f001 fbb3 	bl	80021ac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	37b0      	adds	r7, #176	@ 0xb0
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	50040000 	.word	0x50040000
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000800 	.word	0x48000800

08000a5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2288      	movs	r2, #136	@ 0x88
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 ff3a 	bl	80048f6 <memset>
  if(huart->Instance==USART2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <HAL_UART_MspInit+0xb0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d13b      	bne.n	8000b04 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fbad 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa4:	f7ff ff46 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aac:	4a18      	ldr	r2, [pc, #96]	@ (8000b10 <HAL_UART_MspInit+0xb4>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <HAL_UART_MspInit+0xb4>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af0:	2307      	movs	r3, #7
 8000af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b00:	f001 fb54 	bl	80021ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	37b0      	adds	r7, #176	@ 0xb0
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f93d 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00a      	b.n	8000b9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b84:	f3af 8000 	nop.w
 8000b88:	4601      	mov	r1, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	60ba      	str	r2, [r7, #8]
 8000b90:	b2ca      	uxtb	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dbf0      	blt.n	8000b84 <_read+0x12>
  }

  return len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e009      	b.n	8000bd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	60ba      	str	r2, [r7, #8]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fd30 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	dbf1      	blt.n	8000bbe <_write+0x12>
  }
  return len;
 8000bda:	687b      	ldr	r3, [r7, #4]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_close>:

int _close(int file)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c0c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_isatty>:

int _isatty(int file)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c24:	2301      	movs	r3, #1
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f003 fe8a 	bl	8004994 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20018000 	.word	0x20018000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	20000174 	.word	0x20000174
 8000cb4:	200002c8 	.word	0x200002c8

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce0:	f7ff ffea 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f003 fe49 	bl	80049a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fd03 	bl	8000718 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d20:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 8000d24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d28:	200002c8 	.word	0x200002c8

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <HAL_Init+0x3c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <HAL_Init+0x3c>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d46:	2003      	movs	r0, #3
 8000d48:	f001 f9fc 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f000 f80f 	bl	8000d70 <HAL_InitTick>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	e001      	b.n	8000d62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d5e:	f7ff fdef 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <HAL_InitTick+0x6c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d023      	beq.n	8000dcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_InitTick+0x70>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <HAL_InitTick+0x6c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f9f9 	bl	8002192 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10f      	bne.n	8000dc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d809      	bhi.n	8000dc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f001 f9d1 	bl	800215a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <HAL_InitTick+0x74>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e004      	b.n	8000dd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e001      	b.n	8000dd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000178 	.word	0x20000178

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000178 	.word	0x20000178

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	609a      	str	r2, [r3, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3360      	adds	r3, #96	@ 0x60
 8000eea:	461a      	mov	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <LL_ADC_SetOffset+0x44>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	4313      	orrs	r3, r2
 8000f08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	03fff000 	.word	0x03fff000

08000f20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3360      	adds	r3, #96	@ 0x60
 8000f2e:	461a      	mov	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3360      	adds	r3, #96	@ 0x60
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b087      	sub	sp, #28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3330      	adds	r3, #48	@ 0x30
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	4413      	add	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	211f      	movs	r1, #31
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	0e9b      	lsrs	r3, r3, #26
 8000fba:	f003 011f 	and.w	r1, r3, #31
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b087      	sub	sp, #28
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3314      	adds	r3, #20
 8000fea:	461a      	mov	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	0e5b      	lsrs	r3, r3, #25
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	0d1b      	lsrs	r3, r3, #20
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	2107      	movs	r1, #7
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	0d1b      	lsrs	r3, r3, #20
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	431a      	orrs	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001048:	43db      	mvns	r3, r3
 800104a:	401a      	ands	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0318 	and.w	r3, r3, #24
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001054:	40d9      	lsrs	r1, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	400b      	ands	r3, r1
 800105a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800105e:	431a      	orrs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	0007ffff 	.word	0x0007ffff

08001078 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 031f 	and.w	r3, r3, #31
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80010a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6093      	str	r3, [r2, #8]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800111c:	d101      	bne.n	8001122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <LL_ADC_IsEnabled+0x18>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <LL_ADC_IsEnabled+0x1a>
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800118e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001192:	f043 0204 	orr.w	r2, r3, #4
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d101      	bne.n	80011be <LL_ADC_REG_IsConversionOngoing+0x18>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d101      	bne.n	80011e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e130      	b.n	8001470 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fbb3 	bl	8000988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff3f 	bl	80010b8 <LL_ADC_IsDeepPowerDownEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff25 	bl	8001094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff5a 	bl	8001108 <LL_ADC_IsInternalRegulatorEnabled>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d115      	bne.n	8001286 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff3e 	bl	80010e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001264:	4b84      	ldr	r3, [pc, #528]	@ (8001478 <HAL_ADC_Init+0x284>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	4a84      	ldr	r2, [pc, #528]	@ (800147c <HAL_ADC_Init+0x288>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	099b      	lsrs	r3, r3, #6
 8001272:	3301      	adds	r3, #1
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001278:	e002      	b.n	8001280 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3b01      	subs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f9      	bne.n	800127a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff3c 	bl	8001108 <LL_ADC_IsInternalRegulatorEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10d      	bne.n	80012b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129a:	f043 0210 	orr.w	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff75 	bl	80011a6 <LL_ADC_REG_IsConversionOngoing>
 80012bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80c9 	bne.w	800145e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 80c5 	bne.w	800145e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80012dc:	f043 0202 	orr.w	r2, r3, #2
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff35 	bl	8001158 <LL_ADC_IsEnabled>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f4:	4862      	ldr	r0, [pc, #392]	@ (8001480 <HAL_ADC_Init+0x28c>)
 80012f6:	f7ff ff2f 	bl	8001158 <LL_ADC_IsEnabled>
 80012fa:	4604      	mov	r4, r0
 80012fc:	4861      	ldr	r0, [pc, #388]	@ (8001484 <HAL_ADC_Init+0x290>)
 80012fe:	f7ff ff2b 	bl	8001158 <LL_ADC_IsEnabled>
 8001302:	4603      	mov	r3, r0
 8001304:	431c      	orrs	r4, r3
 8001306:	4860      	ldr	r0, [pc, #384]	@ (8001488 <HAL_ADC_Init+0x294>)
 8001308:	f7ff ff26 	bl	8001158 <LL_ADC_IsEnabled>
 800130c:	4603      	mov	r3, r0
 800130e:	4323      	orrs	r3, r4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4619      	mov	r1, r3
 800131a:	485c      	ldr	r0, [pc, #368]	@ (800148c <HAL_ADC_Init+0x298>)
 800131c:	f7ff fda8 	bl	8000e70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e5b      	ldrb	r3, [r3, #25]
 8001324:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800132a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001330:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001336:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d106      	bne.n	800135c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	3b01      	subs	r3, #1
 8001354:	045b      	lsls	r3, r3, #17
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <HAL_ADC_Init+0x29c>)
 8001380:	4013      	ands	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	430b      	orrs	r3, r1
 800138a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff1b 	bl	80011cc <LL_ADC_INJ_IsConversionOngoing>
 8001396:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d13d      	bne.n	800141a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d13a      	bne.n	800141a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013a8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013b0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	69b9      	ldr	r1, [r7, #24]
 80013ca:	430b      	orrs	r3, r1
 80013cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d118      	bne.n	800140a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013e2:	f023 0304 	bic.w	r3, r3, #4
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013ee:	4311      	orrs	r1, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013f4:	4311      	orrs	r1, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80013fa:	430a      	orrs	r2, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	e007      	b.n	800141a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10c      	bne.n	800143c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	f023 010f 	bic.w	r1, r3, #15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	631a      	str	r2, [r3, #48]	@ 0x30
 800143a:	e007      	b.n	800144c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 020f 	bic.w	r2, r2, #15
 800144a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	f023 0303 	bic.w	r3, r3, #3
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	655a      	str	r2, [r3, #84]	@ 0x54
 800145c:	e007      	b.n	800146e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001462:	f043 0210 	orr.w	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800146e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3724      	adds	r7, #36	@ 0x24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	20000000 	.word	0x20000000
 800147c:	053e2d63 	.word	0x053e2d63
 8001480:	50040000 	.word	0x50040000
 8001484:	50040100 	.word	0x50040100
 8001488:	50040200 	.word	0x50040200
 800148c:	50040300 	.word	0x50040300
 8001490:	fff0c007 	.word	0xfff0c007

08001494 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800149c:	4891      	ldr	r0, [pc, #580]	@ (80016e4 <HAL_ADC_Start_IT+0x250>)
 800149e:	f7ff fdeb 	bl	8001078 <LL_ADC_GetMultimode>
 80014a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe7c 	bl	80011a6 <LL_ADC_REG_IsConversionOngoing>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 8110 	bne.w	80016d6 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_Start_IT+0x30>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e10b      	b.n	80016dc <HAL_ADC_Start_IT+0x248>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fd01 	bl	8001ed4 <ADC_Enable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 80f7 	bne.w	80016cc <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7c      	ldr	r2, [pc, #496]	@ (80016e8 <HAL_ADC_Start_IT+0x254>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d002      	beq.n	8001502 <HAL_ADC_Start_IT+0x6e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	e000      	b.n	8001504 <HAL_ADC_Start_IT+0x70>
 8001502:	4b7a      	ldr	r3, [pc, #488]	@ (80016ec <HAL_ADC_Start_IT+0x258>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	4293      	cmp	r3, r2
 800150a:	d002      	beq.n	8001512 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001516:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f023 0206 	bic.w	r2, r3, #6
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	@ 0x58
 8001536:	e002      	b.n	800153e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	221c      	movs	r2, #28
 8001544:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 021c 	bic.w	r2, r2, #28
 800155c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b08      	cmp	r3, #8
 8001564:	d108      	bne.n	8001578 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0208 	orr.w	r2, r2, #8
 8001574:	605a      	str	r2, [r3, #4]
          break;
 8001576:	e008      	b.n	800158a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0204 	orr.w	r2, r2, #4
 8001586:	605a      	str	r2, [r3, #4]
          break;
 8001588:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158e:	2b00      	cmp	r3, #0
 8001590:	d107      	bne.n	80015a2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0210 	orr.w	r2, r2, #16
 80015a0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a50      	ldr	r2, [pc, #320]	@ (80016e8 <HAL_ADC_Start_IT+0x254>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d002      	beq.n	80015b2 <HAL_ADC_Start_IT+0x11e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_Start_IT+0x120>
 80015b2:	4b4e      	ldr	r3, [pc, #312]	@ (80016ec <HAL_ADC_Start_IT+0x258>)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d008      	beq.n	80015ce <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d002      	beq.n	80015ce <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d13a      	bne.n	8001644 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d02d      	beq.n	8001638 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d110      	bne.n	8001616 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0220 	bic.w	r2, r2, #32
 8001602:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001612:	605a      	str	r2, [r3, #4]
              break;
 8001614:	e010      	b.n	8001638 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001624:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	605a      	str	r2, [r3, #4]
              break;
 8001636:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fd9e 	bl	800117e <LL_ADC_REG_StartConversion>
 8001642:	e04a      	b.n	80016da <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001648:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a24      	ldr	r2, [pc, #144]	@ (80016e8 <HAL_ADC_Start_IT+0x254>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d002      	beq.n	8001660 <HAL_ADC_Start_IT+0x1cc>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	e000      	b.n	8001662 <HAL_ADC_Start_IT+0x1ce>
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <HAL_ADC_Start_IT+0x258>)
 8001662:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d034      	beq.n	80016da <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001674:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001678:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b08      	cmp	r3, #8
 8001686:	d110      	bne.n	80016aa <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0220 	bic.w	r2, r2, #32
 8001696:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016a6:	605a      	str	r2, [r3, #4]
              break;
 80016a8:	e017      	b.n	80016da <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0220 	orr.w	r2, r2, #32
 80016c8:	605a      	str	r2, [r3, #4]
              break;
 80016ca:	e006      	b.n	80016da <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80016d4:	e001      	b.n	80016da <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	50040300 	.word	0x50040300
 80016e8:	50040100 	.word	0x50040100
 80016ec:	50040000 	.word	0x50040000

080016f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0b6      	sub	sp, #216	@ 0xd8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x22>
 800170e:	2302      	movs	r3, #2
 8001710:	e3c9      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x7b6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd41 	bl	80011a6 <LL_ADC_REG_IsConversionOngoing>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 83aa 	bne.w	8001e80 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d824      	bhi.n	8001786 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	3b02      	subs	r3, #2
 8001742:	2b03      	cmp	r3, #3
 8001744:	d81b      	bhi.n	800177e <HAL_ADC_ConfigChannel+0x8e>
 8001746:	a201      	add	r2, pc, #4	@ (adr r2, 800174c <HAL_ADC_ConfigChannel+0x5c>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800175d 	.word	0x0800175d
 8001750:	08001765 	.word	0x08001765
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001775 	.word	0x08001775
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800175c:	230c      	movs	r3, #12
 800175e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001762:	e010      	b.n	8001786 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001764:	2312      	movs	r3, #18
 8001766:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800176a:	e00c      	b.n	8001786 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800176c:	2318      	movs	r3, #24
 800176e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001772:	e008      	b.n	8001786 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001778:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800177c:	e003      	b.n	8001786 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800177e:	2306      	movs	r3, #6
 8001780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001784:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001794:	f7ff fbf5 	bl	8000f82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fd02 	bl	80011a6 <LL_ADC_REG_IsConversionOngoing>
 80017a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd0e 	bl	80011cc <LL_ADC_INJ_IsConversionOngoing>
 80017b0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 81a4 	bne.w	8001b06 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 819f 	bne.w	8001b06 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	461a      	mov	r2, r3
 80017d6:	f7ff fc00 	bl	8000fda <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d00a      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6919      	ldr	r1, [r3, #16]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800180c:	f7ff fb64 	bl	8000ed8 <LL_ADC_SetOffset>
 8001810:	e179      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fb81 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_ADC_ConfigChannel+0x14e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb76 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	0e9b      	lsrs	r3, r3, #26
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	e01e      	b.n	800187c <HAL_ADC_ConfigChannel+0x18c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb6b 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800185c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800186c:	2320      	movs	r3, #32
 800186e:	e004      	b.n	800187a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1a4>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0e9b      	lsrs	r3, r3, #26
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	e018      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x1d6>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80018a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80018b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e004      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d106      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb3a 	bl	8000f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fb1e 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x214>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb13 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	f003 021f 	and.w	r2, r3, #31
 8001902:	e01e      	b.n	8001942 <HAL_ADC_ConfigChannel+0x252>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb08 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001922:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800192a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001932:	2320      	movs	r3, #32
 8001934:	e004      	b.n	8001940 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ADC_ConfigChannel+0x26a>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0e9b      	lsrs	r3, r3, #26
 8001954:	f003 031f 	and.w	r3, r3, #31
 8001958:	e018      	b.n	800198c <HAL_ADC_ConfigChannel+0x29c>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800196e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001972:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800197e:	2320      	movs	r3, #32
 8001980:	e004      	b.n	800198c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001982:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800198c:	429a      	cmp	r2, r3
 800198e:	d106      	bne.n	800199e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fad7 	bl	8000f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2102      	movs	r1, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fabb 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x2da>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2102      	movs	r1, #2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fab0 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	0e9b      	lsrs	r3, r3, #26
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	e01e      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x318>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2102      	movs	r1, #2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff faa5 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80019e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80019f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80019f8:	2320      	movs	r3, #32
 80019fa:	e004      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80019fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d105      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x330>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	e014      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x35a>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001a2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	e004      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d106      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fa78 	bl	8000f4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2103      	movs	r1, #3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fa5c 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10a      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x398>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2103      	movs	r1, #3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa51 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	0e9b      	lsrs	r3, r3, #26
 8001a82:	f003 021f 	and.w	r2, r3, #31
 8001a86:	e017      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x3c8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fa46 	bl	8000f20 <LL_ADC_GetOffsetChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aa2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e003      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x3e0>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0e9b      	lsrs	r3, r3, #26
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	e011      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x404>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	e003      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001aec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	2103      	movs	r1, #3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fa23 	bl	8000f4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb24 	bl	8001158 <LL_ADC_IsEnabled>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 8140 	bne.w	8001d98 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	461a      	mov	r2, r3
 8001b26:	f7ff fa83 	bl	8001030 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a8f      	ldr	r2, [pc, #572]	@ (8001d6c <HAL_ADC_ConfigChannel+0x67c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	f040 8131 	bne.w	8001d98 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10b      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x46e>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2b09      	cmp	r3, #9
 8001b54:	bf94      	ite	ls
 8001b56:	2301      	movls	r3, #1
 8001b58:	2300      	movhi	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	e019      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x4a2>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b76:	2320      	movs	r3, #32
 8001b78:	e003      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	bf94      	ite	ls
 8001b8c:	2301      	movls	r3, #1
 8001b8e:	2300      	movhi	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d079      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x4c2>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0e9b      	lsrs	r3, r3, #26
 8001ba8:	3301      	adds	r3, #1
 8001baa:	069b      	lsls	r3, r3, #26
 8001bac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bb0:	e015      	b.n	8001bde <HAL_ADC_ConfigChannel+0x4ee>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bc2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	e003      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x50e>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	e017      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x53e>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c16:	2320      	movs	r3, #32
 8001c18:	e003      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	ea42 0103 	orr.w	r1, r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x564>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	3301      	adds	r3, #1
 8001c46:	f003 021f 	and.w	r2, r3, #31
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	051b      	lsls	r3, r3, #20
 8001c52:	e018      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x596>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e003      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c86:	430b      	orrs	r3, r1
 8001c88:	e081      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x5b6>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0e9b      	lsrs	r3, r3, #26
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca4:	e015      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x5e2>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e003      	b.n	8001cca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	069b      	lsls	r3, r3, #26
 8001cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x602>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	e017      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x632>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	61bb      	str	r3, [r7, #24]
  return result;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	ea42 0103 	orr.w	r1, r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x65e>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0e9b      	lsrs	r3, r3, #26
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f003 021f 	and.w	r2, r3, #31
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	051b      	lsls	r3, r3, #20
 8001d48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	e01e      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x69c>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d66:	2320      	movs	r3, #32
 8001d68:	e006      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x688>
 8001d6a:	bf00      	nop
 8001d6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1e      	subs	r3, #30
 8001d86:	051b      	lsls	r3, r3, #20
 8001d88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7ff f921 	bl	8000fda <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d07a      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001da4:	4843      	ldr	r0, [pc, #268]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001da6:	f7ff f889 	bl	8000ebc <LL_ADC_GetCommonPathInternalCh>
 8001daa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a41      	ldr	r2, [pc, #260]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d12c      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d126      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001ebc <HAL_ADC_ConfigChannel+0x7cc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0x6e8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d15d      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ddc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001de0:	4619      	mov	r1, r3
 8001de2:	4834      	ldr	r0, [pc, #208]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001de4:	f7ff f857 	bl	8000e96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001de8:	4b36      	ldr	r3, [pc, #216]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	4a36      	ldr	r2, [pc, #216]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e02:	e002      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f9      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e10:	e040      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ecc <HAL_ADC_ConfigChannel+0x7dc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d118      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d112      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <HAL_ADC_ConfigChannel+0x7cc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x74c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a22      	ldr	r2, [pc, #136]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d12d      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e44:	4619      	mov	r1, r3
 8001e46:	481b      	ldr	r0, [pc, #108]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e48:	f7ff f825 	bl	8000e96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e4c:	e024      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d120      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11a      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <HAL_ADC_ConfigChannel+0x7cc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d115      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e76:	4619      	mov	r1, r3
 8001e78:	480e      	ldr	r0, [pc, #56]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e7a:	f7ff f80c 	bl	8000e96 <LL_ADC_SetCommonPathInternalCh>
 8001e7e:	e00c      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e94:	bf00      	nop
 8001e96:	e000      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ea2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	37d8      	adds	r7, #216	@ 0xd8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	80080000 	.word	0x80080000
 8001eb4:	50040300 	.word	0x50040300
 8001eb8:	c7520000 	.word	0xc7520000
 8001ebc:	50040000 	.word	0x50040000
 8001ec0:	50040200 	.word	0x50040200
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	053e2d63 	.word	0x053e2d63
 8001ecc:	cb840000 	.word	0xcb840000
 8001ed0:	80000001 	.word	0x80000001

08001ed4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f937 	bl	8001158 <LL_ADC_IsEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d169      	bne.n	8001fc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	4b36      	ldr	r3, [pc, #216]	@ (8001fd0 <ADC_Enable+0xfc>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f02:	f043 0210 	orr.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e055      	b.n	8001fc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f906 	bl	8001130 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f24:	482b      	ldr	r0, [pc, #172]	@ (8001fd4 <ADC_Enable+0x100>)
 8001f26:	f7fe ffc9 	bl	8000ebc <LL_ADC_GetCommonPathInternalCh>
 8001f2a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <ADC_Enable+0x104>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <ADC_Enable+0x108>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f4e:	e002      	b.n	8001f56 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe ff58 	bl	8000e10 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f62:	e028      	b.n	8001fb6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f8f5 	bl	8001158 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d104      	bne.n	8001f7e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f8d9 	bl	8001130 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f7e:	f7fe ff47 	bl	8000e10 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d914      	bls.n	8001fb6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d00d      	beq.n	8001fb6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e007      	b.n	8001fc6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d1cf      	bne.n	8001f64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	8000003f 	.word	0x8000003f
 8001fd4:	50040300 	.word	0x50040300
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	053e2d63 	.word	0x053e2d63

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff47 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff5c 	bl	8002028 <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffb0 	bl	8002100 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e17f      	b.n	80024bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8171 	beq.w	80024b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d005      	beq.n	80021ec <HAL_GPIO_Init+0x40>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d130      	bne.n	800224e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002222:	2201      	movs	r2, #1
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 0201 	and.w	r2, r3, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b03      	cmp	r3, #3
 8002258:	d118      	bne.n	800228c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b03      	cmp	r3, #3
 8002296:	d017      	beq.n	80022c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	6939      	ldr	r1, [r7, #16]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80ac 	beq.w	80024b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b5f      	ldr	r3, [pc, #380]	@ (80024dc <HAL_GPIO_Init+0x330>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	4a5e      	ldr	r2, [pc, #376]	@ (80024dc <HAL_GPIO_Init+0x330>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6613      	str	r3, [r2, #96]	@ 0x60
 800236a:	4b5c      	ldr	r3, [pc, #368]	@ (80024dc <HAL_GPIO_Init+0x330>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002376:	4a5a      	ldr	r2, [pc, #360]	@ (80024e0 <HAL_GPIO_Init+0x334>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023a0:	d025      	beq.n	80023ee <HAL_GPIO_Init+0x242>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	@ (80024e4 <HAL_GPIO_Init+0x338>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01f      	beq.n	80023ea <HAL_GPIO_Init+0x23e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4e      	ldr	r2, [pc, #312]	@ (80024e8 <HAL_GPIO_Init+0x33c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0x23a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4d      	ldr	r2, [pc, #308]	@ (80024ec <HAL_GPIO_Init+0x340>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x236>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	@ (80024f0 <HAL_GPIO_Init+0x344>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x232>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4b      	ldr	r2, [pc, #300]	@ (80024f4 <HAL_GPIO_Init+0x348>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	@ (80024f8 <HAL_GPIO_Init+0x34c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x22a>
 80023d2:	2306      	movs	r3, #6
 80023d4:	e00c      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00a      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023da:	2305      	movs	r3, #5
 80023dc:	e008      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023de:	2304      	movs	r3, #4
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023e2:	2303      	movs	r3, #3
 80023e4:	e004      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x244>
 80023ee:	2300      	movs	r3, #0
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	f002 0203 	and.w	r2, r2, #3
 80023f6:	0092      	lsls	r2, r2, #2
 80023f8:	4093      	lsls	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002400:	4937      	ldr	r1, [pc, #220]	@ (80024e0 <HAL_GPIO_Init+0x334>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <HAL_GPIO_Init+0x350>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002432:	4a32      	ldr	r2, [pc, #200]	@ (80024fc <HAL_GPIO_Init+0x350>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002438:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <HAL_GPIO_Init+0x350>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800245c:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_GPIO_Init+0x350>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <HAL_GPIO_Init+0x350>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002486:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_GPIO_Init+0x350>)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800248c:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <HAL_GPIO_Init+0x350>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024b0:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <HAL_GPIO_Init+0x350>)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f47f ae78 	bne.w	80021bc <HAL_GPIO_Init+0x10>
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000
 80024f4:	48001400 	.word	0x48001400
 80024f8:	48001800 	.word	0x48001800
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800251c:	e002      	b.n	8002524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <HAL_PWREx_GetVoltageRange+0x18>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800255a:	d130      	bne.n	80025be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002568:	d038      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256a:	4b20      	ldr	r3, [pc, #128]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002572:	4a1e      	ldr	r2, [pc, #120]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2232      	movs	r2, #50	@ 0x32
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	3301      	adds	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	e002      	b.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b01      	subs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002598:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a4:	d102      	bne.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f2      	bne.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b8:	d110      	bne.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e00f      	b.n	80025de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ca:	d007      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025d4:	4a05      	ldr	r2, [pc, #20]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000
 80025f0:	20000000 	.word	0x20000000
 80025f4:	431bde83 	.word	0x431bde83

080025f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e3ca      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260a:	4b97      	ldr	r3, [pc, #604]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002614:	4b94      	ldr	r3, [pc, #592]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80e4 	beq.w	80027f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_RCC_OscConfig+0x4a>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	f040 808b 	bne.w	8002750 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 8087 	bne.w	8002750 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002642:	4b89      	ldr	r3, [pc, #548]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x62>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e3a2      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1a      	ldr	r2, [r3, #32]
 800265e:	4b82      	ldr	r3, [pc, #520]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_RCC_OscConfig+0x7c>
 800266a:	4b7f      	ldr	r3, [pc, #508]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002672:	e005      	b.n	8002680 <HAL_RCC_OscConfig+0x88>
 8002674:	4b7c      	ldr	r3, [pc, #496]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002680:	4293      	cmp	r3, r2
 8002682:	d223      	bcs.n	80026cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fd55 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e383      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002698:	4b73      	ldr	r3, [pc, #460]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a72      	ldr	r2, [pc, #456]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800269e:	f043 0308 	orr.w	r3, r3, #8
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b70      	ldr	r3, [pc, #448]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	496d      	ldr	r1, [pc, #436]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	4968      	ldr	r1, [pc, #416]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e025      	b.n	8002718 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026cc:	4b66      	ldr	r3, [pc, #408]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a65      	ldr	r2, [pc, #404]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b63      	ldr	r3, [pc, #396]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4960      	ldr	r1, [pc, #384]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	495b      	ldr	r1, [pc, #364]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fd15 	bl	8003138 <RCC_SetFlashLatencyFromMSIRange>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e343      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002718:	f000 fc4a 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b52      	ldr	r3, [pc, #328]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	4950      	ldr	r1, [pc, #320]	@ (800286c <HAL_RCC_OscConfig+0x274>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	4a4e      	ldr	r2, [pc, #312]	@ (8002870 <HAL_RCC_OscConfig+0x278>)
 8002736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002738:	4b4e      	ldr	r3, [pc, #312]	@ (8002874 <HAL_RCC_OscConfig+0x27c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fb17 	bl	8000d70 <HAL_InitTick>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d052      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	e327      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002758:	4b43      	ldr	r3, [pc, #268]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a42      	ldr	r2, [pc, #264]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002764:	f7fe fb54 	bl	8000e10 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800276c:	f7fe fb50 	bl	8000e10 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e310      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800277e:	4b3a      	ldr	r3, [pc, #232]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278a:	4b37      	ldr	r3, [pc, #220]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a36      	ldr	r2, [pc, #216]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4931      	ldr	r1, [pc, #196]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	492c      	ldr	r1, [pc, #176]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e01a      	b.n	80027f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a29      	ldr	r2, [pc, #164]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fb21 	bl	8000e10 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d2:	f7fe fb1d 	bl	8000e10 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e2dd      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e4:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x1da>
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d074      	beq.n	80028ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b08      	cmp	r3, #8
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x21a>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d10e      	bne.n	800282a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d10b      	bne.n	800282a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d064      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2f0>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d160      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e2ba      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x24a>
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0b      	ldr	r2, [pc, #44]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e026      	b.n	8002890 <HAL_RCC_OscConfig+0x298>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800284a:	d115      	bne.n	8002878 <HAL_RCC_OscConfig+0x280>
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a05      	ldr	r2, [pc, #20]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a02      	ldr	r2, [pc, #8]	@ (8002868 <HAL_RCC_OscConfig+0x270>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x298>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	08005554 	.word	0x08005554
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004
 8002878:	4ba0      	ldr	r3, [pc, #640]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a9f      	ldr	r2, [pc, #636]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b9d      	ldr	r3, [pc, #628]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a9c      	ldr	r2, [pc, #624]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe faba 	bl	8000e10 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fab6 	bl	8000e10 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e276      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b2:	4b92      	ldr	r3, [pc, #584]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2a8>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe faa6 	bl	8000e10 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe faa2 	bl	8000e10 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e262      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2d0>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d060      	beq.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_OscConfig+0x310>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d119      	bne.n	8002936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d116      	bne.n	8002936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	4b7c      	ldr	r3, [pc, #496]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_OscConfig+0x328>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e23f      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b76      	ldr	r3, [pc, #472]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	4973      	ldr	r1, [pc, #460]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002934:	e040      	b.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d023      	beq.n	8002986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800293e:	4b6f      	ldr	r3, [pc, #444]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6e      	ldr	r2, [pc, #440]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fa61 	bl	8000e10 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fa5d 	bl	8000e10 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e21d      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b65      	ldr	r3, [pc, #404]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b62      	ldr	r3, [pc, #392]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	495f      	ldr	r1, [pc, #380]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	e018      	b.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b5d      	ldr	r3, [pc, #372]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a5c      	ldr	r2, [pc, #368]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 800298c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe fa3d 	bl	8000e10 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe fa39 	bl	8000e10 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1f9      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029cc:	4b4b      	ldr	r3, [pc, #300]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d2:	4a4a      	ldr	r2, [pc, #296]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe fa18 	bl	8000e10 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe fa14 	bl	8000e10 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1d4      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ef      	beq.n	80029e4 <HAL_RCC_OscConfig+0x3ec>
 8002a04:	e01b      	b.n	8002a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a06:	4b3d      	ldr	r3, [pc, #244]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe f9fb 	bl	8000e10 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7fe f9f7 	bl	8000e10 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1b7      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a30:	4b32      	ldr	r3, [pc, #200]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ef      	bne.n	8002a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80a6 	beq.w	8002b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a50:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a60:	4a26      	ldr	r2, [pc, #152]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a68:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a74:	2301      	movs	r3, #1
 8002a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d118      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a84:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a1d      	ldr	r2, [pc, #116]	@ (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a90:	f7fe f9be 	bl	8000e10 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe f9ba 	bl	8000e10 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e17a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_RCC_OscConfig+0x508>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d108      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4d8>
 8002abe:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ace:	e029      	b.n	8002b24 <HAL_RCC_OscConfig+0x52c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d115      	bne.n	8002b04 <HAL_RCC_OscConfig+0x50c>
 8002ad8:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	4a07      	ldr	r2, [pc, #28]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	4a03      	ldr	r2, [pc, #12]	@ (8002afc <HAL_RCC_OscConfig+0x504>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af8:	e014      	b.n	8002b24 <HAL_RCC_OscConfig+0x52c>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	4b9c      	ldr	r3, [pc, #624]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0a:	4a9b      	ldr	r2, [pc, #620]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b14:	4b98      	ldr	r3, [pc, #608]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	4a97      	ldr	r2, [pc, #604]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d016      	beq.n	8002b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f970 	bl	8000e10 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe f96c 	bl	8000e10 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e12a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ed      	beq.n	8002b34 <HAL_RCC_OscConfig+0x53c>
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f959 	bl	8000e10 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe f955 	bl	8000e10 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e113      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b78:	4b7f      	ldr	r3, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ed      	bne.n	8002b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b86:	7ffb      	ldrb	r3, [r7, #31]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	4a79      	ldr	r2, [pc, #484]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80fe 	beq.w	8002d9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	f040 80d0 	bne.w	8002d4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bac:	4b72      	ldr	r3, [pc, #456]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d130      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d127      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d11f      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bec:	2a07      	cmp	r2, #7
 8002bee:	bf14      	ite	ne
 8002bf0:	2201      	movne	r2, #1
 8002bf2:	2200      	moveq	r2, #0
 8002bf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d113      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	3b01      	subs	r3, #1
 8002c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d06e      	beq.n	8002d00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d069      	beq.n	8002cfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c28:	4b53      	ldr	r3, [pc, #332]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c34:	4b50      	ldr	r3, [pc, #320]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0ad      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c50:	f7fe f8de 	bl	8000e10 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f8da 	bl	8000e10 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e09a      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	4b40      	ldr	r3, [pc, #256]	@ (8002d7c <HAL_RCC_OscConfig+0x784>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c90:	0212      	lsls	r2, r2, #8
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ca4:	0852      	lsrs	r2, r2, #1
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0652      	lsls	r2, r2, #25
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cb0:	0912      	lsrs	r2, r2, #4
 8002cb2:	0452      	lsls	r2, r2, #17
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	4930      	ldr	r1, [pc, #192]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd4:	f7fe f89c 	bl	8000e10 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe f898 	bl	8000e10 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e058      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfa:	e050      	b.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04f      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d00:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d148      	bne.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d18:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a16      	ldr	r2, [pc, #88]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d24:	f7fe f874 	bl	8000e10 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe f870 	bl	8000e10 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e030      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x734>
 8002d4a:	e028      	b.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d023      	beq.n	8002d9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_RCC_OscConfig+0x780>)
 8002d58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f857 	bl	8000e10 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d64:	e00c      	b.n	8002d80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe f853 	bl	8000e10 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d905      	bls.n	8002d80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e013      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d80:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ec      	bne.n	8002d66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d8c:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_RCC_OscConfig+0x7b0>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4905      	ldr	r1, [pc, #20]	@ (8002da8 <HAL_RCC_OscConfig+0x7b0>)
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_RCC_OscConfig+0x7b4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
 8002d98:	e001      	b.n	8002d9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	feeefffc 	.word	0xfeeefffc

08002db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0e7      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b75      	ldr	r3, [pc, #468]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b72      	ldr	r3, [pc, #456]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	4970      	ldr	r1, [pc, #448]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0cf      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d908      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4960      	ldr	r1, [pc, #384]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d04c      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e36:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d121      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0a6      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	4b54      	ldr	r3, [pc, #336]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d115      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e09a      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e66:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e08e      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e086      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e86:	4b46      	ldr	r3, [pc, #280]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4943      	ldr	r1, [pc, #268]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fd ffba 	bl	8000e10 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea0:	f7fd ffb6 	bl	8000e10 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e06e      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 020c 	and.w	r2, r3, #12
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1eb      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b31      	ldr	r3, [pc, #196]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d208      	bcs.n	8002ef6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	492b      	ldr	r1, [pc, #172]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef6:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d210      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	4923      	ldr	r1, [pc, #140]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f14:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <HAL_RCC_ClockConfig+0x1ec>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e036      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4918      	ldr	r1, [pc, #96]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4910      	ldr	r1, [pc, #64]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f64:	f000 f824 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	490b      	ldr	r1, [pc, #44]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8002f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f84:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_ClockConfig+0x1fc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fef1 	bl	8000d70 <HAL_InitTick>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08005554 	.word	0x08005554
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d121      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d11e      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe4:	4b34      	ldr	r3, [pc, #208]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff0:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e005      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003000:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800300c:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d102      	bne.n	800302e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003028:	4b25      	ldr	r3, [pc, #148]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e004      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d101      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003034:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d134      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800303e:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0xa6>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d003      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xac>
 8003054:	e005      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	e005      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800305c:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800305e:	617b      	str	r3, [r7, #20]
      break;
 8003060:	e002      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	617b      	str	r3, [r7, #20]
      break;
 8003066:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003068:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	3301      	adds	r3, #1
 8003074:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	fb03 f202 	mul.w	r2, r3, r2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	0e5b      	lsrs	r3, r3, #25
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	3301      	adds	r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a8:	69bb      	ldr	r3, [r7, #24]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	@ 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	0800556c 	.word	0x0800556c
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4904      	ldr	r1, [pc, #16]	@ (8003108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	08005564 	.word	0x08005564

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003110:	f7ff ffda 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0adb      	lsrs	r3, r3, #11
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4904      	ldr	r1, [pc, #16]	@ (8003134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	08005564 	.word	0x08005564

08003138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003144:	4b2a      	ldr	r3, [pc, #168]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003150:	f7ff f9ee 	bl	8002530 <HAL_PWREx_GetVoltageRange>
 8003154:	6178      	str	r0, [r7, #20]
 8003156:	e014      	b.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	4a24      	ldr	r2, [pc, #144]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	@ 0x58
 8003164:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003170:	f7ff f9de 	bl	8002530 <HAL_PWREx_GetVoltageRange>
 8003174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003176:	4b1e      	ldr	r3, [pc, #120]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	4a1d      	ldr	r2, [pc, #116]	@ (80031f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003180:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003188:	d10b      	bne.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	@ 0x80
 800318e:	d919      	bls.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2ba0      	cmp	r3, #160	@ 0xa0
 8003194:	d902      	bls.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003196:	2302      	movs	r3, #2
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e013      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800319c:	2301      	movs	r3, #1
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e010      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	@ 0x80
 80031a6:	d902      	bls.n	80031ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031a8:	2303      	movs	r3, #3
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e00a      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	@ 0x80
 80031b2:	d102      	bne.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b4:	2302      	movs	r3, #2
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e004      	b.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b70      	cmp	r3, #112	@ 0x70
 80031be:	d101      	bne.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	4909      	ldr	r1, [pc, #36]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40022000 	.word	0x40022000

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003200:	2300      	movs	r3, #0
 8003202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003204:	2300      	movs	r3, #0
 8003206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003210:	2b00      	cmp	r3, #0
 8003212:	d041      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003218:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800321c:	d02a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800321e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003222:	d824      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003224:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800322e:	d81e      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003238:	d010      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323a:	e018      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800323c:	4b86      	ldr	r3, [pc, #536]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a85      	ldr	r2, [pc, #532]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fabb 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325a:	e00c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3320      	adds	r3, #32
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fba6 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800326c:	e003      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	74fb      	strb	r3, [r7, #19]
      break;
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327c:	4b76      	ldr	r3, [pc, #472]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800328a:	4973      	ldr	r1, [pc, #460]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003292:	e001      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d041      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032ac:	d02a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032b2:	d824      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032be:	d81e      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032c8:	d010      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ca:	e018      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032cc:	4b62      	ldr	r3, [pc, #392]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a61      	ldr	r2, [pc, #388]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d8:	e015      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fa73 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ea:	e00c      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3320      	adds	r3, #32
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fb5e 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	74fb      	strb	r3, [r7, #19]
      break;
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7cfb      	ldrb	r3, [r7, #19]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800330c:	4b52      	ldr	r3, [pc, #328]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331a:	494f      	ldr	r1, [pc, #316]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a0 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b41      	ldr	r3, [pc, #260]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4a40      	ldr	r2, [pc, #256]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	@ 0x58
 800335c:	4b3e      	ldr	r3, [pc, #248]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336c:	4b3b      	ldr	r3, [pc, #236]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3a      	ldr	r2, [pc, #232]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003378:	f7fd fd4a 	bl	8000e10 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337e:	e009      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fd fd46 	bl	8000e10 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	74fb      	strb	r3, [r7, #19]
        break;
 8003392:	e005      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003394:	4b31      	ldr	r3, [pc, #196]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d15c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d019      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c4:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d0:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	4a20      	ldr	r2, [pc, #128]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd fd05 	bl	8000e10 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003408:	e00b      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd fd01 	bl	8000e10 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d902      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	74fb      	strb	r3, [r7, #19]
            break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ec      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003446:	4904      	ldr	r1, [pc, #16]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800344e:	e009      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
 8003454:	e006      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003464:	7c7b      	ldrb	r3, [r7, #17]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4b9e      	ldr	r3, [pc, #632]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346e:	4a9d      	ldr	r2, [pc, #628]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003474:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003482:	4b98      	ldr	r3, [pc, #608]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f023 0203 	bic.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	4994      	ldr	r1, [pc, #592]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a4:	4b8f      	ldr	r3, [pc, #572]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 020c 	bic.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b2:	498c      	ldr	r1, [pc, #560]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c6:	4b87      	ldr	r3, [pc, #540]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	4983      	ldr	r1, [pc, #524]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e8:	4b7e      	ldr	r3, [pc, #504]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	497b      	ldr	r1, [pc, #492]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350a:	4b76      	ldr	r3, [pc, #472]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003518:	4972      	ldr	r1, [pc, #456]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4b6d      	ldr	r3, [pc, #436]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353a:	496a      	ldr	r1, [pc, #424]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b65      	ldr	r3, [pc, #404]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355c:	4961      	ldr	r1, [pc, #388]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003570:	4b5c      	ldr	r3, [pc, #368]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	4959      	ldr	r1, [pc, #356]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003592:	4b54      	ldr	r3, [pc, #336]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a0:	4950      	ldr	r1, [pc, #320]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b4:	4b4b      	ldr	r3, [pc, #300]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	4948      	ldr	r1, [pc, #288]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d6:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	493f      	ldr	r1, [pc, #252]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d028      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f8:	4b3a      	ldr	r3, [pc, #232]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003606:	4937      	ldr	r1, [pc, #220]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003616:	d106      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003618:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a31      	ldr	r2, [pc, #196]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003622:	60d3      	str	r3, [r2, #12]
 8003624:	e011      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800362e:	d10c      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f8c8 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d028      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003656:	4b23      	ldr	r3, [pc, #140]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	491f      	ldr	r1, [pc, #124]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003674:	d106      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003676:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a1a      	ldr	r2, [pc, #104]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003680:	60d3      	str	r3, [r2, #12]
 8003682:	e011      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f899 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d02b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	4908      	ldr	r1, [pc, #32]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d2:	d109      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a02      	ldr	r2, [pc, #8]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e014      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f0:	d10c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2101      	movs	r1, #1
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f867 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02f      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003718:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003726:	4928      	ldr	r1, [pc, #160]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003736:	d10d      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	2102      	movs	r1, #2
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f844 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d014      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	74bb      	strb	r3, [r7, #18]
 8003752:	e011      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3320      	adds	r3, #32
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f925 	bl	80039b4 <RCCEx_PLLSAI2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003784:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003792:	490d      	ldr	r1, [pc, #52]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037a6:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b6:	4904      	ldr	r1, [pc, #16]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037be:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037da:	4b75      	ldr	r3, [pc, #468]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e6:	4b72      	ldr	r3, [pc, #456]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10d      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
       ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fe:	4b6c      	ldr	r3, [pc, #432]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
       ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d047      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	e044      	b.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d018      	beq.n	8003852 <RCCEx_PLLSAI1_Config+0x86>
 8003820:	2b03      	cmp	r3, #3
 8003822:	d825      	bhi.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <RCCEx_PLLSAI1_Config+0x62>
 8003828:	2b02      	cmp	r3, #2
 800382a:	d009      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x74>
 800382c:	e020      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800382e:	4b60      	ldr	r3, [pc, #384]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d11d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383e:	e01a      	b.n	8003876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003840:	4b5b      	ldr	r3, [pc, #364]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e013      	b.n	800387a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003852:	4b57      	ldr	r3, [pc, #348]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800385e:	4b54      	ldr	r3, [pc, #336]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800386e:	e006      	b.n	800387e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e004      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10d      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003886:	4b4a      	ldr	r3, [pc, #296]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	430b      	orrs	r3, r1
 800389c:	4944      	ldr	r1, [pc, #272]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d17d      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a8:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a40      	ldr	r2, [pc, #256]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fd faac 	bl	8000e10 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ba:	e009      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038bc:	f7fd faa8 	bl	8000e10 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	73fb      	strb	r3, [r7, #15]
        break;
 80038ce:	e005      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d0:	4b37      	ldr	r3, [pc, #220]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ef      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d160      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e8:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	0211      	lsls	r1, r2, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	0912      	lsrs	r2, r2, #4
 8003900:	0452      	lsls	r2, r2, #17
 8003902:	430a      	orrs	r2, r1
 8003904:	492a      	ldr	r1, [pc, #168]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	610b      	str	r3, [r1, #16]
 800390a:	e027      	b.n	800395c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d112      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003912:	4b27      	ldr	r3, [pc, #156]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800391a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	0211      	lsls	r1, r2, #8
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6912      	ldr	r2, [r2, #16]
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0552      	lsls	r2, r2, #21
 800392e:	430a      	orrs	r2, r1
 8003930:	491f      	ldr	r1, [pc, #124]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
 8003936:	e011      	b.n	800395c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003938:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003940:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	0211      	lsls	r1, r2, #8
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6952      	ldr	r2, [r2, #20]
 800394e:	0852      	lsrs	r2, r2, #1
 8003950:	3a01      	subs	r2, #1
 8003952:	0652      	lsls	r2, r2, #25
 8003954:	430a      	orrs	r2, r1
 8003956:	4916      	ldr	r1, [pc, #88]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800395c:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a13      	ldr	r2, [pc, #76]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fd fa52 	bl	8000e10 <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396e:	e009      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003970:	f7fd fa4e 	bl	8000e10 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	73fb      	strb	r3, [r7, #15]
          break;
 8003982:	e005      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4904      	ldr	r1, [pc, #16]	@ (80039b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039c2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ce:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d10d      	bne.n	80039fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
       ||
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039e6:	4b61      	ldr	r3, [pc, #388]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
       ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d047      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e044      	b.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d018      	beq.n	8003a3a <RCCEx_PLLSAI2_Config+0x86>
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d825      	bhi.n	8003a58 <RCCEx_PLLSAI2_Config+0xa4>
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d002      	beq.n	8003a16 <RCCEx_PLLSAI2_Config+0x62>
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d009      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x74>
 8003a14:	e020      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a16:	4b55      	ldr	r3, [pc, #340]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11d      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a26:	e01a      	b.n	8003a5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a28:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d116      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e013      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a46:	4b49      	ldr	r3, [pc, #292]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a56:	e006      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5c:	e004      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	430b      	orrs	r3, r1
 8003a84:	4939      	ldr	r1, [pc, #228]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d167      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a90:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a35      	ldr	r2, [pc, #212]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd f9b8 	bl	8000e10 <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa2:	e009      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa4:	f7fd f9b4 	bl	8000e10 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d902      	bls.n	8003ab8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab6:	e005      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ef      	bne.n	8003aa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d14a      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad0:	4b26      	ldr	r3, [pc, #152]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	0211      	lsls	r1, r2, #8
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68d2      	ldr	r2, [r2, #12]
 8003ae6:	0912      	lsrs	r2, r2, #4
 8003ae8:	0452      	lsls	r2, r2, #17
 8003aea:	430a      	orrs	r2, r1
 8003aec:	491f      	ldr	r1, [pc, #124]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	614b      	str	r3, [r1, #20]
 8003af2:	e011      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003afc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	0211      	lsls	r1, r2, #8
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6912      	ldr	r2, [r2, #16]
 8003b0a:	0852      	lsrs	r2, r2, #1
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0652      	lsls	r2, r2, #25
 8003b10:	430a      	orrs	r2, r1
 8003b12:	4916      	ldr	r1, [pc, #88]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b18:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a13      	ldr	r2, [pc, #76]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd f974 	bl	8000e10 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2a:	e009      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b2c:	f7fd f970 	bl	8000e10 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d902      	bls.n	8003b40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b3e:	e005      	b.n	8003b4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4904      	ldr	r1, [pc, #16]	@ (8003b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e040      	b.n	8003c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc ff62 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	@ 0x24
 8003b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fb6a 	bl	8004290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8af 	bl	8003d20 <UART_SetConfig>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01b      	b.n	8003c04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fbe9 	bl	80043d4 <UART_CheckIdleState>
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	@ 0x28
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d177      	bne.n	8003d14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Transmit+0x24>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e070      	b.n	8003d16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2221      	movs	r2, #33	@ 0x21
 8003c40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fd f8e5 	bl	8000e10 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c60:	d108      	bne.n	8003c74 <HAL_UART_Transmit+0x68>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e003      	b.n	8003c7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c7c:	e02f      	b.n	8003cde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	@ 0x80
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fc4b 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e03b      	b.n	8003d16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	881a      	ldrh	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e007      	b.n	8003ccc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1c9      	bne.n	8003c7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2140      	movs	r1, #64	@ 0x40
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fc15 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e005      	b.n	8003d16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b08a      	sub	sp, #40	@ 0x28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4ba4      	ldr	r3, [pc, #656]	@ (8003fe0 <UART_SetConfig+0x2c0>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a99      	ldr	r2, [pc, #612]	@ (8003fe4 <UART_SetConfig+0x2c4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a90      	ldr	r2, [pc, #576]	@ (8003fe8 <UART_SetConfig+0x2c8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d126      	bne.n	8003df8 <UART_SetConfig+0xd8>
 8003daa:	4b90      	ldr	r3, [pc, #576]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d81b      	bhi.n	8003df0 <UART_SetConfig+0xd0>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0xa0>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e116      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dde:	e112      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003de0:	2304      	movs	r3, #4
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de6:	e10e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003de8:	2308      	movs	r3, #8
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dee:	e10a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e106      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff0 <UART_SetConfig+0x2d0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d138      	bne.n	8003e74 <UART_SetConfig+0x154>
 8003e02:	4b7a      	ldr	r3, [pc, #488]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d82d      	bhi.n	8003e6c <UART_SetConfig+0x14c>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <UART_SetConfig+0xf8>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e6d 	.word	0x08003e6d
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e55 	.word	0x08003e55
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e0d8      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e0d4      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e0d0      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e0cc      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e0c8      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff4 <UART_SetConfig+0x2d4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d125      	bne.n	8003eca <UART_SetConfig+0x1aa>
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d016      	beq.n	8003eba <UART_SetConfig+0x19a>
 8003e8c:	2b30      	cmp	r3, #48	@ 0x30
 8003e8e:	d818      	bhi.n	8003ec2 <UART_SetConfig+0x1a2>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d00a      	beq.n	8003eaa <UART_SetConfig+0x18a>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d814      	bhi.n	8003ec2 <UART_SetConfig+0x1a2>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <UART_SetConfig+0x182>
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d008      	beq.n	8003eb2 <UART_SetConfig+0x192>
 8003ea0:	e00f      	b.n	8003ec2 <UART_SetConfig+0x1a2>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea8:	e0ad      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb0:	e0a9      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb8:	e0a5      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec0:	e0a1      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec8:	e09d      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff8 <UART_SetConfig+0x2d8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d125      	bne.n	8003f20 <UART_SetConfig+0x200>
 8003ed4:	4b45      	ldr	r3, [pc, #276]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ede:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee0:	d016      	beq.n	8003f10 <UART_SetConfig+0x1f0>
 8003ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ee4:	d818      	bhi.n	8003f18 <UART_SetConfig+0x1f8>
 8003ee6:	2b80      	cmp	r3, #128	@ 0x80
 8003ee8:	d00a      	beq.n	8003f00 <UART_SetConfig+0x1e0>
 8003eea:	2b80      	cmp	r3, #128	@ 0x80
 8003eec:	d814      	bhi.n	8003f18 <UART_SetConfig+0x1f8>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <UART_SetConfig+0x1d8>
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d008      	beq.n	8003f08 <UART_SetConfig+0x1e8>
 8003ef6:	e00f      	b.n	8003f18 <UART_SetConfig+0x1f8>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efe:	e082      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f06:	e07e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0e:	e07a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f10:	2308      	movs	r3, #8
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e076      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e072      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a35      	ldr	r2, [pc, #212]	@ (8003ffc <UART_SetConfig+0x2dc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d12a      	bne.n	8003f80 <UART_SetConfig+0x260>
 8003f2a:	4b30      	ldr	r3, [pc, #192]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f38:	d01a      	beq.n	8003f70 <UART_SetConfig+0x250>
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f3e:	d81b      	bhi.n	8003f78 <UART_SetConfig+0x258>
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f44:	d00c      	beq.n	8003f60 <UART_SetConfig+0x240>
 8003f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f4a:	d815      	bhi.n	8003f78 <UART_SetConfig+0x258>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <UART_SetConfig+0x238>
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f54:	d008      	beq.n	8003f68 <UART_SetConfig+0x248>
 8003f56:	e00f      	b.n	8003f78 <UART_SetConfig+0x258>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5e:	e052      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f60:	2302      	movs	r3, #2
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f66:	e04e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6e:	e04a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f70:	2308      	movs	r3, #8
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f76:	e046      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7e:	e042      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <UART_SetConfig+0x2c4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d13a      	bne.n	8004000 <UART_SetConfig+0x2e0>
 8003f8a:	4b18      	ldr	r3, [pc, #96]	@ (8003fec <UART_SetConfig+0x2cc>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f98:	d01a      	beq.n	8003fd0 <UART_SetConfig+0x2b0>
 8003f9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f9e:	d81b      	bhi.n	8003fd8 <UART_SetConfig+0x2b8>
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa4:	d00c      	beq.n	8003fc0 <UART_SetConfig+0x2a0>
 8003fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003faa:	d815      	bhi.n	8003fd8 <UART_SetConfig+0x2b8>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <UART_SetConfig+0x298>
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb4:	d008      	beq.n	8003fc8 <UART_SetConfig+0x2a8>
 8003fb6:	e00f      	b.n	8003fd8 <UART_SetConfig+0x2b8>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e022      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	e01e      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fce:	e01a      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd6:	e016      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fde:	e012      	b.n	8004006 <UART_SetConfig+0x2e6>
 8003fe0:	efff69f3 	.word	0xefff69f3
 8003fe4:	40008000 	.word	0x40008000
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40004400 	.word	0x40004400
 8003ff4:	40004800 	.word	0x40004800
 8003ff8:	40004c00 	.word	0x40004c00
 8003ffc:	40005000 	.word	0x40005000
 8004000:	2310      	movs	r3, #16
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a9f      	ldr	r2, [pc, #636]	@ (8004288 <UART_SetConfig+0x568>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d17a      	bne.n	8004106 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004010:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004014:	2b08      	cmp	r3, #8
 8004016:	d824      	bhi.n	8004062 <UART_SetConfig+0x342>
 8004018:	a201      	add	r2, pc, #4	@ (adr r2, 8004020 <UART_SetConfig+0x300>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004045 	.word	0x08004045
 8004024:	08004063 	.word	0x08004063
 8004028:	0800404d 	.word	0x0800404d
 800402c:	08004063 	.word	0x08004063
 8004030:	08004053 	.word	0x08004053
 8004034:	08004063 	.word	0x08004063
 8004038:	08004063 	.word	0x08004063
 800403c:	08004063 	.word	0x08004063
 8004040:	0800405b 	.word	0x0800405b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7ff f84c 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8004048:	61f8      	str	r0, [r7, #28]
        break;
 800404a:	e010      	b.n	800406e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800404c:	4b8f      	ldr	r3, [pc, #572]	@ (800428c <UART_SetConfig+0x56c>)
 800404e:	61fb      	str	r3, [r7, #28]
        break;
 8004050:	e00d      	b.n	800406e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004052:	f7fe ffad 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8004056:	61f8      	str	r0, [r7, #28]
        break;
 8004058:	e009      	b.n	800406e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800405e:	61fb      	str	r3, [r7, #28]
        break;
 8004060:	e005      	b.n	800406e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800406c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80fb 	beq.w	800426c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	429a      	cmp	r2, r3
 8004084:	d305      	bcc.n	8004092 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	429a      	cmp	r2, r3
 8004090:	d903      	bls.n	800409a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004098:	e0e8      	b.n	800426c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2200      	movs	r2, #0
 800409e:	461c      	mov	r4, r3
 80040a0:	4615      	mov	r5, r2
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	022b      	lsls	r3, r5, #8
 80040ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040b0:	0222      	lsls	r2, r4, #8
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	6849      	ldr	r1, [r1, #4]
 80040b6:	0849      	lsrs	r1, r1, #1
 80040b8:	2000      	movs	r0, #0
 80040ba:	4688      	mov	r8, r1
 80040bc:	4681      	mov	r9, r0
 80040be:	eb12 0a08 	adds.w	sl, r2, r8
 80040c2:	eb43 0b09 	adc.w	fp, r3, r9
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d4:	4650      	mov	r0, sl
 80040d6:	4659      	mov	r1, fp
 80040d8:	f7fc f8ca 	bl	8000270 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ea:	d308      	bcc.n	80040fe <UART_SetConfig+0x3de>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f2:	d204      	bcs.n	80040fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	e0b6      	b.n	800426c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004104:	e0b2      	b.n	800426c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410e:	d15e      	bne.n	80041ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004114:	2b08      	cmp	r3, #8
 8004116:	d828      	bhi.n	800416a <UART_SetConfig+0x44a>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <UART_SetConfig+0x400>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe ffcc 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8004148:	61f8      	str	r0, [r7, #28]
        break;
 800414a:	e014      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe ffde 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b4d      	ldr	r3, [pc, #308]	@ (800428c <UART_SetConfig+0x56c>)
 8004156:	61fb      	str	r3, [r7, #28]
        break;
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe ff29 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 800415e:	61f8      	str	r0, [r7, #28]
        break;
 8004160:	e009      	b.n	8004176 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	61fb      	str	r3, [r7, #28]
        break;
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d077      	beq.n	800426c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	005a      	lsls	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d916      	bls.n	80041c6 <UART_SetConfig+0x4a6>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419e:	d212      	bcs.n	80041c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f023 030f 	bic.w	r3, r3, #15
 80041a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	8afb      	ldrh	r3, [r7, #22]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	8afa      	ldrh	r2, [r7, #22]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e052      	b.n	800426c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041cc:	e04e      	b.n	800426c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d827      	bhi.n	8004226 <UART_SetConfig+0x506>
 80041d6:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <UART_SetConfig+0x4bc>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe ff6e 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 8004204:	61f8      	str	r0, [r7, #28]
        break;
 8004206:	e014      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe ff80 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 800420c:	61f8      	str	r0, [r7, #28]
        break;
 800420e:	e010      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <UART_SetConfig+0x56c>)
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e00d      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fe fecb 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 800421a:	61f8      	str	r0, [r7, #28]
        break;
 800421c:	e009      	b.n	8004232 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e005      	b.n	8004232 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004230:	bf00      	nop
    }

    if (pclk != 0U)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d019      	beq.n	800426c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	085a      	lsrs	r2, r3, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	d909      	bls.n	8004266 <UART_SetConfig+0x546>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004258:	d205      	bcs.n	8004266 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	e002      	b.n	800426c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004278:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	@ 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	40008000 	.word	0x40008000
 800428c:	00f42400 	.word	0x00f42400

08004290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800438e:	d10a      	bne.n	80043a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b098      	sub	sp, #96	@ 0x60
 80043d8:	af02      	add	r7, sp, #8
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e4:	f7fc fd14 	bl	8000e10 <HAL_GetTick>
 80043e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d12e      	bne.n	8004456 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f88c 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004426:	653b      	str	r3, [r7, #80]	@ 0x50
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004430:	647b      	str	r3, [r7, #68]	@ 0x44
 8004432:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800443e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e062      	b.n	800451c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d149      	bne.n	80044f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	2200      	movs	r2, #0
 800446e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f856 	bl	8004524 <UART_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03c      	beq.n	80044f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	623b      	str	r3, [r7, #32]
   return(result);
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
 800449e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e6      	bne.n	800447e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d0:	61fa      	str	r2, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	69b9      	ldr	r1, [r7, #24]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	617b      	str	r3, [r7, #20]
   return(result);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e011      	b.n	800451c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3758      	adds	r7, #88	@ 0x58
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004534:	e04f      	b.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d04b      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fc fc67 	bl	8000e10 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <UART_WaitOnFlagUntilTimeout+0x30>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e04e      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d037      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b80      	cmp	r3, #128	@ 0x80
 800456a:	d034      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b40      	cmp	r3, #64	@ 0x40
 8004570:	d031      	beq.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d110      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2208      	movs	r2, #8
 8004586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f838 	bl	80045fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2208      	movs	r2, #8
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e029      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b0:	d111      	bne.n	80045d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f81e 	bl	80045fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e00f      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d0a0      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045fe:	b480      	push	{r7}
 8004600:	b095      	sub	sp, #84	@ 0x54
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800461a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004624:	643b      	str	r3, [r7, #64]	@ 0x40
 8004626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800462a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e6      	bne.n	8004606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3308      	adds	r3, #8
 800463e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	61fb      	str	r3, [r7, #28]
   return(result);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004658:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800465a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e5      	bne.n	8004638 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004670:	2b01      	cmp	r3, #1
 8004672:	d118      	bne.n	80046a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	60bb      	str	r3, [r7, #8]
   return(result);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	647b      	str	r3, [r7, #68]	@ 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	613b      	str	r3, [r7, #16]
   return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ba:	bf00      	nop
 80046bc:	3754      	adds	r7, #84	@ 0x54
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <std>:
 80046c8:	2300      	movs	r3, #0
 80046ca:	b510      	push	{r4, lr}
 80046cc:	4604      	mov	r4, r0
 80046ce:	e9c0 3300 	strd	r3, r3, [r0]
 80046d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046d6:	6083      	str	r3, [r0, #8]
 80046d8:	8181      	strh	r1, [r0, #12]
 80046da:	6643      	str	r3, [r0, #100]	@ 0x64
 80046dc:	81c2      	strh	r2, [r0, #14]
 80046de:	6183      	str	r3, [r0, #24]
 80046e0:	4619      	mov	r1, r3
 80046e2:	2208      	movs	r2, #8
 80046e4:	305c      	adds	r0, #92	@ 0x5c
 80046e6:	f000 f906 	bl	80048f6 <memset>
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <std+0x58>)
 80046ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80046ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <std+0x5c>)
 80046f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <std+0x60>)
 80046f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046f6:	4b0d      	ldr	r3, [pc, #52]	@ (800472c <std+0x64>)
 80046f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <std+0x68>)
 80046fc:	6224      	str	r4, [r4, #32]
 80046fe:	429c      	cmp	r4, r3
 8004700:	d006      	beq.n	8004710 <std+0x48>
 8004702:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004706:	4294      	cmp	r4, r2
 8004708:	d002      	beq.n	8004710 <std+0x48>
 800470a:	33d0      	adds	r3, #208	@ 0xd0
 800470c:	429c      	cmp	r4, r3
 800470e:	d105      	bne.n	800471c <std+0x54>
 8004710:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	f000 b966 	b.w	80049e8 <__retarget_lock_init_recursive>
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	08004871 	.word	0x08004871
 8004724:	08004893 	.word	0x08004893
 8004728:	080048cb 	.word	0x080048cb
 800472c:	080048ef 	.word	0x080048ef
 8004730:	2000017c 	.word	0x2000017c

08004734 <stdio_exit_handler>:
 8004734:	4a02      	ldr	r2, [pc, #8]	@ (8004740 <stdio_exit_handler+0xc>)
 8004736:	4903      	ldr	r1, [pc, #12]	@ (8004744 <stdio_exit_handler+0x10>)
 8004738:	4803      	ldr	r0, [pc, #12]	@ (8004748 <stdio_exit_handler+0x14>)
 800473a:	f000 b869 	b.w	8004810 <_fwalk_sglue>
 800473e:	bf00      	nop
 8004740:	2000000c 	.word	0x2000000c
 8004744:	08005285 	.word	0x08005285
 8004748:	2000001c 	.word	0x2000001c

0800474c <cleanup_stdio>:
 800474c:	6841      	ldr	r1, [r0, #4]
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <cleanup_stdio+0x34>)
 8004750:	4299      	cmp	r1, r3
 8004752:	b510      	push	{r4, lr}
 8004754:	4604      	mov	r4, r0
 8004756:	d001      	beq.n	800475c <cleanup_stdio+0x10>
 8004758:	f000 fd94 	bl	8005284 <_fflush_r>
 800475c:	68a1      	ldr	r1, [r4, #8]
 800475e:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <cleanup_stdio+0x38>)
 8004760:	4299      	cmp	r1, r3
 8004762:	d002      	beq.n	800476a <cleanup_stdio+0x1e>
 8004764:	4620      	mov	r0, r4
 8004766:	f000 fd8d 	bl	8005284 <_fflush_r>
 800476a:	68e1      	ldr	r1, [r4, #12]
 800476c:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <cleanup_stdio+0x3c>)
 800476e:	4299      	cmp	r1, r3
 8004770:	d004      	beq.n	800477c <cleanup_stdio+0x30>
 8004772:	4620      	mov	r0, r4
 8004774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004778:	f000 bd84 	b.w	8005284 <_fflush_r>
 800477c:	bd10      	pop	{r4, pc}
 800477e:	bf00      	nop
 8004780:	2000017c 	.word	0x2000017c
 8004784:	200001e4 	.word	0x200001e4
 8004788:	2000024c 	.word	0x2000024c

0800478c <global_stdio_init.part.0>:
 800478c:	b510      	push	{r4, lr}
 800478e:	4b0b      	ldr	r3, [pc, #44]	@ (80047bc <global_stdio_init.part.0+0x30>)
 8004790:	4c0b      	ldr	r4, [pc, #44]	@ (80047c0 <global_stdio_init.part.0+0x34>)
 8004792:	4a0c      	ldr	r2, [pc, #48]	@ (80047c4 <global_stdio_init.part.0+0x38>)
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	4620      	mov	r0, r4
 8004798:	2200      	movs	r2, #0
 800479a:	2104      	movs	r1, #4
 800479c:	f7ff ff94 	bl	80046c8 <std>
 80047a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047a4:	2201      	movs	r2, #1
 80047a6:	2109      	movs	r1, #9
 80047a8:	f7ff ff8e 	bl	80046c8 <std>
 80047ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047b0:	2202      	movs	r2, #2
 80047b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b6:	2112      	movs	r1, #18
 80047b8:	f7ff bf86 	b.w	80046c8 <std>
 80047bc:	200002b4 	.word	0x200002b4
 80047c0:	2000017c 	.word	0x2000017c
 80047c4:	08004735 	.word	0x08004735

080047c8 <__sfp_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	@ (80047d0 <__sfp_lock_acquire+0x8>)
 80047ca:	f000 b90e 	b.w	80049ea <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	200002bd 	.word	0x200002bd

080047d4 <__sfp_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	@ (80047dc <__sfp_lock_release+0x8>)
 80047d6:	f000 b909 	b.w	80049ec <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	200002bd 	.word	0x200002bd

080047e0 <__sinit>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7ff fff0 	bl	80047c8 <__sfp_lock_acquire>
 80047e8:	6a23      	ldr	r3, [r4, #32]
 80047ea:	b11b      	cbz	r3, 80047f4 <__sinit+0x14>
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f7ff bff0 	b.w	80047d4 <__sfp_lock_release>
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <__sinit+0x28>)
 80047f6:	6223      	str	r3, [r4, #32]
 80047f8:	4b04      	ldr	r3, [pc, #16]	@ (800480c <__sinit+0x2c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f5      	bne.n	80047ec <__sinit+0xc>
 8004800:	f7ff ffc4 	bl	800478c <global_stdio_init.part.0>
 8004804:	e7f2      	b.n	80047ec <__sinit+0xc>
 8004806:	bf00      	nop
 8004808:	0800474d 	.word	0x0800474d
 800480c:	200002b4 	.word	0x200002b4

08004810 <_fwalk_sglue>:
 8004810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004814:	4607      	mov	r7, r0
 8004816:	4688      	mov	r8, r1
 8004818:	4614      	mov	r4, r2
 800481a:	2600      	movs	r6, #0
 800481c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004820:	f1b9 0901 	subs.w	r9, r9, #1
 8004824:	d505      	bpl.n	8004832 <_fwalk_sglue+0x22>
 8004826:	6824      	ldr	r4, [r4, #0]
 8004828:	2c00      	cmp	r4, #0
 800482a:	d1f7      	bne.n	800481c <_fwalk_sglue+0xc>
 800482c:	4630      	mov	r0, r6
 800482e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004832:	89ab      	ldrh	r3, [r5, #12]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d907      	bls.n	8004848 <_fwalk_sglue+0x38>
 8004838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800483c:	3301      	adds	r3, #1
 800483e:	d003      	beq.n	8004848 <_fwalk_sglue+0x38>
 8004840:	4629      	mov	r1, r5
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	4306      	orrs	r6, r0
 8004848:	3568      	adds	r5, #104	@ 0x68
 800484a:	e7e9      	b.n	8004820 <_fwalk_sglue+0x10>

0800484c <iprintf>:
 800484c:	b40f      	push	{r0, r1, r2, r3}
 800484e:	b507      	push	{r0, r1, r2, lr}
 8004850:	4906      	ldr	r1, [pc, #24]	@ (800486c <iprintf+0x20>)
 8004852:	ab04      	add	r3, sp, #16
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	f853 2b04 	ldr.w	r2, [r3], #4
 800485a:	6881      	ldr	r1, [r0, #8]
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	f000 f9e9 	bl	8004c34 <_vfiprintf_r>
 8004862:	b003      	add	sp, #12
 8004864:	f85d eb04 	ldr.w	lr, [sp], #4
 8004868:	b004      	add	sp, #16
 800486a:	4770      	bx	lr
 800486c:	20000018 	.word	0x20000018

08004870 <__sread>:
 8004870:	b510      	push	{r4, lr}
 8004872:	460c      	mov	r4, r1
 8004874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004878:	f000 f868 	bl	800494c <_read_r>
 800487c:	2800      	cmp	r0, #0
 800487e:	bfab      	itete	ge
 8004880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004882:	89a3      	ldrhlt	r3, [r4, #12]
 8004884:	181b      	addge	r3, r3, r0
 8004886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800488a:	bfac      	ite	ge
 800488c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800488e:	81a3      	strhlt	r3, [r4, #12]
 8004890:	bd10      	pop	{r4, pc}

08004892 <__swrite>:
 8004892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004896:	461f      	mov	r7, r3
 8004898:	898b      	ldrh	r3, [r1, #12]
 800489a:	05db      	lsls	r3, r3, #23
 800489c:	4605      	mov	r5, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	4616      	mov	r6, r2
 80048a2:	d505      	bpl.n	80048b0 <__swrite+0x1e>
 80048a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a8:	2302      	movs	r3, #2
 80048aa:	2200      	movs	r2, #0
 80048ac:	f000 f83c 	bl	8004928 <_lseek_r>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	4632      	mov	r2, r6
 80048be:	463b      	mov	r3, r7
 80048c0:	4628      	mov	r0, r5
 80048c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048c6:	f000 b853 	b.w	8004970 <_write_r>

080048ca <__sseek>:
 80048ca:	b510      	push	{r4, lr}
 80048cc:	460c      	mov	r4, r1
 80048ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d2:	f000 f829 	bl	8004928 <_lseek_r>
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	bf15      	itete	ne
 80048dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048e6:	81a3      	strheq	r3, [r4, #12]
 80048e8:	bf18      	it	ne
 80048ea:	81a3      	strhne	r3, [r4, #12]
 80048ec:	bd10      	pop	{r4, pc}

080048ee <__sclose>:
 80048ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f2:	f000 b809 	b.w	8004908 <_close_r>

080048f6 <memset>:
 80048f6:	4402      	add	r2, r0
 80048f8:	4603      	mov	r3, r0
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d100      	bne.n	8004900 <memset+0xa>
 80048fe:	4770      	bx	lr
 8004900:	f803 1b01 	strb.w	r1, [r3], #1
 8004904:	e7f9      	b.n	80048fa <memset+0x4>
	...

08004908 <_close_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d06      	ldr	r5, [pc, #24]	@ (8004924 <_close_r+0x1c>)
 800490c:	2300      	movs	r3, #0
 800490e:	4604      	mov	r4, r0
 8004910:	4608      	mov	r0, r1
 8004912:	602b      	str	r3, [r5, #0]
 8004914:	f7fc f966 	bl	8000be4 <_close>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_close_r+0x1a>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_close_r+0x1a>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	200002b8 	.word	0x200002b8

08004928 <_lseek_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	@ (8004948 <_lseek_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc f97b 	bl	8000c32 <_lseek>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_lseek_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_lseek_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	200002b8 	.word	0x200002b8

0800494c <_read_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d07      	ldr	r5, [pc, #28]	@ (800496c <_read_r+0x20>)
 8004950:	4604      	mov	r4, r0
 8004952:	4608      	mov	r0, r1
 8004954:	4611      	mov	r1, r2
 8004956:	2200      	movs	r2, #0
 8004958:	602a      	str	r2, [r5, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f7fc f909 	bl	8000b72 <_read>
 8004960:	1c43      	adds	r3, r0, #1
 8004962:	d102      	bne.n	800496a <_read_r+0x1e>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	b103      	cbz	r3, 800496a <_read_r+0x1e>
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd38      	pop	{r3, r4, r5, pc}
 800496c:	200002b8 	.word	0x200002b8

08004970 <_write_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d07      	ldr	r5, [pc, #28]	@ (8004990 <_write_r+0x20>)
 8004974:	4604      	mov	r4, r0
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	2200      	movs	r2, #0
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fc f914 	bl	8000bac <_write>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_write_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_write_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200002b8 	.word	0x200002b8

08004994 <__errno>:
 8004994:	4b01      	ldr	r3, [pc, #4]	@ (800499c <__errno+0x8>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000018 	.word	0x20000018

080049a0 <__libc_init_array>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4d0d      	ldr	r5, [pc, #52]	@ (80049d8 <__libc_init_array+0x38>)
 80049a4:	4c0d      	ldr	r4, [pc, #52]	@ (80049dc <__libc_init_array+0x3c>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	2600      	movs	r6, #0
 80049ac:	42a6      	cmp	r6, r4
 80049ae:	d109      	bne.n	80049c4 <__libc_init_array+0x24>
 80049b0:	4d0b      	ldr	r5, [pc, #44]	@ (80049e0 <__libc_init_array+0x40>)
 80049b2:	4c0c      	ldr	r4, [pc, #48]	@ (80049e4 <__libc_init_array+0x44>)
 80049b4:	f000 fdb6 	bl	8005524 <_init>
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	2600      	movs	r6, #0
 80049be:	42a6      	cmp	r6, r4
 80049c0:	d105      	bne.n	80049ce <__libc_init_array+0x2e>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c8:	4798      	blx	r3
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7ee      	b.n	80049ac <__libc_init_array+0xc>
 80049ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d2:	4798      	blx	r3
 80049d4:	3601      	adds	r6, #1
 80049d6:	e7f2      	b.n	80049be <__libc_init_array+0x1e>
 80049d8:	080055d8 	.word	0x080055d8
 80049dc:	080055d8 	.word	0x080055d8
 80049e0:	080055d8 	.word	0x080055d8
 80049e4:	080055dc 	.word	0x080055dc

080049e8 <__retarget_lock_init_recursive>:
 80049e8:	4770      	bx	lr

080049ea <__retarget_lock_acquire_recursive>:
 80049ea:	4770      	bx	lr

080049ec <__retarget_lock_release_recursive>:
 80049ec:	4770      	bx	lr
	...

080049f0 <_free_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	2900      	cmp	r1, #0
 80049f6:	d041      	beq.n	8004a7c <_free_r+0x8c>
 80049f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fc:	1f0c      	subs	r4, r1, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfb8      	it	lt
 8004a02:	18e4      	addlt	r4, r4, r3
 8004a04:	f000 f8e0 	bl	8004bc8 <__malloc_lock>
 8004a08:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <_free_r+0x90>)
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	b933      	cbnz	r3, 8004a1c <_free_r+0x2c>
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	6014      	str	r4, [r2, #0]
 8004a12:	4628      	mov	r0, r5
 8004a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a18:	f000 b8dc 	b.w	8004bd4 <__malloc_unlock>
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	d908      	bls.n	8004a32 <_free_r+0x42>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	1821      	adds	r1, r4, r0
 8004a24:	428b      	cmp	r3, r1
 8004a26:	bf01      	itttt	eq
 8004a28:	6819      	ldreq	r1, [r3, #0]
 8004a2a:	685b      	ldreq	r3, [r3, #4]
 8004a2c:	1809      	addeq	r1, r1, r0
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	e7ed      	b.n	8004a0e <_free_r+0x1e>
 8004a32:	461a      	mov	r2, r3
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	b10b      	cbz	r3, 8004a3c <_free_r+0x4c>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d9fa      	bls.n	8004a32 <_free_r+0x42>
 8004a3c:	6811      	ldr	r1, [r2, #0]
 8004a3e:	1850      	adds	r0, r2, r1
 8004a40:	42a0      	cmp	r0, r4
 8004a42:	d10b      	bne.n	8004a5c <_free_r+0x6c>
 8004a44:	6820      	ldr	r0, [r4, #0]
 8004a46:	4401      	add	r1, r0
 8004a48:	1850      	adds	r0, r2, r1
 8004a4a:	4283      	cmp	r3, r0
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	d1e0      	bne.n	8004a12 <_free_r+0x22>
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6053      	str	r3, [r2, #4]
 8004a56:	4408      	add	r0, r1
 8004a58:	6010      	str	r0, [r2, #0]
 8004a5a:	e7da      	b.n	8004a12 <_free_r+0x22>
 8004a5c:	d902      	bls.n	8004a64 <_free_r+0x74>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	602b      	str	r3, [r5, #0]
 8004a62:	e7d6      	b.n	8004a12 <_free_r+0x22>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	1821      	adds	r1, r4, r0
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	bf04      	itt	eq
 8004a6c:	6819      	ldreq	r1, [r3, #0]
 8004a6e:	685b      	ldreq	r3, [r3, #4]
 8004a70:	6063      	str	r3, [r4, #4]
 8004a72:	bf04      	itt	eq
 8004a74:	1809      	addeq	r1, r1, r0
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	6054      	str	r4, [r2, #4]
 8004a7a:	e7ca      	b.n	8004a12 <_free_r+0x22>
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	200002c4 	.word	0x200002c4

08004a84 <sbrk_aligned>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4e0f      	ldr	r6, [pc, #60]	@ (8004ac4 <sbrk_aligned+0x40>)
 8004a88:	460c      	mov	r4, r1
 8004a8a:	6831      	ldr	r1, [r6, #0]
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	b911      	cbnz	r1, 8004a96 <sbrk_aligned+0x12>
 8004a90:	f000 fcb4 	bl	80053fc <_sbrk_r>
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	4621      	mov	r1, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 fcaf 	bl	80053fc <_sbrk_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	d103      	bne.n	8004aaa <sbrk_aligned+0x26>
 8004aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	1cc4      	adds	r4, r0, #3
 8004aac:	f024 0403 	bic.w	r4, r4, #3
 8004ab0:	42a0      	cmp	r0, r4
 8004ab2:	d0f8      	beq.n	8004aa6 <sbrk_aligned+0x22>
 8004ab4:	1a21      	subs	r1, r4, r0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fca0 	bl	80053fc <_sbrk_r>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d1f2      	bne.n	8004aa6 <sbrk_aligned+0x22>
 8004ac0:	e7ef      	b.n	8004aa2 <sbrk_aligned+0x1e>
 8004ac2:	bf00      	nop
 8004ac4:	200002c0 	.word	0x200002c0

08004ac8 <_malloc_r>:
 8004ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004acc:	1ccd      	adds	r5, r1, #3
 8004ace:	f025 0503 	bic.w	r5, r5, #3
 8004ad2:	3508      	adds	r5, #8
 8004ad4:	2d0c      	cmp	r5, #12
 8004ad6:	bf38      	it	cc
 8004ad8:	250c      	movcc	r5, #12
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	4606      	mov	r6, r0
 8004ade:	db01      	blt.n	8004ae4 <_malloc_r+0x1c>
 8004ae0:	42a9      	cmp	r1, r5
 8004ae2:	d904      	bls.n	8004aee <_malloc_r+0x26>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bc4 <_malloc_r+0xfc>
 8004af2:	f000 f869 	bl	8004bc8 <__malloc_lock>
 8004af6:	f8d8 3000 	ldr.w	r3, [r8]
 8004afa:	461c      	mov	r4, r3
 8004afc:	bb44      	cbnz	r4, 8004b50 <_malloc_r+0x88>
 8004afe:	4629      	mov	r1, r5
 8004b00:	4630      	mov	r0, r6
 8004b02:	f7ff ffbf 	bl	8004a84 <sbrk_aligned>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	4604      	mov	r4, r0
 8004b0a:	d158      	bne.n	8004bbe <_malloc_r+0xf6>
 8004b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b10:	4627      	mov	r7, r4
 8004b12:	2f00      	cmp	r7, #0
 8004b14:	d143      	bne.n	8004b9e <_malloc_r+0xd6>
 8004b16:	2c00      	cmp	r4, #0
 8004b18:	d04b      	beq.n	8004bb2 <_malloc_r+0xea>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	4630      	mov	r0, r6
 8004b20:	eb04 0903 	add.w	r9, r4, r3
 8004b24:	f000 fc6a 	bl	80053fc <_sbrk_r>
 8004b28:	4581      	cmp	r9, r0
 8004b2a:	d142      	bne.n	8004bb2 <_malloc_r+0xea>
 8004b2c:	6821      	ldr	r1, [r4, #0]
 8004b2e:	1a6d      	subs	r5, r5, r1
 8004b30:	4629      	mov	r1, r5
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7ff ffa6 	bl	8004a84 <sbrk_aligned>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d03a      	beq.n	8004bb2 <_malloc_r+0xea>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	442b      	add	r3, r5
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	f8d8 3000 	ldr.w	r3, [r8]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	bb62      	cbnz	r2, 8004ba4 <_malloc_r+0xdc>
 8004b4a:	f8c8 7000 	str.w	r7, [r8]
 8004b4e:	e00f      	b.n	8004b70 <_malloc_r+0xa8>
 8004b50:	6822      	ldr	r2, [r4, #0]
 8004b52:	1b52      	subs	r2, r2, r5
 8004b54:	d420      	bmi.n	8004b98 <_malloc_r+0xd0>
 8004b56:	2a0b      	cmp	r2, #11
 8004b58:	d917      	bls.n	8004b8a <_malloc_r+0xc2>
 8004b5a:	1961      	adds	r1, r4, r5
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	6025      	str	r5, [r4, #0]
 8004b60:	bf18      	it	ne
 8004b62:	6059      	strne	r1, [r3, #4]
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	bf08      	it	eq
 8004b68:	f8c8 1000 	streq.w	r1, [r8]
 8004b6c:	5162      	str	r2, [r4, r5]
 8004b6e:	604b      	str	r3, [r1, #4]
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f82f 	bl	8004bd4 <__malloc_unlock>
 8004b76:	f104 000b 	add.w	r0, r4, #11
 8004b7a:	1d23      	adds	r3, r4, #4
 8004b7c:	f020 0007 	bic.w	r0, r0, #7
 8004b80:	1ac2      	subs	r2, r0, r3
 8004b82:	bf1c      	itt	ne
 8004b84:	1a1b      	subne	r3, r3, r0
 8004b86:	50a3      	strne	r3, [r4, r2]
 8004b88:	e7af      	b.n	8004aea <_malloc_r+0x22>
 8004b8a:	6862      	ldr	r2, [r4, #4]
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	bf0c      	ite	eq
 8004b90:	f8c8 2000 	streq.w	r2, [r8]
 8004b94:	605a      	strne	r2, [r3, #4]
 8004b96:	e7eb      	b.n	8004b70 <_malloc_r+0xa8>
 8004b98:	4623      	mov	r3, r4
 8004b9a:	6864      	ldr	r4, [r4, #4]
 8004b9c:	e7ae      	b.n	8004afc <_malloc_r+0x34>
 8004b9e:	463c      	mov	r4, r7
 8004ba0:	687f      	ldr	r7, [r7, #4]
 8004ba2:	e7b6      	b.n	8004b12 <_malloc_r+0x4a>
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	d1fb      	bne.n	8004ba4 <_malloc_r+0xdc>
 8004bac:	2300      	movs	r3, #0
 8004bae:	6053      	str	r3, [r2, #4]
 8004bb0:	e7de      	b.n	8004b70 <_malloc_r+0xa8>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f000 f80c 	bl	8004bd4 <__malloc_unlock>
 8004bbc:	e794      	b.n	8004ae8 <_malloc_r+0x20>
 8004bbe:	6005      	str	r5, [r0, #0]
 8004bc0:	e7d6      	b.n	8004b70 <_malloc_r+0xa8>
 8004bc2:	bf00      	nop
 8004bc4:	200002c4 	.word	0x200002c4

08004bc8 <__malloc_lock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__malloc_lock+0x8>)
 8004bca:	f7ff bf0e 	b.w	80049ea <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	200002bc 	.word	0x200002bc

08004bd4 <__malloc_unlock>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__malloc_unlock+0x8>)
 8004bd6:	f7ff bf09 	b.w	80049ec <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	200002bc 	.word	0x200002bc

08004be0 <__sfputc_r>:
 8004be0:	6893      	ldr	r3, [r2, #8]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	b410      	push	{r4}
 8004be8:	6093      	str	r3, [r2, #8]
 8004bea:	da08      	bge.n	8004bfe <__sfputc_r+0x1e>
 8004bec:	6994      	ldr	r4, [r2, #24]
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	db01      	blt.n	8004bf6 <__sfputc_r+0x16>
 8004bf2:	290a      	cmp	r1, #10
 8004bf4:	d103      	bne.n	8004bfe <__sfputc_r+0x1e>
 8004bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bfa:	f000 bb6b 	b.w	80052d4 <__swbuf_r>
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	1c58      	adds	r0, r3, #1
 8004c02:	6010      	str	r0, [r2, #0]
 8004c04:	7019      	strb	r1, [r3, #0]
 8004c06:	4608      	mov	r0, r1
 8004c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <__sfputs_r>:
 8004c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c10:	4606      	mov	r6, r0
 8004c12:	460f      	mov	r7, r1
 8004c14:	4614      	mov	r4, r2
 8004c16:	18d5      	adds	r5, r2, r3
 8004c18:	42ac      	cmp	r4, r5
 8004c1a:	d101      	bne.n	8004c20 <__sfputs_r+0x12>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e007      	b.n	8004c30 <__sfputs_r+0x22>
 8004c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c24:	463a      	mov	r2, r7
 8004c26:	4630      	mov	r0, r6
 8004c28:	f7ff ffda 	bl	8004be0 <__sfputc_r>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d1f3      	bne.n	8004c18 <__sfputs_r+0xa>
 8004c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c34 <_vfiprintf_r>:
 8004c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c38:	460d      	mov	r5, r1
 8004c3a:	b09d      	sub	sp, #116	@ 0x74
 8004c3c:	4614      	mov	r4, r2
 8004c3e:	4698      	mov	r8, r3
 8004c40:	4606      	mov	r6, r0
 8004c42:	b118      	cbz	r0, 8004c4c <_vfiprintf_r+0x18>
 8004c44:	6a03      	ldr	r3, [r0, #32]
 8004c46:	b90b      	cbnz	r3, 8004c4c <_vfiprintf_r+0x18>
 8004c48:	f7ff fdca 	bl	80047e0 <__sinit>
 8004c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c4e:	07d9      	lsls	r1, r3, #31
 8004c50:	d405      	bmi.n	8004c5e <_vfiprintf_r+0x2a>
 8004c52:	89ab      	ldrh	r3, [r5, #12]
 8004c54:	059a      	lsls	r2, r3, #22
 8004c56:	d402      	bmi.n	8004c5e <_vfiprintf_r+0x2a>
 8004c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c5a:	f7ff fec6 	bl	80049ea <__retarget_lock_acquire_recursive>
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	d501      	bpl.n	8004c68 <_vfiprintf_r+0x34>
 8004c64:	692b      	ldr	r3, [r5, #16]
 8004c66:	b99b      	cbnz	r3, 8004c90 <_vfiprintf_r+0x5c>
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 fb70 	bl	8005350 <__swsetup_r>
 8004c70:	b170      	cbz	r0, 8004c90 <_vfiprintf_r+0x5c>
 8004c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c74:	07dc      	lsls	r4, r3, #31
 8004c76:	d504      	bpl.n	8004c82 <_vfiprintf_r+0x4e>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b01d      	add	sp, #116	@ 0x74
 8004c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c82:	89ab      	ldrh	r3, [r5, #12]
 8004c84:	0598      	lsls	r0, r3, #22
 8004c86:	d4f7      	bmi.n	8004c78 <_vfiprintf_r+0x44>
 8004c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c8a:	f7ff feaf 	bl	80049ec <__retarget_lock_release_recursive>
 8004c8e:	e7f3      	b.n	8004c78 <_vfiprintf_r+0x44>
 8004c90:	2300      	movs	r3, #0
 8004c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c94:	2320      	movs	r3, #32
 8004c96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c9e:	2330      	movs	r3, #48	@ 0x30
 8004ca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e50 <_vfiprintf_r+0x21c>
 8004ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ca8:	f04f 0901 	mov.w	r9, #1
 8004cac:	4623      	mov	r3, r4
 8004cae:	469a      	mov	sl, r3
 8004cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb4:	b10a      	cbz	r2, 8004cba <_vfiprintf_r+0x86>
 8004cb6:	2a25      	cmp	r2, #37	@ 0x25
 8004cb8:	d1f9      	bne.n	8004cae <_vfiprintf_r+0x7a>
 8004cba:	ebba 0b04 	subs.w	fp, sl, r4
 8004cbe:	d00b      	beq.n	8004cd8 <_vfiprintf_r+0xa4>
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f7ff ffa1 	bl	8004c0e <__sfputs_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f000 80a7 	beq.w	8004e20 <_vfiprintf_r+0x1ec>
 8004cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cd4:	445a      	add	r2, fp
 8004cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 809f 	beq.w	8004e20 <_vfiprintf_r+0x1ec>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cec:	f10a 0a01 	add.w	sl, sl, #1
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	9307      	str	r3, [sp, #28]
 8004cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cfa:	4654      	mov	r4, sl
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d02:	4853      	ldr	r0, [pc, #332]	@ (8004e50 <_vfiprintf_r+0x21c>)
 8004d04:	f7fb fa64 	bl	80001d0 <memchr>
 8004d08:	9a04      	ldr	r2, [sp, #16]
 8004d0a:	b9d8      	cbnz	r0, 8004d44 <_vfiprintf_r+0x110>
 8004d0c:	06d1      	lsls	r1, r2, #27
 8004d0e:	bf44      	itt	mi
 8004d10:	2320      	movmi	r3, #32
 8004d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d16:	0713      	lsls	r3, r2, #28
 8004d18:	bf44      	itt	mi
 8004d1a:	232b      	movmi	r3, #43	@ 0x2b
 8004d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d20:	f89a 3000 	ldrb.w	r3, [sl]
 8004d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d26:	d015      	beq.n	8004d54 <_vfiprintf_r+0x120>
 8004d28:	9a07      	ldr	r2, [sp, #28]
 8004d2a:	4654      	mov	r4, sl
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f04f 0c0a 	mov.w	ip, #10
 8004d32:	4621      	mov	r1, r4
 8004d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d38:	3b30      	subs	r3, #48	@ 0x30
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d94b      	bls.n	8004dd6 <_vfiprintf_r+0x1a2>
 8004d3e:	b1b0      	cbz	r0, 8004d6e <_vfiprintf_r+0x13a>
 8004d40:	9207      	str	r2, [sp, #28]
 8004d42:	e014      	b.n	8004d6e <_vfiprintf_r+0x13a>
 8004d44:	eba0 0308 	sub.w	r3, r0, r8
 8004d48:	fa09 f303 	lsl.w	r3, r9, r3
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	46a2      	mov	sl, r4
 8004d52:	e7d2      	b.n	8004cfa <_vfiprintf_r+0xc6>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	1d19      	adds	r1, r3, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	9103      	str	r1, [sp, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bfbb      	ittet	lt
 8004d60:	425b      	neglt	r3, r3
 8004d62:	f042 0202 	orrlt.w	r2, r2, #2
 8004d66:	9307      	strge	r3, [sp, #28]
 8004d68:	9307      	strlt	r3, [sp, #28]
 8004d6a:	bfb8      	it	lt
 8004d6c:	9204      	strlt	r2, [sp, #16]
 8004d6e:	7823      	ldrb	r3, [r4, #0]
 8004d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d72:	d10a      	bne.n	8004d8a <_vfiprintf_r+0x156>
 8004d74:	7863      	ldrb	r3, [r4, #1]
 8004d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d78:	d132      	bne.n	8004de0 <_vfiprintf_r+0x1ac>
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	9203      	str	r2, [sp, #12]
 8004d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d86:	3402      	adds	r4, #2
 8004d88:	9305      	str	r3, [sp, #20]
 8004d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e60 <_vfiprintf_r+0x22c>
 8004d8e:	7821      	ldrb	r1, [r4, #0]
 8004d90:	2203      	movs	r2, #3
 8004d92:	4650      	mov	r0, sl
 8004d94:	f7fb fa1c 	bl	80001d0 <memchr>
 8004d98:	b138      	cbz	r0, 8004daa <_vfiprintf_r+0x176>
 8004d9a:	9b04      	ldr	r3, [sp, #16]
 8004d9c:	eba0 000a 	sub.w	r0, r0, sl
 8004da0:	2240      	movs	r2, #64	@ 0x40
 8004da2:	4082      	lsls	r2, r0
 8004da4:	4313      	orrs	r3, r2
 8004da6:	3401      	adds	r4, #1
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dae:	4829      	ldr	r0, [pc, #164]	@ (8004e54 <_vfiprintf_r+0x220>)
 8004db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004db4:	2206      	movs	r2, #6
 8004db6:	f7fb fa0b 	bl	80001d0 <memchr>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d03f      	beq.n	8004e3e <_vfiprintf_r+0x20a>
 8004dbe:	4b26      	ldr	r3, [pc, #152]	@ (8004e58 <_vfiprintf_r+0x224>)
 8004dc0:	bb1b      	cbnz	r3, 8004e0a <_vfiprintf_r+0x1d6>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	3307      	adds	r3, #7
 8004dc6:	f023 0307 	bic.w	r3, r3, #7
 8004dca:	3308      	adds	r3, #8
 8004dcc:	9303      	str	r3, [sp, #12]
 8004dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd0:	443b      	add	r3, r7
 8004dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd4:	e76a      	b.n	8004cac <_vfiprintf_r+0x78>
 8004dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dda:	460c      	mov	r4, r1
 8004ddc:	2001      	movs	r0, #1
 8004dde:	e7a8      	b.n	8004d32 <_vfiprintf_r+0xfe>
 8004de0:	2300      	movs	r3, #0
 8004de2:	3401      	adds	r4, #1
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f04f 0c0a 	mov.w	ip, #10
 8004dec:	4620      	mov	r0, r4
 8004dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df2:	3a30      	subs	r2, #48	@ 0x30
 8004df4:	2a09      	cmp	r2, #9
 8004df6:	d903      	bls.n	8004e00 <_vfiprintf_r+0x1cc>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0c6      	beq.n	8004d8a <_vfiprintf_r+0x156>
 8004dfc:	9105      	str	r1, [sp, #20]
 8004dfe:	e7c4      	b.n	8004d8a <_vfiprintf_r+0x156>
 8004e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e04:	4604      	mov	r4, r0
 8004e06:	2301      	movs	r3, #1
 8004e08:	e7f0      	b.n	8004dec <_vfiprintf_r+0x1b8>
 8004e0a:	ab03      	add	r3, sp, #12
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	462a      	mov	r2, r5
 8004e10:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <_vfiprintf_r+0x228>)
 8004e12:	a904      	add	r1, sp, #16
 8004e14:	4630      	mov	r0, r6
 8004e16:	f3af 8000 	nop.w
 8004e1a:	4607      	mov	r7, r0
 8004e1c:	1c78      	adds	r0, r7, #1
 8004e1e:	d1d6      	bne.n	8004dce <_vfiprintf_r+0x19a>
 8004e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e22:	07d9      	lsls	r1, r3, #31
 8004e24:	d405      	bmi.n	8004e32 <_vfiprintf_r+0x1fe>
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	059a      	lsls	r2, r3, #22
 8004e2a:	d402      	bmi.n	8004e32 <_vfiprintf_r+0x1fe>
 8004e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e2e:	f7ff fddd 	bl	80049ec <__retarget_lock_release_recursive>
 8004e32:	89ab      	ldrh	r3, [r5, #12]
 8004e34:	065b      	lsls	r3, r3, #25
 8004e36:	f53f af1f 	bmi.w	8004c78 <_vfiprintf_r+0x44>
 8004e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e3c:	e71e      	b.n	8004c7c <_vfiprintf_r+0x48>
 8004e3e:	ab03      	add	r3, sp, #12
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	462a      	mov	r2, r5
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <_vfiprintf_r+0x228>)
 8004e46:	a904      	add	r1, sp, #16
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 f879 	bl	8004f40 <_printf_i>
 8004e4e:	e7e4      	b.n	8004e1a <_vfiprintf_r+0x1e6>
 8004e50:	0800559c 	.word	0x0800559c
 8004e54:	080055a6 	.word	0x080055a6
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	08004c0f 	.word	0x08004c0f
 8004e60:	080055a2 	.word	0x080055a2

08004e64 <_printf_common>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	4616      	mov	r6, r2
 8004e6a:	4698      	mov	r8, r3
 8004e6c:	688a      	ldr	r2, [r1, #8]
 8004e6e:	690b      	ldr	r3, [r1, #16]
 8004e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	bfb8      	it	lt
 8004e78:	4613      	movlt	r3, r2
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e80:	4607      	mov	r7, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	b10a      	cbz	r2, 8004e8a <_printf_common+0x26>
 8004e86:	3301      	adds	r3, #1
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	0699      	lsls	r1, r3, #26
 8004e8e:	bf42      	ittt	mi
 8004e90:	6833      	ldrmi	r3, [r6, #0]
 8004e92:	3302      	addmi	r3, #2
 8004e94:	6033      	strmi	r3, [r6, #0]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d106      	bne.n	8004eac <_printf_common+0x48>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	6832      	ldr	r2, [r6, #0]
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dc26      	bgt.n	8004efa <_printf_common+0x96>
 8004eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	3b00      	subs	r3, #0
 8004eb4:	bf18      	it	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	0692      	lsls	r2, r2, #26
 8004eba:	d42b      	bmi.n	8004f14 <_printf_common+0xb0>
 8004ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c8      	blx	r9
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d01e      	beq.n	8004f08 <_printf_common+0xa4>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	f003 0306 	and.w	r3, r3, #6
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	bf02      	ittt	eq
 8004ed6:	68e5      	ldreq	r5, [r4, #12]
 8004ed8:	6833      	ldreq	r3, [r6, #0]
 8004eda:	1aed      	subeq	r5, r5, r3
 8004edc:	68a3      	ldr	r3, [r4, #8]
 8004ede:	bf0c      	ite	eq
 8004ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee4:	2500      	movne	r5, #0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bfc4      	itt	gt
 8004eea:	1a9b      	subgt	r3, r3, r2
 8004eec:	18ed      	addgt	r5, r5, r3
 8004eee:	2600      	movs	r6, #0
 8004ef0:	341a      	adds	r4, #26
 8004ef2:	42b5      	cmp	r5, r6
 8004ef4:	d11a      	bne.n	8004f2c <_printf_common+0xc8>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e008      	b.n	8004f0c <_printf_common+0xa8>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4652      	mov	r2, sl
 8004efe:	4641      	mov	r1, r8
 8004f00:	4638      	mov	r0, r7
 8004f02:	47c8      	blx	r9
 8004f04:	3001      	adds	r0, #1
 8004f06:	d103      	bne.n	8004f10 <_printf_common+0xac>
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	3501      	adds	r5, #1
 8004f12:	e7c6      	b.n	8004ea2 <_printf_common+0x3e>
 8004f14:	18e1      	adds	r1, r4, r3
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	2030      	movs	r0, #48	@ 0x30
 8004f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f1e:	4422      	add	r2, r4
 8004f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f28:	3302      	adds	r3, #2
 8004f2a:	e7c7      	b.n	8004ebc <_printf_common+0x58>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4641      	mov	r1, r8
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c8      	blx	r9
 8004f36:	3001      	adds	r0, #1
 8004f38:	d0e6      	beq.n	8004f08 <_printf_common+0xa4>
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7d9      	b.n	8004ef2 <_printf_common+0x8e>
	...

08004f40 <_printf_i>:
 8004f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	7e0f      	ldrb	r7, [r1, #24]
 8004f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f48:	2f78      	cmp	r7, #120	@ 0x78
 8004f4a:	4691      	mov	r9, r2
 8004f4c:	4680      	mov	r8, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	469a      	mov	sl, r3
 8004f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f56:	d807      	bhi.n	8004f68 <_printf_i+0x28>
 8004f58:	2f62      	cmp	r7, #98	@ 0x62
 8004f5a:	d80a      	bhi.n	8004f72 <_printf_i+0x32>
 8004f5c:	2f00      	cmp	r7, #0
 8004f5e:	f000 80d1 	beq.w	8005104 <_printf_i+0x1c4>
 8004f62:	2f58      	cmp	r7, #88	@ 0x58
 8004f64:	f000 80b8 	beq.w	80050d8 <_printf_i+0x198>
 8004f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f70:	e03a      	b.n	8004fe8 <_printf_i+0xa8>
 8004f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f76:	2b15      	cmp	r3, #21
 8004f78:	d8f6      	bhi.n	8004f68 <_printf_i+0x28>
 8004f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f80 <_printf_i+0x40>)
 8004f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004f69 	.word	0x08004f69
 8004f8c:	08004f69 	.word	0x08004f69
 8004f90:	08004f69 	.word	0x08004f69
 8004f94:	08004f69 	.word	0x08004f69
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004f69 	.word	0x08004f69
 8004fa0:	08004f69 	.word	0x08004f69
 8004fa4:	08004f69 	.word	0x08004f69
 8004fa8:	08004f69 	.word	0x08004f69
 8004fac:	080050eb 	.word	0x080050eb
 8004fb0:	08005017 	.word	0x08005017
 8004fb4:	080050a5 	.word	0x080050a5
 8004fb8:	08004f69 	.word	0x08004f69
 8004fbc:	08004f69 	.word	0x08004f69
 8004fc0:	0800510d 	.word	0x0800510d
 8004fc4:	08004f69 	.word	0x08004f69
 8004fc8:	08005017 	.word	0x08005017
 8004fcc:	08004f69 	.word	0x08004f69
 8004fd0:	08004f69 	.word	0x08004f69
 8004fd4:	080050ad 	.word	0x080050ad
 8004fd8:	6833      	ldr	r3, [r6, #0]
 8004fda:	1d1a      	adds	r2, r3, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6032      	str	r2, [r6, #0]
 8004fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e09c      	b.n	8005126 <_printf_i+0x1e6>
 8004fec:	6833      	ldr	r3, [r6, #0]
 8004fee:	6820      	ldr	r0, [r4, #0]
 8004ff0:	1d19      	adds	r1, r3, #4
 8004ff2:	6031      	str	r1, [r6, #0]
 8004ff4:	0606      	lsls	r6, r0, #24
 8004ff6:	d501      	bpl.n	8004ffc <_printf_i+0xbc>
 8004ff8:	681d      	ldr	r5, [r3, #0]
 8004ffa:	e003      	b.n	8005004 <_printf_i+0xc4>
 8004ffc:	0645      	lsls	r5, r0, #25
 8004ffe:	d5fb      	bpl.n	8004ff8 <_printf_i+0xb8>
 8005000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005004:	2d00      	cmp	r5, #0
 8005006:	da03      	bge.n	8005010 <_printf_i+0xd0>
 8005008:	232d      	movs	r3, #45	@ 0x2d
 800500a:	426d      	negs	r5, r5
 800500c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005010:	4858      	ldr	r0, [pc, #352]	@ (8005174 <_printf_i+0x234>)
 8005012:	230a      	movs	r3, #10
 8005014:	e011      	b.n	800503a <_printf_i+0xfa>
 8005016:	6821      	ldr	r1, [r4, #0]
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	0608      	lsls	r0, r1, #24
 800501c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005020:	d402      	bmi.n	8005028 <_printf_i+0xe8>
 8005022:	0649      	lsls	r1, r1, #25
 8005024:	bf48      	it	mi
 8005026:	b2ad      	uxthmi	r5, r5
 8005028:	2f6f      	cmp	r7, #111	@ 0x6f
 800502a:	4852      	ldr	r0, [pc, #328]	@ (8005174 <_printf_i+0x234>)
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	bf14      	ite	ne
 8005030:	230a      	movne	r3, #10
 8005032:	2308      	moveq	r3, #8
 8005034:	2100      	movs	r1, #0
 8005036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800503a:	6866      	ldr	r6, [r4, #4]
 800503c:	60a6      	str	r6, [r4, #8]
 800503e:	2e00      	cmp	r6, #0
 8005040:	db05      	blt.n	800504e <_printf_i+0x10e>
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	432e      	orrs	r6, r5
 8005046:	f021 0104 	bic.w	r1, r1, #4
 800504a:	6021      	str	r1, [r4, #0]
 800504c:	d04b      	beq.n	80050e6 <_printf_i+0x1a6>
 800504e:	4616      	mov	r6, r2
 8005050:	fbb5 f1f3 	udiv	r1, r5, r3
 8005054:	fb03 5711 	mls	r7, r3, r1, r5
 8005058:	5dc7      	ldrb	r7, [r0, r7]
 800505a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800505e:	462f      	mov	r7, r5
 8005060:	42bb      	cmp	r3, r7
 8005062:	460d      	mov	r5, r1
 8005064:	d9f4      	bls.n	8005050 <_printf_i+0x110>
 8005066:	2b08      	cmp	r3, #8
 8005068:	d10b      	bne.n	8005082 <_printf_i+0x142>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	07df      	lsls	r7, r3, #31
 800506e:	d508      	bpl.n	8005082 <_printf_i+0x142>
 8005070:	6923      	ldr	r3, [r4, #16]
 8005072:	6861      	ldr	r1, [r4, #4]
 8005074:	4299      	cmp	r1, r3
 8005076:	bfde      	ittt	le
 8005078:	2330      	movle	r3, #48	@ 0x30
 800507a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800507e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005082:	1b92      	subs	r2, r2, r6
 8005084:	6122      	str	r2, [r4, #16]
 8005086:	f8cd a000 	str.w	sl, [sp]
 800508a:	464b      	mov	r3, r9
 800508c:	aa03      	add	r2, sp, #12
 800508e:	4621      	mov	r1, r4
 8005090:	4640      	mov	r0, r8
 8005092:	f7ff fee7 	bl	8004e64 <_printf_common>
 8005096:	3001      	adds	r0, #1
 8005098:	d14a      	bne.n	8005130 <_printf_i+0x1f0>
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	b004      	add	sp, #16
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	f043 0320 	orr.w	r3, r3, #32
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	4832      	ldr	r0, [pc, #200]	@ (8005178 <_printf_i+0x238>)
 80050ae:	2778      	movs	r7, #120	@ 0x78
 80050b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	6831      	ldr	r1, [r6, #0]
 80050b8:	061f      	lsls	r7, r3, #24
 80050ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80050be:	d402      	bmi.n	80050c6 <_printf_i+0x186>
 80050c0:	065f      	lsls	r7, r3, #25
 80050c2:	bf48      	it	mi
 80050c4:	b2ad      	uxthmi	r5, r5
 80050c6:	6031      	str	r1, [r6, #0]
 80050c8:	07d9      	lsls	r1, r3, #31
 80050ca:	bf44      	itt	mi
 80050cc:	f043 0320 	orrmi.w	r3, r3, #32
 80050d0:	6023      	strmi	r3, [r4, #0]
 80050d2:	b11d      	cbz	r5, 80050dc <_printf_i+0x19c>
 80050d4:	2310      	movs	r3, #16
 80050d6:	e7ad      	b.n	8005034 <_printf_i+0xf4>
 80050d8:	4826      	ldr	r0, [pc, #152]	@ (8005174 <_printf_i+0x234>)
 80050da:	e7e9      	b.n	80050b0 <_printf_i+0x170>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	f023 0320 	bic.w	r3, r3, #32
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	e7f6      	b.n	80050d4 <_printf_i+0x194>
 80050e6:	4616      	mov	r6, r2
 80050e8:	e7bd      	b.n	8005066 <_printf_i+0x126>
 80050ea:	6833      	ldr	r3, [r6, #0]
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	6961      	ldr	r1, [r4, #20]
 80050f0:	1d18      	adds	r0, r3, #4
 80050f2:	6030      	str	r0, [r6, #0]
 80050f4:	062e      	lsls	r6, r5, #24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	d501      	bpl.n	80050fe <_printf_i+0x1be>
 80050fa:	6019      	str	r1, [r3, #0]
 80050fc:	e002      	b.n	8005104 <_printf_i+0x1c4>
 80050fe:	0668      	lsls	r0, r5, #25
 8005100:	d5fb      	bpl.n	80050fa <_printf_i+0x1ba>
 8005102:	8019      	strh	r1, [r3, #0]
 8005104:	2300      	movs	r3, #0
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	4616      	mov	r6, r2
 800510a:	e7bc      	b.n	8005086 <_printf_i+0x146>
 800510c:	6833      	ldr	r3, [r6, #0]
 800510e:	1d1a      	adds	r2, r3, #4
 8005110:	6032      	str	r2, [r6, #0]
 8005112:	681e      	ldr	r6, [r3, #0]
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	2100      	movs	r1, #0
 8005118:	4630      	mov	r0, r6
 800511a:	f7fb f859 	bl	80001d0 <memchr>
 800511e:	b108      	cbz	r0, 8005124 <_printf_i+0x1e4>
 8005120:	1b80      	subs	r0, r0, r6
 8005122:	6060      	str	r0, [r4, #4]
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	2300      	movs	r3, #0
 800512a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800512e:	e7aa      	b.n	8005086 <_printf_i+0x146>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	4632      	mov	r2, r6
 8005134:	4649      	mov	r1, r9
 8005136:	4640      	mov	r0, r8
 8005138:	47d0      	blx	sl
 800513a:	3001      	adds	r0, #1
 800513c:	d0ad      	beq.n	800509a <_printf_i+0x15a>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	079b      	lsls	r3, r3, #30
 8005142:	d413      	bmi.n	800516c <_printf_i+0x22c>
 8005144:	68e0      	ldr	r0, [r4, #12]
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	4298      	cmp	r0, r3
 800514a:	bfb8      	it	lt
 800514c:	4618      	movlt	r0, r3
 800514e:	e7a6      	b.n	800509e <_printf_i+0x15e>
 8005150:	2301      	movs	r3, #1
 8005152:	4632      	mov	r2, r6
 8005154:	4649      	mov	r1, r9
 8005156:	4640      	mov	r0, r8
 8005158:	47d0      	blx	sl
 800515a:	3001      	adds	r0, #1
 800515c:	d09d      	beq.n	800509a <_printf_i+0x15a>
 800515e:	3501      	adds	r5, #1
 8005160:	68e3      	ldr	r3, [r4, #12]
 8005162:	9903      	ldr	r1, [sp, #12]
 8005164:	1a5b      	subs	r3, r3, r1
 8005166:	42ab      	cmp	r3, r5
 8005168:	dcf2      	bgt.n	8005150 <_printf_i+0x210>
 800516a:	e7eb      	b.n	8005144 <_printf_i+0x204>
 800516c:	2500      	movs	r5, #0
 800516e:	f104 0619 	add.w	r6, r4, #25
 8005172:	e7f5      	b.n	8005160 <_printf_i+0x220>
 8005174:	080055ad 	.word	0x080055ad
 8005178:	080055be 	.word	0x080055be

0800517c <__sflush_r>:
 800517c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	0716      	lsls	r6, r2, #28
 8005186:	4605      	mov	r5, r0
 8005188:	460c      	mov	r4, r1
 800518a:	d454      	bmi.n	8005236 <__sflush_r+0xba>
 800518c:	684b      	ldr	r3, [r1, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	dc02      	bgt.n	8005198 <__sflush_r+0x1c>
 8005192:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	dd48      	ble.n	800522a <__sflush_r+0xae>
 8005198:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800519a:	2e00      	cmp	r6, #0
 800519c:	d045      	beq.n	800522a <__sflush_r+0xae>
 800519e:	2300      	movs	r3, #0
 80051a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051a4:	682f      	ldr	r7, [r5, #0]
 80051a6:	6a21      	ldr	r1, [r4, #32]
 80051a8:	602b      	str	r3, [r5, #0]
 80051aa:	d030      	beq.n	800520e <__sflush_r+0x92>
 80051ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	0759      	lsls	r1, r3, #29
 80051b2:	d505      	bpl.n	80051c0 <__sflush_r+0x44>
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051ba:	b10b      	cbz	r3, 80051c0 <__sflush_r+0x44>
 80051bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051c4:	6a21      	ldr	r1, [r4, #32]
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b0      	blx	r6
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	d106      	bne.n	80051de <__sflush_r+0x62>
 80051d0:	6829      	ldr	r1, [r5, #0]
 80051d2:	291d      	cmp	r1, #29
 80051d4:	d82b      	bhi.n	800522e <__sflush_r+0xb2>
 80051d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005280 <__sflush_r+0x104>)
 80051d8:	40ca      	lsrs	r2, r1
 80051da:	07d6      	lsls	r6, r2, #31
 80051dc:	d527      	bpl.n	800522e <__sflush_r+0xb2>
 80051de:	2200      	movs	r2, #0
 80051e0:	6062      	str	r2, [r4, #4]
 80051e2:	04d9      	lsls	r1, r3, #19
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	6022      	str	r2, [r4, #0]
 80051e8:	d504      	bpl.n	80051f4 <__sflush_r+0x78>
 80051ea:	1c42      	adds	r2, r0, #1
 80051ec:	d101      	bne.n	80051f2 <__sflush_r+0x76>
 80051ee:	682b      	ldr	r3, [r5, #0]
 80051f0:	b903      	cbnz	r3, 80051f4 <__sflush_r+0x78>
 80051f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80051f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051f6:	602f      	str	r7, [r5, #0]
 80051f8:	b1b9      	cbz	r1, 800522a <__sflush_r+0xae>
 80051fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051fe:	4299      	cmp	r1, r3
 8005200:	d002      	beq.n	8005208 <__sflush_r+0x8c>
 8005202:	4628      	mov	r0, r5
 8005204:	f7ff fbf4 	bl	80049f0 <_free_r>
 8005208:	2300      	movs	r3, #0
 800520a:	6363      	str	r3, [r4, #52]	@ 0x34
 800520c:	e00d      	b.n	800522a <__sflush_r+0xae>
 800520e:	2301      	movs	r3, #1
 8005210:	4628      	mov	r0, r5
 8005212:	47b0      	blx	r6
 8005214:	4602      	mov	r2, r0
 8005216:	1c50      	adds	r0, r2, #1
 8005218:	d1c9      	bne.n	80051ae <__sflush_r+0x32>
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0c6      	beq.n	80051ae <__sflush_r+0x32>
 8005220:	2b1d      	cmp	r3, #29
 8005222:	d001      	beq.n	8005228 <__sflush_r+0xac>
 8005224:	2b16      	cmp	r3, #22
 8005226:	d11e      	bne.n	8005266 <__sflush_r+0xea>
 8005228:	602f      	str	r7, [r5, #0]
 800522a:	2000      	movs	r0, #0
 800522c:	e022      	b.n	8005274 <__sflush_r+0xf8>
 800522e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005232:	b21b      	sxth	r3, r3
 8005234:	e01b      	b.n	800526e <__sflush_r+0xf2>
 8005236:	690f      	ldr	r7, [r1, #16]
 8005238:	2f00      	cmp	r7, #0
 800523a:	d0f6      	beq.n	800522a <__sflush_r+0xae>
 800523c:	0793      	lsls	r3, r2, #30
 800523e:	680e      	ldr	r6, [r1, #0]
 8005240:	bf08      	it	eq
 8005242:	694b      	ldreq	r3, [r1, #20]
 8005244:	600f      	str	r7, [r1, #0]
 8005246:	bf18      	it	ne
 8005248:	2300      	movne	r3, #0
 800524a:	eba6 0807 	sub.w	r8, r6, r7
 800524e:	608b      	str	r3, [r1, #8]
 8005250:	f1b8 0f00 	cmp.w	r8, #0
 8005254:	dde9      	ble.n	800522a <__sflush_r+0xae>
 8005256:	6a21      	ldr	r1, [r4, #32]
 8005258:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800525a:	4643      	mov	r3, r8
 800525c:	463a      	mov	r2, r7
 800525e:	4628      	mov	r0, r5
 8005260:	47b0      	blx	r6
 8005262:	2800      	cmp	r0, #0
 8005264:	dc08      	bgt.n	8005278 <__sflush_r+0xfc>
 8005266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005278:	4407      	add	r7, r0
 800527a:	eba8 0800 	sub.w	r8, r8, r0
 800527e:	e7e7      	b.n	8005250 <__sflush_r+0xd4>
 8005280:	20400001 	.word	0x20400001

08005284 <_fflush_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	4605      	mov	r5, r0
 800528a:	460c      	mov	r4, r1
 800528c:	b913      	cbnz	r3, 8005294 <_fflush_r+0x10>
 800528e:	2500      	movs	r5, #0
 8005290:	4628      	mov	r0, r5
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	b118      	cbz	r0, 800529e <_fflush_r+0x1a>
 8005296:	6a03      	ldr	r3, [r0, #32]
 8005298:	b90b      	cbnz	r3, 800529e <_fflush_r+0x1a>
 800529a:	f7ff faa1 	bl	80047e0 <__sinit>
 800529e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f3      	beq.n	800528e <_fflush_r+0xa>
 80052a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052a8:	07d0      	lsls	r0, r2, #31
 80052aa:	d404      	bmi.n	80052b6 <_fflush_r+0x32>
 80052ac:	0599      	lsls	r1, r3, #22
 80052ae:	d402      	bmi.n	80052b6 <_fflush_r+0x32>
 80052b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052b2:	f7ff fb9a 	bl	80049ea <__retarget_lock_acquire_recursive>
 80052b6:	4628      	mov	r0, r5
 80052b8:	4621      	mov	r1, r4
 80052ba:	f7ff ff5f 	bl	800517c <__sflush_r>
 80052be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052c0:	07da      	lsls	r2, r3, #31
 80052c2:	4605      	mov	r5, r0
 80052c4:	d4e4      	bmi.n	8005290 <_fflush_r+0xc>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	059b      	lsls	r3, r3, #22
 80052ca:	d4e1      	bmi.n	8005290 <_fflush_r+0xc>
 80052cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ce:	f7ff fb8d 	bl	80049ec <__retarget_lock_release_recursive>
 80052d2:	e7dd      	b.n	8005290 <_fflush_r+0xc>

080052d4 <__swbuf_r>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	460e      	mov	r6, r1
 80052d8:	4614      	mov	r4, r2
 80052da:	4605      	mov	r5, r0
 80052dc:	b118      	cbz	r0, 80052e6 <__swbuf_r+0x12>
 80052de:	6a03      	ldr	r3, [r0, #32]
 80052e0:	b90b      	cbnz	r3, 80052e6 <__swbuf_r+0x12>
 80052e2:	f7ff fa7d 	bl	80047e0 <__sinit>
 80052e6:	69a3      	ldr	r3, [r4, #24]
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	071a      	lsls	r2, r3, #28
 80052ee:	d501      	bpl.n	80052f4 <__swbuf_r+0x20>
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	b943      	cbnz	r3, 8005306 <__swbuf_r+0x32>
 80052f4:	4621      	mov	r1, r4
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 f82a 	bl	8005350 <__swsetup_r>
 80052fc:	b118      	cbz	r0, 8005306 <__swbuf_r+0x32>
 80052fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005302:	4638      	mov	r0, r7
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	6922      	ldr	r2, [r4, #16]
 800530a:	1a98      	subs	r0, r3, r2
 800530c:	6963      	ldr	r3, [r4, #20]
 800530e:	b2f6      	uxtb	r6, r6
 8005310:	4283      	cmp	r3, r0
 8005312:	4637      	mov	r7, r6
 8005314:	dc05      	bgt.n	8005322 <__swbuf_r+0x4e>
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f7ff ffb3 	bl	8005284 <_fflush_r>
 800531e:	2800      	cmp	r0, #0
 8005320:	d1ed      	bne.n	80052fe <__swbuf_r+0x2a>
 8005322:	68a3      	ldr	r3, [r4, #8]
 8005324:	3b01      	subs	r3, #1
 8005326:	60a3      	str	r3, [r4, #8]
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	701e      	strb	r6, [r3, #0]
 8005330:	6962      	ldr	r2, [r4, #20]
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	429a      	cmp	r2, r3
 8005336:	d004      	beq.n	8005342 <__swbuf_r+0x6e>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	07db      	lsls	r3, r3, #31
 800533c:	d5e1      	bpl.n	8005302 <__swbuf_r+0x2e>
 800533e:	2e0a      	cmp	r6, #10
 8005340:	d1df      	bne.n	8005302 <__swbuf_r+0x2e>
 8005342:	4621      	mov	r1, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff ff9d 	bl	8005284 <_fflush_r>
 800534a:	2800      	cmp	r0, #0
 800534c:	d0d9      	beq.n	8005302 <__swbuf_r+0x2e>
 800534e:	e7d6      	b.n	80052fe <__swbuf_r+0x2a>

08005350 <__swsetup_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <__swsetup_r+0xa8>)
 8005354:	4605      	mov	r5, r0
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	460c      	mov	r4, r1
 800535a:	b118      	cbz	r0, 8005364 <__swsetup_r+0x14>
 800535c:	6a03      	ldr	r3, [r0, #32]
 800535e:	b90b      	cbnz	r3, 8005364 <__swsetup_r+0x14>
 8005360:	f7ff fa3e 	bl	80047e0 <__sinit>
 8005364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005368:	0719      	lsls	r1, r3, #28
 800536a:	d422      	bmi.n	80053b2 <__swsetup_r+0x62>
 800536c:	06da      	lsls	r2, r3, #27
 800536e:	d407      	bmi.n	8005380 <__swsetup_r+0x30>
 8005370:	2209      	movs	r2, #9
 8005372:	602a      	str	r2, [r5, #0]
 8005374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	e033      	b.n	80053e8 <__swsetup_r+0x98>
 8005380:	0758      	lsls	r0, r3, #29
 8005382:	d512      	bpl.n	80053aa <__swsetup_r+0x5a>
 8005384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005386:	b141      	cbz	r1, 800539a <__swsetup_r+0x4a>
 8005388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800538c:	4299      	cmp	r1, r3
 800538e:	d002      	beq.n	8005396 <__swsetup_r+0x46>
 8005390:	4628      	mov	r0, r5
 8005392:	f7ff fb2d 	bl	80049f0 <_free_r>
 8005396:	2300      	movs	r3, #0
 8005398:	6363      	str	r3, [r4, #52]	@ 0x34
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053a0:	81a3      	strh	r3, [r4, #12]
 80053a2:	2300      	movs	r3, #0
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f043 0308 	orr.w	r3, r3, #8
 80053b0:	81a3      	strh	r3, [r4, #12]
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	b94b      	cbnz	r3, 80053ca <__swsetup_r+0x7a>
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c0:	d003      	beq.n	80053ca <__swsetup_r+0x7a>
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 f84f 	bl	8005468 <__smakebuf_r>
 80053ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ce:	f013 0201 	ands.w	r2, r3, #1
 80053d2:	d00a      	beq.n	80053ea <__swsetup_r+0x9a>
 80053d4:	2200      	movs	r2, #0
 80053d6:	60a2      	str	r2, [r4, #8]
 80053d8:	6962      	ldr	r2, [r4, #20]
 80053da:	4252      	negs	r2, r2
 80053dc:	61a2      	str	r2, [r4, #24]
 80053de:	6922      	ldr	r2, [r4, #16]
 80053e0:	b942      	cbnz	r2, 80053f4 <__swsetup_r+0xa4>
 80053e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053e6:	d1c5      	bne.n	8005374 <__swsetup_r+0x24>
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	0799      	lsls	r1, r3, #30
 80053ec:	bf58      	it	pl
 80053ee:	6962      	ldrpl	r2, [r4, #20]
 80053f0:	60a2      	str	r2, [r4, #8]
 80053f2:	e7f4      	b.n	80053de <__swsetup_r+0x8e>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e7f7      	b.n	80053e8 <__swsetup_r+0x98>
 80053f8:	20000018 	.word	0x20000018

080053fc <_sbrk_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	@ (8005418 <_sbrk_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fb fc20 	bl	8000c4c <_sbrk>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_sbrk_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_sbrk_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	200002b8 	.word	0x200002b8

0800541c <__swhatbuf_r>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	460c      	mov	r4, r1
 8005420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005424:	2900      	cmp	r1, #0
 8005426:	b096      	sub	sp, #88	@ 0x58
 8005428:	4615      	mov	r5, r2
 800542a:	461e      	mov	r6, r3
 800542c:	da0d      	bge.n	800544a <__swhatbuf_r+0x2e>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	bf14      	ite	ne
 800543a:	2340      	movne	r3, #64	@ 0x40
 800543c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005440:	2000      	movs	r0, #0
 8005442:	6031      	str	r1, [r6, #0]
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	b016      	add	sp, #88	@ 0x58
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	466a      	mov	r2, sp
 800544c:	f000 f848 	bl	80054e0 <_fstat_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	dbec      	blt.n	800542e <__swhatbuf_r+0x12>
 8005454:	9901      	ldr	r1, [sp, #4]
 8005456:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800545a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800545e:	4259      	negs	r1, r3
 8005460:	4159      	adcs	r1, r3
 8005462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005466:	e7eb      	b.n	8005440 <__swhatbuf_r+0x24>

08005468 <__smakebuf_r>:
 8005468:	898b      	ldrh	r3, [r1, #12]
 800546a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546c:	079d      	lsls	r5, r3, #30
 800546e:	4606      	mov	r6, r0
 8005470:	460c      	mov	r4, r1
 8005472:	d507      	bpl.n	8005484 <__smakebuf_r+0x1c>
 8005474:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	2301      	movs	r3, #1
 800547e:	6163      	str	r3, [r4, #20]
 8005480:	b003      	add	sp, #12
 8005482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005484:	ab01      	add	r3, sp, #4
 8005486:	466a      	mov	r2, sp
 8005488:	f7ff ffc8 	bl	800541c <__swhatbuf_r>
 800548c:	9f00      	ldr	r7, [sp, #0]
 800548e:	4605      	mov	r5, r0
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff fb18 	bl	8004ac8 <_malloc_r>
 8005498:	b948      	cbnz	r0, 80054ae <__smakebuf_r+0x46>
 800549a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549e:	059a      	lsls	r2, r3, #22
 80054a0:	d4ee      	bmi.n	8005480 <__smakebuf_r+0x18>
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	e7e2      	b.n	8005474 <__smakebuf_r+0xc>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	6020      	str	r0, [r4, #0]
 80054b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054be:	b15b      	cbz	r3, 80054d8 <__smakebuf_r+0x70>
 80054c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f81d 	bl	8005504 <_isatty_r>
 80054ca:	b128      	cbz	r0, 80054d8 <__smakebuf_r+0x70>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	431d      	orrs	r5, r3
 80054dc:	81a5      	strh	r5, [r4, #12]
 80054de:	e7cf      	b.n	8005480 <__smakebuf_r+0x18>

080054e0 <_fstat_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d07      	ldr	r5, [pc, #28]	@ (8005500 <_fstat_r+0x20>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	f7fb fb85 	bl	8000bfc <_fstat>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d102      	bne.n	80054fc <_fstat_r+0x1c>
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	b103      	cbz	r3, 80054fc <_fstat_r+0x1c>
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	bd38      	pop	{r3, r4, r5, pc}
 80054fe:	bf00      	nop
 8005500:	200002b8 	.word	0x200002b8

08005504 <_isatty_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d06      	ldr	r5, [pc, #24]	@ (8005520 <_isatty_r+0x1c>)
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	f7fb fb84 	bl	8000c1c <_isatty>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_isatty_r+0x1a>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_isatty_r+0x1a>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200002b8 	.word	0x200002b8

08005524 <_init>:
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	bf00      	nop
 8005528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552a:	bc08      	pop	{r3}
 800552c:	469e      	mov	lr, r3
 800552e:	4770      	bx	lr

08005530 <_fini>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr
