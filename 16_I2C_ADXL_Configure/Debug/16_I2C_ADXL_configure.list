
16_I2C_ADXL_configure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b3c  08004b3c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b44  08004b44  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004ba8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004ba8  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d58b  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca6  00000000  00000000  00013617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000152c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000933  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002631c  00000000  00000000  000167cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed17  00000000  00000000  0003cae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea8da  00000000  00000000  0004b7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001360d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f8  00000000  00000000  0013611c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00139714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a80 	.word	0x08004a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004a80 	.word	0x08004a80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADXL345_Init>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void ADXL345_Init()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af04      	add	r7, sp, #16
    uint8_t data;

    // 1. Set device to measurement mode (POWER_CTL register = 0x2D)
    data = 0x08;  // Measurement mode
 80005b2:	2308      	movs	r3, #8
 80005b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, 0x2D, 1, &data, 1, HAL_MAX_DELAY);
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	222d      	movs	r2, #45	@ 0x2d
 80005c8:	21a6      	movs	r1, #166	@ 0xa6
 80005ca:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <ADXL345_Init+0x4c>)
 80005cc:	f000 ff50 	bl	8001470 <HAL_I2C_Mem_Write>

    // 2. Set data format: full resolution, +- 2g (DATA_FORMAT register = 0x31)
    data = 0x08;
 80005d0:	2308      	movs	r3, #8
 80005d2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, 0x31, 1, &data, 1, HAL_MAX_DELAY);
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	2301      	movs	r3, #1
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	2231      	movs	r2, #49	@ 0x31
 80005e6:	21a6      	movs	r1, #166	@ 0xa6
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <ADXL345_Init+0x4c>)
 80005ea:	f000 ff41 	bl	8001470 <HAL_I2C_Mem_Write>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000c4 	.word	0x200000c4

080005fc <ADXL345_Read>:

void ADXL345_Read()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af04      	add	r7, sp, #16
    // Read 6 bytes from DATAX0 register (0x32)
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, 0x32, 1, accel_data, 6, HAL_MAX_DELAY);
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2306      	movs	r3, #6
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <ADXL345_Read+0x70>)
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2232      	movs	r2, #50	@ 0x32
 8000614:	21a6      	movs	r1, #166	@ 0xa6
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <ADXL345_Read+0x74>)
 8000618:	f001 f83e 	bl	8001698 <HAL_I2C_Mem_Read>

    // Combine LSB and MSB for X, Y, Z axes
    x = (int16_t)(accel_data[1] << 8 | accel_data[0]);
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <ADXL345_Read+0x70>)
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	b21b      	sxth	r3, r3
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <ADXL345_Read+0x70>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21a      	sxth	r2, r3
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <ADXL345_Read+0x78>)
 8000632:	801a      	strh	r2, [r3, #0]
    y = (int16_t)(accel_data[3] << 8 | accel_data[2]);
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <ADXL345_Read+0x70>)
 8000636:	78db      	ldrb	r3, [r3, #3]
 8000638:	b21b      	sxth	r3, r3
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b21a      	sxth	r2, r3
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <ADXL345_Read+0x70>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <ADXL345_Read+0x7c>)
 800064a:	801a      	strh	r2, [r3, #0]
    z = (int16_t)(accel_data[5] << 8 | accel_data[4]);
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <ADXL345_Read+0x70>)
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	b21b      	sxth	r3, r3
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <ADXL345_Read+0x70>)
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21a      	sxth	r2, r3
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <ADXL345_Read+0x80>)
 8000662:	801a      	strh	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000078 	.word	0x20000078
 8000670:	200000c4 	.word	0x200000c4
 8000674:	2000007e 	.word	0x2000007e
 8000678:	20000080 	.word	0x20000080
 800067c:	20000082 	.word	0x20000082

08000680 <main>:


int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fb0f 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f85f 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f91f 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f8ed 	bl	8000870 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000696:	f000 f8ab 	bl	80007f0 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADXL345_Init();  // Initialize accelerometer
 800069a:	f7ff ff87 	bl	80005ac <ADXL345_Init>

      // Optional: Read device ID of ADXL345 for verification
      uint8_t id = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
      HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, 0x00, 1, &id, 1, HAL_MAX_DELAY);
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	2301      	movs	r3, #1
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2200      	movs	r2, #0
 80006b4:	21a6      	movs	r1, #166	@ 0xa6
 80006b6:	481d      	ldr	r0, [pc, #116]	@ (800072c <main+0xac>)
 80006b8:	f000 ffee 	bl	8001698 <HAL_I2C_Mem_Read>
      snprintf(msg, sizeof(msg), "Device ID: 0x%X\r\n", id); // Format message
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <main+0xb0>)
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	481c      	ldr	r0, [pc, #112]	@ (8000734 <main+0xb4>)
 80006c4:	f003 fd28 	bl	8004118 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); // Send via UART
 80006c8:	481a      	ldr	r0, [pc, #104]	@ (8000734 <main+0xb4>)
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	4917      	ldr	r1, [pc, #92]	@ (8000734 <main+0xb4>)
 80006d8:	4817      	ldr	r0, [pc, #92]	@ (8000738 <main+0xb8>)
 80006da:	f002 ffbf 	bl	800365c <HAL_UART_Transmit>
  while (1)
  {
	  ADXL345_Read(); // Read current X, Y, Z values
 80006de:	f7ff ff8d 	bl	80005fc <ADXL345_Read>

	  // Format the accelerometer values into a string
	  snprintf(msg, sizeof(msg), "X=%d, Y=%d, Z=%d\r\n", x, y, z);
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <main+0xbc>)
 80006e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <main+0xc0>)
 80006ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <main+0xc4>)
 80006f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	460b      	mov	r3, r1
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <main+0xc8>)
 8000700:	2140      	movs	r1, #64	@ 0x40
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <main+0xb4>)
 8000704:	f003 fd08 	bl	8004118 <sniprintf>

	  // Send the formatted data over UART2
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000708:	480a      	ldr	r0, [pc, #40]	@ (8000734 <main+0xb4>)
 800070a:	f7ff fd61 	bl	80001d0 <strlen>
 800070e:	4603      	mov	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	4907      	ldr	r1, [pc, #28]	@ (8000734 <main+0xb4>)
 8000718:	4807      	ldr	r0, [pc, #28]	@ (8000738 <main+0xb8>)
 800071a:	f002 ff9f 	bl	800365c <HAL_UART_Transmit>

	  HAL_Delay(500); // Delay 500ms before next read
 800071e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000722:	f000 fb3d 	bl	8000da0 <HAL_Delay>
	  ADXL345_Read(); // Read current X, Y, Z values
 8000726:	bf00      	nop
 8000728:	e7d9      	b.n	80006de <main+0x5e>
 800072a:	bf00      	nop
 800072c:	200000c4 	.word	0x200000c4
 8000730:	08004a98 	.word	0x08004a98
 8000734:	20000084 	.word	0x20000084
 8000738:	20000118 	.word	0x20000118
 800073c:	2000007e 	.word	0x2000007e
 8000740:	20000080 	.word	0x20000080
 8000744:	20000082 	.word	0x20000082
 8000748:	08004aac 	.word	0x08004aac

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	@ 0x58
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2244      	movs	r2, #68	@ 0x44
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fd12 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000772:	f001 fc13 	bl	8001f9c <HAL_PWREx_ControlVoltageScaling>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800077c:	f000 f90e 	bl	800099c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000788:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2310      	movs	r3, #16
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079a:	230a      	movs	r3, #10
 800079c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079e:	2307      	movs	r3, #7
 80007a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fc4a 	bl	8002048 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ba:	f000 f8ef 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 f812 	bl	8002800 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e2:	f000 f8db 	bl	800099c <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	@ 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_I2C1_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_I2C1_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107181FF;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_I2C1_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	@ (800086c <MX_I2C1_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_I2C1_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	@ (8000864 <MX_I2C1_Init+0x74>)
 800082c:	f000 fd84 	bl	8001338 <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 f8b1 	bl	800099c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <MX_I2C1_Init+0x74>)
 800083e:	f001 fb07 	bl	8001e50 <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 f8a8 	bl	800099c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_I2C1_Init+0x74>)
 8000850:	f001 fb49 	bl	8001ee6 <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f89f 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000c4 	.word	0x200000c4
 8000868:	40005400 	.word	0x40005400
 800086c:	107181ff 	.word	0x107181ff

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	f002 fe84 	bl	80035c0 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f86d 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000118 	.word	0x20000118
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <MX_GPIO_Init+0xc4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <MX_GPIO_Init+0xc4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a24      	ldr	r2, [pc, #144]	@ (8000994 <MX_GPIO_Init+0xc4>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <MX_GPIO_Init+0xc4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <MX_GPIO_Init+0xc4>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094e:	f000 fcdb 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000958:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	@ (8000998 <MX_GPIO_Init+0xc8>)
 800096a:	f000 fb23 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f000 fb14 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	48000800 	.word	0x48000800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <HAL_MspInit+0x44>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x44>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0ac      	sub	sp, #176	@ 0xb0
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2288      	movs	r2, #136	@ 0x88
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fbb7 	bl	8004184 <memset>
  if(hi2c->Instance==I2C1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <HAL_I2C_MspInit+0xb0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d13b      	bne.n	8000a98 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a20:	2340      	movs	r3, #64	@ 0x40
 8000a22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f90b 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a38:	f7ff ffb0 	bl	800099c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <HAL_I2C_MspInit+0xb4>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <HAL_I2C_MspInit+0xb4>)
 8000a42:	f043 0302 	orr.w	r3, r3, #2
 8000a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <HAL_I2C_MspInit+0xb4>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <HAL_I2C_MspInit+0xb8>)
 8000a7c:	f000 fa9a 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_I2C_MspInit+0xb4>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_I2C_MspInit+0xb4>)
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_I2C_MspInit+0xb4>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a98:	bf00      	nop
 8000a9a:	37b0      	adds	r7, #176	@ 0xb0
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000400 	.word	0x48000400

08000aac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0ac      	sub	sp, #176	@ 0xb0
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2288      	movs	r2, #136	@ 0x88
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 fb59 	bl	8004184 <memset>
  if(huart->Instance==USART2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <HAL_UART_MspInit+0xb0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d13b      	bne.n	8000b54 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 f8ad 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af4:	f7ff ff52 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0xb4>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afc:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <HAL_UART_MspInit+0xb4>)
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_UART_MspInit+0xb4>)
 8000b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <HAL_UART_MspInit+0xb4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b14:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <HAL_UART_MspInit+0xb4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1c:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <HAL_UART_MspInit+0xb4>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b40:	2307      	movs	r3, #7
 8000b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f000 fa30 	bl	8000fb4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b54:	bf00      	nop
 8000b56:	37b0      	adds	r7, #176	@ 0xb0
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 f8d1 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f003 face 	bl	8004194 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20018000 	.word	0x20018000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	200001a0 	.word	0x200001a0
 8000c2c:	200002f0 	.word	0x200002f0

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fa8d 	bl	80041a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fcfb 	bl	8000680 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c98:	08004b4c 	.word	0x08004b4c
  ldr r2, =_sbss
 8000c9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ca0:	200002f0 	.word	0x200002f0

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <HAL_Init+0x3c>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f944 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f80f 	bl	8000ce8 <HAL_InitTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	e001      	b.n	8000cda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd6:	f7ff fe67 	bl	80009a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d023      	beq.n	8000d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_InitTick+0x70>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f941 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10f      	bne.n	8000d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d809      	bhi.n	8000d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f919 	bl	8000f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_InitTick+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e007      	b.n	8000d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e004      	b.n	8000d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e001      	b.n	8000d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200001a4 	.word	0x200001a4

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200001a4 	.word	0x200001a4

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff ffee 	bl	8000d88 <HAL_GetTick>
 8000dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db8:	d005      	beq.n	8000dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_Delay+0x44>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff ffde 	bl	8000d88 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d8f7      	bhi.n	8000dc8 <HAL_Delay+0x28>
  {
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	60d3      	str	r3, [r2, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff47 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff5c 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffb0 	bl	8000f08 <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e17f      	b.n	80012c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8171 	beq.w	80012be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_Init+0x40>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 0201 	and.w	r2, r3, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b03      	cmp	r3, #3
 8001060:	d118      	bne.n	8001094 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	6939      	ldr	r1, [r7, #16]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80ac 	beq.w	80012be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b5f      	ldr	r3, [pc, #380]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	4a5e      	ldr	r2, [pc, #376]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6613      	str	r3, [r2, #96]	@ 0x60
 8001172:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800117e:	4a5a      	ldr	r2, [pc, #360]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x242>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <HAL_GPIO_Init+0x338>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x23e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4e      	ldr	r2, [pc, #312]	@ (80012f0 <HAL_GPIO_Init+0x33c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x23a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4d      	ldr	r2, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x340>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x236>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	@ (80012f8 <HAL_GPIO_Init+0x344>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x232>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4b      	ldr	r2, [pc, #300]	@ (80012fc <HAL_GPIO_Init+0x348>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x22e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001300 <HAL_GPIO_Init+0x34c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x22a>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x244>
 80011f6:	2300      	movs	r3, #0
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001208:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	@ (8001304 <HAL_GPIO_Init+0x350>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126a:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <HAL_GPIO_Init+0x350>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <HAL_GPIO_Init+0x350>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <HAL_GPIO_Init+0x350>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f47f ae78 	bne.w	8000fc4 <HAL_GPIO_Init+0x10>
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	48001400 	.word	0x48001400
 8001300:	48001800 	.word	0x48001800
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e08d      	b.n	8001466 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fb46 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	@ 0x24
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001388:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001398:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	e006      	b.n	80013c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d108      	bne.n	80013da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	e007      	b.n	80013ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800140c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69d9      	ldr	r1, [r3, #28]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2220      	movs	r2, #32
 8001452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af02      	add	r7, sp, #8
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4603      	mov	r3, r0
 8001480:	817b      	strh	r3, [r7, #10]
 8001482:	460b      	mov	r3, r1
 8001484:	813b      	strh	r3, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b20      	cmp	r3, #32
 8001494:	f040 80f9 	bne.w	800168a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_I2C_Mem_Write+0x34>
 800149e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d105      	bne.n	80014b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0ed      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Mem_Write+0x4e>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e0e6      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014c6:	f7ff fc5f 	bl	8000d88 <HAL_GetTick>
 80014ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2319      	movs	r3, #25
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 fac3 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0d1      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2221      	movs	r2, #33	@ 0x21
 80014ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2240      	movs	r2, #64	@ 0x40
 80014f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a3a      	ldr	r2, [r7, #32]
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001508:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001510:	88f8      	ldrh	r0, [r7, #6]
 8001512:	893a      	ldrh	r2, [r7, #8]
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4603      	mov	r3, r0
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f9d3 	bl	80018cc <I2C_RequestMemoryWrite>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0a9      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800153c:	b29b      	uxth	r3, r3
 800153e:	2bff      	cmp	r3, #255	@ 0xff
 8001540:	d90e      	bls.n	8001560 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	22ff      	movs	r2, #255	@ 0xff
 8001546:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154c:	b2da      	uxtb	r2, r3
 800154e:	8979      	ldrh	r1, [r7, #10]
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fc47 	bl	8001dec <I2C_TransferConfig>
 800155e:	e00f      	b.n	8001580 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156e:	b2da      	uxtb	r2, r3
 8001570:	8979      	ldrh	r1, [r7, #10]
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fc36 	bl	8001dec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f000 fac6 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e07b      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d034      	beq.n	8001638 <HAL_I2C_Mem_Write+0x1c8>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d130      	bne.n	8001638 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	2200      	movs	r2, #0
 80015de:	2180      	movs	r1, #128	@ 0x80
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fa3f 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e04d      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2bff      	cmp	r3, #255	@ 0xff
 80015f8:	d90e      	bls.n	8001618 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	22ff      	movs	r2, #255	@ 0xff
 80015fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001604:	b2da      	uxtb	r2, r3
 8001606:	8979      	ldrh	r1, [r7, #10]
 8001608:	2300      	movs	r3, #0
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fbeb 	bl	8001dec <I2C_TransferConfig>
 8001616:	e00f      	b.n	8001638 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001626:	b2da      	uxtb	r2, r3
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fbda 	bl	8001dec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d19e      	bne.n	8001580 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 faac 	bl	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e01a      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2220      	movs	r2, #32
 800165c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_I2C_Mem_Write+0x224>)
 800166a:	400b      	ands	r3, r1
 800166c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	fe00e800 	.word	0xfe00e800

08001698 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	817b      	strh	r3, [r7, #10]
 80016aa:	460b      	mov	r3, r1
 80016ac:	813b      	strh	r3, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	f040 80fd 	bne.w	80018ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_I2C_Mem_Read+0x34>
 80016c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0f1      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_I2C_Mem_Read+0x4e>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e0ea      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016ee:	f7ff fb4b 	bl	8000d88 <HAL_GetTick>
 80016f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2319      	movs	r3, #25
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f9af 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0d5      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2222      	movs	r2, #34	@ 0x22
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2240      	movs	r2, #64	@ 0x40
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001738:	88f8      	ldrh	r0, [r7, #6]
 800173a:	893a      	ldrh	r2, [r7, #8]
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4603      	mov	r3, r0
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 f913 	bl	8001974 <I2C_RequestMemoryRead>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0ad      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2bff      	cmp	r3, #255	@ 0xff
 8001768:	d90e      	bls.n	8001788 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2201      	movs	r2, #1
 800176e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <HAL_I2C_Mem_Read+0x22c>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fb33 	bl	8001dec <I2C_TransferConfig>
 8001786:	e00f      	b.n	80017a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001796:	b2da      	uxtb	r2, r3
 8001798:	8979      	ldrh	r1, [r7, #10]
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_I2C_Mem_Read+0x22c>)
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fb22 	bl	8001dec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	2104      	movs	r1, #4
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f956 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07c      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d034      	beq.n	8001868 <HAL_I2C_Mem_Read+0x1d0>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001802:	2b00      	cmp	r3, #0
 8001804:	d130      	bne.n	8001868 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180c:	2200      	movs	r2, #0
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f927 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e04d      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001824:	b29b      	uxth	r3, r3
 8001826:	2bff      	cmp	r3, #255	@ 0xff
 8001828:	d90e      	bls.n	8001848 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001834:	b2da      	uxtb	r2, r3
 8001836:	8979      	ldrh	r1, [r7, #10]
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fad3 	bl	8001dec <I2C_TransferConfig>
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001856:	b2da      	uxtb	r2, r3
 8001858:	8979      	ldrh	r1, [r7, #10]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fac2 	bl	8001dec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d19a      	bne.n	80017a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f994 	bl	8001ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e01a      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2220      	movs	r2, #32
 800188c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_I2C_Mem_Read+0x230>)
 800189a:	400b      	ands	r3, r1
 800189c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	80002400 	.word	0x80002400
 80018c8:	fe00e800 	.word	0xfe00e800

080018cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	8979      	ldrh	r1, [r7, #10]
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <I2C_RequestMemoryWrite+0xa4>)
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fa79 	bl	8001dec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	69b9      	ldr	r1, [r7, #24]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f909 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e02c      	b.n	8001968 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001914:	893b      	ldrh	r3, [r7, #8]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28
 800191e:	e015      	b.n	800194c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001920:	893b      	ldrh	r3, [r7, #8]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	b29b      	uxth	r3, r3
 8001926:	b2da      	uxtb	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	69b9      	ldr	r1, [r7, #24]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f8ef 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e012      	b.n	8001968 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001942:	893b      	ldrh	r3, [r7, #8]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	@ 0x80
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f884 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	80002000 	.word	0x80002000

08001974 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4603      	mov	r3, r0
 8001984:	817b      	strh	r3, [r7, #10]
 8001986:	460b      	mov	r3, r1
 8001988:	813b      	strh	r3, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	8979      	ldrh	r1, [r7, #10]
 8001994:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <I2C_RequestMemoryRead+0xa4>)
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fa26 	bl	8001dec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f8b6 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e02c      	b.n	8001a0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d105      	bne.n	80019c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019ba:	893b      	ldrh	r3, [r7, #8]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80019c4:	e015      	b.n	80019f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019c6:	893b      	ldrh	r3, [r7, #8]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f89c 	bl	8001b16 <I2C_WaitOnTXISFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e012      	b.n	8001a0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2200      	movs	r2, #0
 80019fa:	2140      	movs	r1, #64	@ 0x40
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f831 	bl	8001a64 <I2C_WaitOnFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	80002000 	.word	0x80002000

08001a1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d103      	bne.n	8001a3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d007      	beq.n	8001a58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	619a      	str	r2, [r3, #24]
  }
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a74:	e03b      	b.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f8d6 	bl	8001c2c <I2C_IsErrorOccurred>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e041      	b.n	8001b0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d02d      	beq.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a92:	f7ff f979 	bl	8000d88 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d302      	bcc.n	8001aa8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d122      	bne.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d113      	bne.n	8001aee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4013      	ands	r3, r2
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d0b4      	beq.n	8001a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b22:	e033      	b.n	8001b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f87f 	bl	8001c2c <I2C_IsErrorOccurred>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e031      	b.n	8001b9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d025      	beq.n	8001b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b40:	f7ff f922 	bl	8000d88 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d302      	bcc.n	8001b56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11a      	bne.n	8001b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d013      	beq.n	8001b8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e007      	b.n	8001b9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d1c4      	bne.n	8001b24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb0:	e02f      	b.n	8001c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f838 	bl	8001c2c <I2C_IsErrorOccurred>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e02d      	b.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f8df 	bl	8000d88 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11a      	bne.n	8001c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d013      	beq.n	8001c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e007      	b.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d1c8      	bne.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d068      	beq.n	8001d2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c60:	e049      	b.n	8001cf6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d045      	beq.n	8001cf6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7ff f88d 	bl	8000d88 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_IsErrorOccurred+0x54>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13a      	bne.n	8001cf6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca2:	d121      	bne.n	8001ce8 <I2C_IsErrorOccurred+0xbc>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001caa:	d01d      	beq.n	8001ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001cac:	7cfb      	ldrb	r3, [r7, #19]
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d01a      	beq.n	8001ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cc2:	f7ff f861 	bl	8000d88 <HAL_GetTick>
 8001cc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc8:	e00e      	b.n	8001ce8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cca:	f7ff f85d 	bl	8000d88 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b19      	cmp	r3, #25
 8001cd6:	d907      	bls.n	8001ce8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	f043 0320 	orr.w	r3, r3, #32
 8001cde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001ce6:	e006      	b.n	8001cf6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d1e9      	bne.n	8001cca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d003      	beq.n	8001d0c <I2C_IsErrorOccurred+0xe0>
 8001d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0aa      	beq.n	8001c62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d103      	bne.n	8001d1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00b      	beq.n	8001d98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01c      	beq.n	8001dda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff fe3b 	bl	8001a1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <I2C_IsErrorOccurred+0x1bc>)
 8001db2:	400b      	ands	r3, r1
 8001db4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3728      	adds	r7, #40	@ 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	fe00e800 	.word	0xfe00e800

08001dec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	817b      	strh	r3, [r7, #10]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e04:	7a7b      	ldrb	r3, [r7, #9]
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	0d5b      	lsrs	r3, r3, #21
 8001e26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <I2C_TransferConfig+0x60>)
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	ea02 0103 	and.w	r1, r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	03ff63ff 	.word	0x03ff63ff

08001e50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d138      	bne.n	8001ed8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e032      	b.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	@ 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d139      	bne.n	8001f70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e033      	b.n	8001f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2224      	movs	r2, #36	@ 0x24
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001faa:	d130      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb8:	d038      	beq.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2232      	movs	r2, #50	@ 0x32
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe0:	e002      	b.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff4:	d102      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f2      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002008:	d110      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e00f      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800201a:	d007      	beq.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800201c:	4b07      	ldr	r3, [pc, #28]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002024:	4a05      	ldr	r2, [pc, #20]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000
 8002040:	20000000 	.word	0x20000000
 8002044:	431bde83 	.word	0x431bde83

08002048 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e3ca      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205a:	4b97      	ldr	r3, [pc, #604]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	4b94      	ldr	r3, [pc, #592]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80e4 	beq.w	8002244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_RCC_OscConfig+0x4a>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	f040 808b 	bne.w	80021a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 8087 	bne.w	80021a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002092:	4b89      	ldr	r3, [pc, #548]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e3a2      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	4b82      	ldr	r3, [pc, #520]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_RCC_OscConfig+0x7c>
 80020ba:	4b7f      	ldr	r3, [pc, #508]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_OscConfig+0x88>
 80020c4:	4b7c      	ldr	r3, [pc, #496]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d223      	bcs.n	800211c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fd55 	bl	8002b88 <RCC_SetFlashLatencyFromMSIRange>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e383      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e8:	4b73      	ldr	r3, [pc, #460]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a72      	ldr	r2, [pc, #456]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b70      	ldr	r3, [pc, #448]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	496d      	ldr	r1, [pc, #436]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002106:	4b6c      	ldr	r3, [pc, #432]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4968      	ldr	r1, [pc, #416]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
 800211a:	e025      	b.n	8002168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211c:	4b66      	ldr	r3, [pc, #408]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a65      	ldr	r2, [pc, #404]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4960      	ldr	r1, [pc, #384]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213a:	4b5f      	ldr	r3, [pc, #380]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	495b      	ldr	r1, [pc, #364]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fd15 	bl	8002b88 <RCC_SetFlashLatencyFromMSIRange>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e343      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002168:	f000 fc4a 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b52      	ldr	r3, [pc, #328]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	4950      	ldr	r1, [pc, #320]	@ (80022bc <HAL_RCC_OscConfig+0x274>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	4a4e      	ldr	r2, [pc, #312]	@ (80022c0 <HAL_RCC_OscConfig+0x278>)
 8002186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002188:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fdab 	bl	8000ce8 <HAL_InitTick>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d052      	beq.n	8002242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	e327      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d032      	beq.n	800220e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a8:	4b43      	ldr	r3, [pc, #268]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fde8 	bl	8000d88 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021bc:	f7fe fde4 	bl	8000d88 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e310      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ce:	4b3a      	ldr	r3, [pc, #232]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021da:	4b37      	ldr	r3, [pc, #220]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a36      	ldr	r2, [pc, #216]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4931      	ldr	r1, [pc, #196]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f8:	4b2f      	ldr	r3, [pc, #188]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	492c      	ldr	r1, [pc, #176]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	e01a      	b.n	8002244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220e:	4b2a      	ldr	r3, [pc, #168]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a29      	ldr	r2, [pc, #164]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221a:	f7fe fdb5 	bl	8000d88 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002222:	f7fe fdb1 	bl	8000d88 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e2dd      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002234:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x1da>
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d074      	beq.n	800233a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x21a>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d10e      	bne.n	800227a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d10b      	bne.n	800227a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d064      	beq.n	8002338 <HAL_RCC_OscConfig+0x2f0>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d160      	bne.n	8002338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e2ba      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x24a>
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0b      	ldr	r2, [pc, #44]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e026      	b.n	80022e0 <HAL_RCC_OscConfig+0x298>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800229a:	d115      	bne.n	80022c8 <HAL_RCC_OscConfig+0x280>
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80022a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a02      	ldr	r2, [pc, #8]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e014      	b.n	80022e0 <HAL_RCC_OscConfig+0x298>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08004ac0 	.word	0x08004ac0
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000004 	.word	0x20000004
 80022c8:	4ba0      	ldr	r3, [pc, #640]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a9f      	ldr	r2, [pc, #636]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b9d      	ldr	r3, [pc, #628]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a9c      	ldr	r2, [pc, #624]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd4e 	bl	8000d88 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe fd4a 	bl	8000d88 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	@ 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e276      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	4b92      	ldr	r3, [pc, #584]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2a8>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fd3a 	bl	8000d88 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fd36 	bl	8000d88 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e262      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232a:	4b88      	ldr	r3, [pc, #544]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x2d0>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d060      	beq.n	8002408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d005      	beq.n	8002358 <HAL_RCC_OscConfig+0x310>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d119      	bne.n	8002386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002358:	4b7c      	ldr	r3, [pc, #496]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x328>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e23f      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b76      	ldr	r3, [pc, #472]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	4973      	ldr	r1, [pc, #460]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002384:	e040      	b.n	8002408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d023      	beq.n	80023d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238e:	4b6f      	ldr	r3, [pc, #444]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6e      	ldr	r2, [pc, #440]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fcf5 	bl	8000d88 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe fcf1 	bl	8000d88 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e21d      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b4:	4b65      	ldr	r3, [pc, #404]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b62      	ldr	r3, [pc, #392]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	495f      	ldr	r1, [pc, #380]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
 80023d4:	e018      	b.n	8002408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5c      	ldr	r2, [pc, #368]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80023dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fcd1 	bl	8000d88 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7fe fccd 	bl	8000d88 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1f9      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03c      	beq.n	800248e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01c      	beq.n	8002456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241c:	4b4b      	ldr	r3, [pc, #300]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002422:	4a4a      	ldr	r2, [pc, #296]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe fcac 	bl	8000d88 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe fca8 	bl	8000d88 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1d4      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002446:	4b41      	ldr	r3, [pc, #260]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x3ec>
 8002454:	e01b      	b.n	800248e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245c:	4a3b      	ldr	r2, [pc, #236]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fc8f 	bl	8000d88 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe fc8b 	bl	8000d88 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1b7      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	4b32      	ldr	r3, [pc, #200]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ef      	bne.n	800246e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80a6 	beq.w	80025e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a0:	4b2a      	ldr	r3, [pc, #168]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b27      	ldr	r3, [pc, #156]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	4a26      	ldr	r2, [pc, #152]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b8:	4b24      	ldr	r3, [pc, #144]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c8:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_RCC_OscConfig+0x508>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d118      	bne.n	8002506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <HAL_RCC_OscConfig+0x508>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_RCC_OscConfig+0x508>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fc52 	bl	8000d88 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe fc4e 	bl	8000d88 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e17a      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_RCC_OscConfig+0x508>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0x4d8>
 800250e:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251e:	e029      	b.n	8002574 <HAL_RCC_OscConfig+0x52c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d115      	bne.n	8002554 <HAL_RCC_OscConfig+0x50c>
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	4a07      	ldr	r2, [pc, #28]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	4a03      	ldr	r2, [pc, #12]	@ (800254c <HAL_RCC_OscConfig+0x504>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002548:	e014      	b.n	8002574 <HAL_RCC_OscConfig+0x52c>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
 8002554:	4b9c      	ldr	r3, [pc, #624]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255a:	4a9b      	ldr	r2, [pc, #620]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002564:	4b98      	ldr	r3, [pc, #608]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256a:	4a97      	ldr	r2, [pc, #604]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d016      	beq.n	80025aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7fe fc04 	bl	8000d88 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe fc00 	bl	8000d88 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e12a      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259a:	4b8b      	ldr	r3, [pc, #556]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ed      	beq.n	8002584 <HAL_RCC_OscConfig+0x53c>
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fbed 	bl	8000d88 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fbe9 	bl	8000d88 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e113      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c8:	4b7f      	ldr	r3, [pc, #508]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ed      	bne.n	80025b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d6:	7ffb      	ldrb	r3, [r7, #31]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b7a      	ldr	r3, [pc, #488]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	4a79      	ldr	r2, [pc, #484]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80fe 	beq.w	80027ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	f040 80d0 	bne.w	800279c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025fc:	4b72      	ldr	r3, [pc, #456]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d130      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	3b01      	subs	r3, #1
 800261c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d127      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d11f      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800263c:	2a07      	cmp	r2, #7
 800263e:	bf14      	ite	ne
 8002640:	2201      	movne	r2, #1
 8002642:	2200      	moveq	r2, #0
 8002644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	3b01      	subs	r3, #1
 8002658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d109      	bne.n	8002672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	3b01      	subs	r3, #1
 800266c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d06e      	beq.n	8002750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d069      	beq.n	800274c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002678:	4b53      	ldr	r3, [pc, #332]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002684:	4b50      	ldr	r3, [pc, #320]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0ad      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002694:	4b4c      	ldr	r3, [pc, #304]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800269a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a0:	f7fe fb72 	bl	8000d88 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe fb6e 	bl	8000d88 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e09a      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ba:	4b43      	ldr	r3, [pc, #268]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c6:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	4b40      	ldr	r3, [pc, #256]	@ (80027cc <HAL_RCC_OscConfig+0x784>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026e0:	0212      	lsls	r2, r2, #8
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026e8:	0852      	lsrs	r2, r2, #1
 80026ea:	3a01      	subs	r2, #1
 80026ec:	0552      	lsls	r2, r2, #21
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0652      	lsls	r2, r2, #25
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002700:	0912      	lsrs	r2, r2, #4
 8002702:	0452      	lsls	r2, r2, #17
 8002704:	430a      	orrs	r2, r1
 8002706:	4930      	ldr	r1, [pc, #192]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002708:	4313      	orrs	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800270c:	4b2e      	ldr	r3, [pc, #184]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2d      	ldr	r2, [pc, #180]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002718:	4b2b      	ldr	r3, [pc, #172]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002724:	f7fe fb30 	bl	8000d88 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fb2c 	bl	8000d88 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e058      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274a:	e050      	b.n	80027ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e04f      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d148      	bne.n	80027ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800275c:	4b1a      	ldr	r3, [pc, #104]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002768:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a16      	ldr	r2, [pc, #88]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002774:	f7fe fb08 	bl	8000d88 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fb04 	bl	8000d88 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e030      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x734>
 800279a:	e028      	b.n	80027ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d023      	beq.n	80027ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a08      	ldr	r2, [pc, #32]	@ (80027c8 <HAL_RCC_OscConfig+0x780>)
 80027a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe faeb 	bl	8000d88 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	e00c      	b.n	80027d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fe fae7 	bl	8000d88 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d905      	bls.n	80027d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_OscConfig+0x7b0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ec      	bne.n	80027b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x7b0>)
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4905      	ldr	r1, [pc, #20]	@ (80027f8 <HAL_RCC_OscConfig+0x7b0>)
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x7b4>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
 80027e8:	e001      	b.n	80027ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	feeefffc 	.word	0xfeeefffc

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0e7      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b75      	ldr	r3, [pc, #468]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b72      	ldr	r3, [pc, #456]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4970      	ldr	r1, [pc, #448]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b6e      	ldr	r3, [pc, #440]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0cf      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d010      	beq.n	8002872 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800285c:	429a      	cmp	r2, r3
 800285e:	d908      	bls.n	8002872 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b63      	ldr	r3, [pc, #396]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4960      	ldr	r1, [pc, #384]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04c      	beq.n	8002918 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	4b5a      	ldr	r3, [pc, #360]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0a6      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	4b54      	ldr	r3, [pc, #336]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e09a      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b6:	4b4e      	ldr	r3, [pc, #312]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08e      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c6:	4b4a      	ldr	r3, [pc, #296]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e086      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b46      	ldr	r3, [pc, #280]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4943      	ldr	r1, [pc, #268]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fa4e 	bl	8000d88 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe fa4a 	bl	8000d88 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e06e      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b3a      	ldr	r3, [pc, #232]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d010      	beq.n	8002946 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002930:	429a      	cmp	r2, r3
 8002932:	d208      	bcs.n	8002946 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b2e      	ldr	r3, [pc, #184]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	492b      	ldr	r1, [pc, #172]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002946:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d210      	bcs.n	8002976 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002954:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0207 	bic.w	r2, r3, #7
 800295c:	4923      	ldr	r1, [pc, #140]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e036      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002982:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4918      	ldr	r1, [pc, #96]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a0:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4910      	ldr	r1, [pc, #64]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b4:	f000 f824 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	490b      	ldr	r1, [pc, #44]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f4>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80029d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_ClockConfig+0x1fc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe f985 	bl	8000ce8 <HAL_InitTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029e2:	7afb      	ldrb	r3, [r7, #11]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08004ac0 	.word	0x08004ac0
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000004 	.word	0x20000004

08002a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	@ 0x24
 8002a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x34>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d121      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d11e      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a34:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a40:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a50:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d102      	bne.n	8002a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e004      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a84:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d134      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d003      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0xac>
 8002aa4:	e005      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa8:	617b      	str	r3, [r7, #20]
      break;
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aae:	617b      	str	r3, [r7, #20]
      break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	617b      	str	r3, [r7, #20]
      break;
 8002ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ade:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	0e5b      	lsrs	r3, r3, #25
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af8:	69bb      	ldr	r3, [r7, #24]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	@ 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08004ad8 	.word	0x08004ad8
 8002b10:	00f42400 	.word	0x00f42400
 8002b14:	007a1200 	.word	0x007a1200

08002b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b34:	f7ff fff0 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4904      	ldr	r1, [pc, #16]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08004ad0 	.word	0x08004ad0

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b60:	f7ff ffda 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4904      	ldr	r1, [pc, #16]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08004ad0 	.word	0x08004ad0

08002b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b94:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ba0:	f7ff f9ee 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002ba4:	6178      	str	r0, [r7, #20]
 8002ba6:	e014      	b.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bac:	4a24      	ldr	r2, [pc, #144]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb4:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bc0:	f7ff f9de 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd8:	d10b      	bne.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b80      	cmp	r3, #128	@ 0x80
 8002bde:	d919      	bls.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002be4:	d902      	bls.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be6:	2302      	movs	r3, #2
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e013      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bec:	2301      	movs	r3, #1
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e010      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	@ 0x80
 8002bf6:	d902      	bls.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e00a      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b80      	cmp	r3, #128	@ 0x80
 8002c02:	d102      	bne.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c04:	2302      	movs	r3, #2
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e004      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b70      	cmp	r3, #112	@ 0x70
 8002c0e:	d101      	bne.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c10:	2301      	movs	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 0207 	bic.w	r2, r3, #7
 8002c1c:	4909      	ldr	r1, [pc, #36]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c24:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40022000 	.word	0x40022000

08002c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c50:	2300      	movs	r3, #0
 8002c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d041      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c6c:	d02a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c72:	d824      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c7e:	d81e      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c88:	d010      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c8c:	4b86      	ldr	r3, [pc, #536]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a85      	ldr	r2, [pc, #532]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c98:	e015      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fabb 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3320      	adds	r3, #32
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fba6 	bl	8003404 <RCCEx_PLLSAI2_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cda:	4973      	ldr	r1, [pc, #460]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d041      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cfc:	d02a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cfe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d02:	d824      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d0e:	d81e      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d18:	d010      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d1a:	e018      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a61      	ldr	r2, [pc, #388]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d28:	e015      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fa73 	bl	800321c <RCCEx_PLLSAI1_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d3a:	e00c      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3320      	adds	r3, #32
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fb5e 	bl	8003404 <RCCEx_PLLSAI2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	74fb      	strb	r3, [r7, #19]
      break;
 8002d52:	e000      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d6a:	494f      	ldr	r1, [pc, #316]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d72:	e001      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a0 	beq.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	4a40      	ldr	r2, [pc, #256]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dac:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc8:	f7fd ffde 	bl	8000d88 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dce:	e009      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fd ffda 	bl	8000d88 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d902      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	74fb      	strb	r3, [r7, #19]
        break;
 8002de2:	e005      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d15c      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01f      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d019      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	4a20      	ldr	r2, [pc, #128]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e40:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fd ff99 	bl	8000d88 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e58:	e00b      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fd ff95 	bl	8000d88 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d902      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e70:	e006      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ec      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e96:	4904      	ldr	r1, [pc, #16]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb4:	7c7b      	ldrb	r3, [r7, #17]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4b9e      	ldr	r3, [pc, #632]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	4a9d      	ldr	r2, [pc, #628]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed2:	4b98      	ldr	r3, [pc, #608]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed8:	f023 0203 	bic.w	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	4994      	ldr	r1, [pc, #592]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efa:	f023 020c 	bic.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f02:	498c      	ldr	r1, [pc, #560]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f16:	4b87      	ldr	r3, [pc, #540]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	4983      	ldr	r1, [pc, #524]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f38:	4b7e      	ldr	r3, [pc, #504]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	497b      	ldr	r1, [pc, #492]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f5a:	4b76      	ldr	r3, [pc, #472]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f68:	4972      	ldr	r1, [pc, #456]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	496a      	ldr	r1, [pc, #424]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f9e:	4b65      	ldr	r3, [pc, #404]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	4961      	ldr	r1, [pc, #388]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fce:	4959      	ldr	r1, [pc, #356]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe2:	4b54      	ldr	r3, [pc, #336]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff0:	4950      	ldr	r1, [pc, #320]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003004:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	4948      	ldr	r1, [pc, #288]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003026:	4b43      	ldr	r3, [pc, #268]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	493f      	ldr	r1, [pc, #252]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d028      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003048:	4b3a      	ldr	r3, [pc, #232]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003056:	4937      	ldr	r1, [pc, #220]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003066:	d106      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b32      	ldr	r3, [pc, #200]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
 8003074:	e011      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307e:	d10c      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f8c8 	bl	800321c <RCCEx_PLLSAI1_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	491f      	ldr	r1, [pc, #124]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c4:	d106      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d0:	60d3      	str	r3, [r2, #12]
 80030d2:	e011      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f899 	bl	800321c <RCCEx_PLLSAI1_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d02b      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003112:	4908      	ldr	r1, [pc, #32]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003122:	d109      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b03      	ldr	r3, [pc, #12]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a02      	ldr	r2, [pc, #8]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
 8003130:	e014      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003140:	d10c      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f867 	bl	800321c <RCCEx_PLLSAI1_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02f      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003168:	4b2b      	ldr	r3, [pc, #172]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003176:	4928      	ldr	r1, [pc, #160]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003186:	d10d      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f844 	bl	800321c <RCCEx_PLLSAI1_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	74bb      	strb	r3, [r7, #18]
 80031a2:	e011      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3320      	adds	r3, #32
 80031b2:	2102      	movs	r1, #2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f925 	bl	8003404 <RCCEx_PLLSAI2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031d4:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031e2:	490d      	ldr	r1, [pc, #52]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003206:	4904      	ldr	r1, [pc, #16]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800320e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000

0800321c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322a:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003236:	4b72      	ldr	r3, [pc, #456]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0203 	and.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
       ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800324e:	4b6c      	ldr	r3, [pc, #432]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
       ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d047      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	e044      	b.n	80032f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d018      	beq.n	80032a2 <RCCEx_PLLSAI1_Config+0x86>
 8003270:	2b03      	cmp	r3, #3
 8003272:	d825      	bhi.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d002      	beq.n	800327e <RCCEx_PLLSAI1_Config+0x62>
 8003278:	2b02      	cmp	r3, #2
 800327a:	d009      	beq.n	8003290 <RCCEx_PLLSAI1_Config+0x74>
 800327c:	e020      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800327e:	4b60      	ldr	r3, [pc, #384]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d11d      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328e:	e01a      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003290:	4b5b      	ldr	r3, [pc, #364]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d116      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a0:	e013      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032a2:	4b57      	ldr	r3, [pc, #348]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032ae:	4b54      	ldr	r3, [pc, #336]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032be:	e006      	b.n	80032ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e004      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	430b      	orrs	r3, r1
 80032ec:	4944      	ldr	r1, [pc, #272]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d17d      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032f8:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a40      	ldr	r2, [pc, #256]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003304:	f7fd fd40 	bl	8000d88 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800330a:	e009      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330c:	f7fd fd3c 	bl	8000d88 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d902      	bls.n	8003320 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	73fb      	strb	r3, [r7, #15]
        break;
 800331e:	e005      	b.n	800332c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003320:	4b37      	ldr	r3, [pc, #220]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ef      	bne.n	800330c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d160      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d111      	bne.n	800335c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003338:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
 8003348:	0211      	lsls	r1, r2, #8
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	0912      	lsrs	r2, r2, #4
 8003350:	0452      	lsls	r2, r2, #17
 8003352:	430a      	orrs	r2, r1
 8003354:	492a      	ldr	r1, [pc, #168]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	610b      	str	r3, [r1, #16]
 800335a:	e027      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d112      	bne.n	8003388 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003362:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800336a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	0211      	lsls	r1, r2, #8
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6912      	ldr	r2, [r2, #16]
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	3a01      	subs	r2, #1
 800337c:	0552      	lsls	r2, r2, #21
 800337e:	430a      	orrs	r2, r1
 8003380:	491f      	ldr	r1, [pc, #124]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	610b      	str	r3, [r1, #16]
 8003386:	e011      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003390:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6892      	ldr	r2, [r2, #8]
 8003398:	0211      	lsls	r1, r2, #8
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6952      	ldr	r2, [r2, #20]
 800339e:	0852      	lsrs	r2, r2, #1
 80033a0:	3a01      	subs	r2, #1
 80033a2:	0652      	lsls	r2, r2, #25
 80033a4:	430a      	orrs	r2, r1
 80033a6:	4916      	ldr	r1, [pc, #88]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033ac:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a13      	ldr	r2, [pc, #76]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fce6 	bl	8000d88 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033be:	e009      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033c0:	f7fd fce2 	bl	8000d88 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d902      	bls.n	80033d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
          break;
 80033d2:	e005      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ef      	beq.n	80033c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	4904      	ldr	r1, [pc, #16]	@ (8003400 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000

08003404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003412:	4b6a      	ldr	r3, [pc, #424]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800341e:	4b67      	ldr	r3, [pc, #412]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0203 	and.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
       ||
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003436:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
       ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d047      	beq.n	80034da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e044      	b.n	80034da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d018      	beq.n	800348a <RCCEx_PLLSAI2_Config+0x86>
 8003458:	2b03      	cmp	r3, #3
 800345a:	d825      	bhi.n	80034a8 <RCCEx_PLLSAI2_Config+0xa4>
 800345c:	2b01      	cmp	r3, #1
 800345e:	d002      	beq.n	8003466 <RCCEx_PLLSAI2_Config+0x62>
 8003460:	2b02      	cmp	r3, #2
 8003462:	d009      	beq.n	8003478 <RCCEx_PLLSAI2_Config+0x74>
 8003464:	e020      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003466:	4b55      	ldr	r3, [pc, #340]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11d      	bne.n	80034ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003476:	e01a      	b.n	80034ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003478:	4b50      	ldr	r3, [pc, #320]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d116      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e013      	b.n	80034b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800348a:	4b4c      	ldr	r3, [pc, #304]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003496:	4b49      	ldr	r3, [pc, #292]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034a6:	e006      	b.n	80034b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      break;
 80034ac:	e004      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034be:	4b3f      	ldr	r3, [pc, #252]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	430b      	orrs	r3, r1
 80034d4:	4939      	ldr	r1, [pc, #228]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d167      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034e0:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a35      	ldr	r2, [pc, #212]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ec:	f7fd fc4c 	bl	8000d88 <HAL_GetTick>
 80034f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f2:	e009      	b.n	8003508 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034f4:	f7fd fc48 	bl	8000d88 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	73fb      	strb	r3, [r7, #15]
        break;
 8003506:	e005      	b.n	8003514 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003508:	4b2c      	ldr	r3, [pc, #176]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ef      	bne.n	80034f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d14a      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003520:	4b26      	ldr	r3, [pc, #152]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6892      	ldr	r2, [r2, #8]
 8003530:	0211      	lsls	r1, r2, #8
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68d2      	ldr	r2, [r2, #12]
 8003536:	0912      	lsrs	r2, r2, #4
 8003538:	0452      	lsls	r2, r2, #17
 800353a:	430a      	orrs	r2, r1
 800353c:	491f      	ldr	r1, [pc, #124]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	614b      	str	r3, [r1, #20]
 8003542:	e011      	b.n	8003568 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003544:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800354c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	0211      	lsls	r1, r2, #8
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6912      	ldr	r2, [r2, #16]
 800355a:	0852      	lsrs	r2, r2, #1
 800355c:	3a01      	subs	r2, #1
 800355e:	0652      	lsls	r2, r2, #25
 8003560:	430a      	orrs	r2, r1
 8003562:	4916      	ldr	r1, [pc, #88]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	4313      	orrs	r3, r2
 8003566:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003568:	4b14      	ldr	r3, [pc, #80]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a13      	ldr	r2, [pc, #76]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd fc08 	bl	8000d88 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800357c:	f7fd fc04 	bl	8000d88 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
          break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003590:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4904      	ldr	r1, [pc, #16]	@ (80035bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e040      	b.n	8003654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fa62 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	@ 0x24
 80035ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fb6a 	bl	8003ce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8af 	bl	8003770 <UART_SetConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e01b      	b.n	8003654 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800362a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800363a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fbe9 	bl	8003e24 <UART_CheckIdleState>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003670:	2b20      	cmp	r3, #32
 8003672:	d177      	bne.n	8003764 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_UART_Transmit+0x24>
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e070      	b.n	8003766 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2221      	movs	r2, #33	@ 0x21
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003692:	f7fd fb79 	bl	8000d88 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b0:	d108      	bne.n	80036c4 <HAL_UART_Transmit+0x68>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e003      	b.n	80036cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036cc:	e02f      	b.n	800372e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fc4b 	bl	8003f74 <UART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e03b      	b.n	8003766 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003700:	b292      	uxth	r2, r2
 8003702:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3302      	adds	r3, #2
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e007      	b.n	800371c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1c9      	bne.n	80036ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	2140      	movs	r1, #64	@ 0x40
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fc15 	bl	8003f74 <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e005      	b.n	8003766 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b08a      	sub	sp, #40	@ 0x28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	431a      	orrs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	4313      	orrs	r3, r2
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4ba4      	ldr	r3, [pc, #656]	@ (8003a30 <UART_SetConfig+0x2c0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a99      	ldr	r2, [pc, #612]	@ (8003a34 <UART_SetConfig+0x2c4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d8:	4313      	orrs	r3, r2
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a90      	ldr	r2, [pc, #576]	@ (8003a38 <UART_SetConfig+0x2c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d126      	bne.n	8003848 <UART_SetConfig+0xd8>
 80037fa:	4b90      	ldr	r3, [pc, #576]	@ (8003a3c <UART_SetConfig+0x2cc>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b03      	cmp	r3, #3
 8003806:	d81b      	bhi.n	8003840 <UART_SetConfig+0xd0>
 8003808:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <UART_SetConfig+0xa0>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003821 	.word	0x08003821
 8003814:	08003831 	.word	0x08003831
 8003818:	08003829 	.word	0x08003829
 800381c:	08003839 	.word	0x08003839
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003826:	e116      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003828:	2302      	movs	r3, #2
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382e:	e112      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003830:	2304      	movs	r3, #4
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003836:	e10e      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003838:	2308      	movs	r3, #8
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383e:	e10a      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003840:	2310      	movs	r3, #16
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003846:	e106      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7c      	ldr	r2, [pc, #496]	@ (8003a40 <UART_SetConfig+0x2d0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d138      	bne.n	80038c4 <UART_SetConfig+0x154>
 8003852:	4b7a      	ldr	r3, [pc, #488]	@ (8003a3c <UART_SetConfig+0x2cc>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d82d      	bhi.n	80038bc <UART_SetConfig+0x14c>
 8003860:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <UART_SetConfig+0xf8>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	0800389d 	.word	0x0800389d
 800386c:	080038bd 	.word	0x080038bd
 8003870:	080038bd 	.word	0x080038bd
 8003874:	080038bd 	.word	0x080038bd
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080038bd 	.word	0x080038bd
 8003880:	080038bd 	.word	0x080038bd
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038a5 	.word	0x080038a5
 800388c:	080038bd 	.word	0x080038bd
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038bd 	.word	0x080038bd
 8003898:	080038b5 	.word	0x080038b5
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a2:	e0d8      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80038a4:	2302      	movs	r3, #2
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038aa:	e0d4      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80038ac:	2304      	movs	r3, #4
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e0d0      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80038b4:	2308      	movs	r3, #8
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ba:	e0cc      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80038bc:	2310      	movs	r3, #16
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c2:	e0c8      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003a44 <UART_SetConfig+0x2d4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d125      	bne.n	800391a <UART_SetConfig+0x1aa>
 80038ce:	4b5b      	ldr	r3, [pc, #364]	@ (8003a3c <UART_SetConfig+0x2cc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038d8:	2b30      	cmp	r3, #48	@ 0x30
 80038da:	d016      	beq.n	800390a <UART_SetConfig+0x19a>
 80038dc:	2b30      	cmp	r3, #48	@ 0x30
 80038de:	d818      	bhi.n	8003912 <UART_SetConfig+0x1a2>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d00a      	beq.n	80038fa <UART_SetConfig+0x18a>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d814      	bhi.n	8003912 <UART_SetConfig+0x1a2>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <UART_SetConfig+0x182>
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d008      	beq.n	8003902 <UART_SetConfig+0x192>
 80038f0:	e00f      	b.n	8003912 <UART_SetConfig+0x1a2>
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f8:	e0ad      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80038fa:	2302      	movs	r3, #2
 80038fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003900:	e0a9      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003902:	2304      	movs	r3, #4
 8003904:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003908:	e0a5      	b.n	8003a56 <UART_SetConfig+0x2e6>
 800390a:	2308      	movs	r3, #8
 800390c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003910:	e0a1      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003912:	2310      	movs	r3, #16
 8003914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003918:	e09d      	b.n	8003a56 <UART_SetConfig+0x2e6>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a48 <UART_SetConfig+0x2d8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d125      	bne.n	8003970 <UART_SetConfig+0x200>
 8003924:	4b45      	ldr	r3, [pc, #276]	@ (8003a3c <UART_SetConfig+0x2cc>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800392e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003930:	d016      	beq.n	8003960 <UART_SetConfig+0x1f0>
 8003932:	2bc0      	cmp	r3, #192	@ 0xc0
 8003934:	d818      	bhi.n	8003968 <UART_SetConfig+0x1f8>
 8003936:	2b80      	cmp	r3, #128	@ 0x80
 8003938:	d00a      	beq.n	8003950 <UART_SetConfig+0x1e0>
 800393a:	2b80      	cmp	r3, #128	@ 0x80
 800393c:	d814      	bhi.n	8003968 <UART_SetConfig+0x1f8>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <UART_SetConfig+0x1d8>
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d008      	beq.n	8003958 <UART_SetConfig+0x1e8>
 8003946:	e00f      	b.n	8003968 <UART_SetConfig+0x1f8>
 8003948:	2300      	movs	r3, #0
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394e:	e082      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003950:	2302      	movs	r3, #2
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003956:	e07e      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003958:	2304      	movs	r3, #4
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395e:	e07a      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003960:	2308      	movs	r3, #8
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003966:	e076      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800396e:	e072      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a35      	ldr	r2, [pc, #212]	@ (8003a4c <UART_SetConfig+0x2dc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12a      	bne.n	80039d0 <UART_SetConfig+0x260>
 800397a:	4b30      	ldr	r3, [pc, #192]	@ (8003a3c <UART_SetConfig+0x2cc>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003984:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003988:	d01a      	beq.n	80039c0 <UART_SetConfig+0x250>
 800398a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800398e:	d81b      	bhi.n	80039c8 <UART_SetConfig+0x258>
 8003990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003994:	d00c      	beq.n	80039b0 <UART_SetConfig+0x240>
 8003996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800399a:	d815      	bhi.n	80039c8 <UART_SetConfig+0x258>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <UART_SetConfig+0x238>
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a4:	d008      	beq.n	80039b8 <UART_SetConfig+0x248>
 80039a6:	e00f      	b.n	80039c8 <UART_SetConfig+0x258>
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ae:	e052      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80039b0:	2302      	movs	r3, #2
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039b6:	e04e      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80039b8:	2304      	movs	r3, #4
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039be:	e04a      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80039c0:	2308      	movs	r3, #8
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c6:	e046      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80039c8:	2310      	movs	r3, #16
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ce:	e042      	b.n	8003a56 <UART_SetConfig+0x2e6>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a17      	ldr	r2, [pc, #92]	@ (8003a34 <UART_SetConfig+0x2c4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d13a      	bne.n	8003a50 <UART_SetConfig+0x2e0>
 80039da:	4b18      	ldr	r3, [pc, #96]	@ (8003a3c <UART_SetConfig+0x2cc>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039e8:	d01a      	beq.n	8003a20 <UART_SetConfig+0x2b0>
 80039ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ee:	d81b      	bhi.n	8003a28 <UART_SetConfig+0x2b8>
 80039f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f4:	d00c      	beq.n	8003a10 <UART_SetConfig+0x2a0>
 80039f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039fa:	d815      	bhi.n	8003a28 <UART_SetConfig+0x2b8>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <UART_SetConfig+0x298>
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a04:	d008      	beq.n	8003a18 <UART_SetConfig+0x2a8>
 8003a06:	e00f      	b.n	8003a28 <UART_SetConfig+0x2b8>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0e:	e022      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003a10:	2302      	movs	r3, #2
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a16:	e01e      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	e01a      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003a20:	2308      	movs	r3, #8
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e016      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e012      	b.n	8003a56 <UART_SetConfig+0x2e6>
 8003a30:	efff69f3 	.word	0xefff69f3
 8003a34:	40008000 	.word	0x40008000
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40004400 	.word	0x40004400
 8003a44:	40004800 	.word	0x40004800
 8003a48:	40004c00 	.word	0x40004c00
 8003a4c:	40005000 	.word	0x40005000
 8003a50:	2310      	movs	r3, #16
 8003a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a9f      	ldr	r2, [pc, #636]	@ (8003cd8 <UART_SetConfig+0x568>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d17a      	bne.n	8003b56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d824      	bhi.n	8003ab2 <UART_SetConfig+0x342>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0x300>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003ab3 	.word	0x08003ab3
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003aa3 	.word	0x08003aa3
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ab3 	.word	0x08003ab3
 8003a90:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7ff f84c 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003a98:	61f8      	str	r0, [r7, #28]
        break;
 8003a9a:	e010      	b.n	8003abe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003cdc <UART_SetConfig+0x56c>)
 8003a9e:	61fb      	str	r3, [r7, #28]
        break;
 8003aa0:	e00d      	b.n	8003abe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe ffad 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 8003aa6:	61f8      	str	r0, [r7, #28]
        break;
 8003aa8:	e009      	b.n	8003abe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aae:	61fb      	str	r3, [r7, #28]
        break;
 8003ab0:	e005      	b.n	8003abe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003abc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80fb 	beq.w	8003cbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d305      	bcc.n	8003ae2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d903      	bls.n	8003aea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ae8:	e0e8      	b.n	8003cbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2200      	movs	r2, #0
 8003aee:	461c      	mov	r4, r3
 8003af0:	4615      	mov	r5, r2
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	022b      	lsls	r3, r5, #8
 8003afc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b00:	0222      	lsls	r2, r4, #8
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	6849      	ldr	r1, [r1, #4]
 8003b06:	0849      	lsrs	r1, r1, #1
 8003b08:	2000      	movs	r0, #0
 8003b0a:	4688      	mov	r8, r1
 8003b0c:	4681      	mov	r9, r0
 8003b0e:	eb12 0a08 	adds.w	sl, r2, r8
 8003b12:	eb43 0b09 	adc.w	fp, r3, r9
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b24:	4650      	mov	r0, sl
 8003b26:	4659      	mov	r1, fp
 8003b28:	f7fc fbaa 	bl	8000280 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d308      	bcc.n	8003b4e <UART_SetConfig+0x3de>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b42:	d204      	bcs.n	8003b4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	60da      	str	r2, [r3, #12]
 8003b4c:	e0b6      	b.n	8003cbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b54:	e0b2      	b.n	8003cbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b5e:	d15e      	bne.n	8003c1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d828      	bhi.n	8003bba <UART_SetConfig+0x44a>
 8003b68:	a201      	add	r2, pc, #4	@ (adr r2, 8003b70 <UART_SetConfig+0x400>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003b9d 	.word	0x08003b9d
 8003b78:	08003ba5 	.word	0x08003ba5
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003bab 	.word	0x08003bab
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bbb 	.word	0x08003bbb
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe ffcc 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003b98:	61f8      	str	r0, [r7, #28]
        break;
 8003b9a:	e014      	b.n	8003bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7fe ffde 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8003ba0:	61f8      	str	r0, [r7, #28]
        break;
 8003ba2:	e010      	b.n	8003bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <UART_SetConfig+0x56c>)
 8003ba6:	61fb      	str	r3, [r7, #28]
        break;
 8003ba8:	e00d      	b.n	8003bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe ff29 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 8003bae:	61f8      	str	r0, [r7, #28]
        break;
 8003bb0:	e009      	b.n	8003bc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bb6:	61fb      	str	r3, [r7, #28]
        break;
 8003bb8:	e005      	b.n	8003bc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d077      	beq.n	8003cbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005a      	lsls	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d916      	bls.n	8003c16 <UART_SetConfig+0x4a6>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bee:	d212      	bcs.n	8003c16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f023 030f 	bic.w	r3, r3, #15
 8003bf8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	8afa      	ldrh	r2, [r7, #22]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	e052      	b.n	8003cbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c1c:	e04e      	b.n	8003cbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d827      	bhi.n	8003c76 <UART_SetConfig+0x506>
 8003c26:	a201      	add	r2, pc, #4	@ (adr r2, 8003c2c <UART_SetConfig+0x4bc>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c59 	.word	0x08003c59
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08003c77 	.word	0x08003c77
 8003c3c:	08003c67 	.word	0x08003c67
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003c77 	.word	0x08003c77
 8003c48:	08003c77 	.word	0x08003c77
 8003c4c:	08003c6f 	.word	0x08003c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7fe ff6e 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003c54:	61f8      	str	r0, [r7, #28]
        break;
 8003c56:	e014      	b.n	8003c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7fe ff80 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8003c5c:	61f8      	str	r0, [r7, #28]
        break;
 8003c5e:	e010      	b.n	8003c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c60:	4b1e      	ldr	r3, [pc, #120]	@ (8003cdc <UART_SetConfig+0x56c>)
 8003c62:	61fb      	str	r3, [r7, #28]
        break;
 8003c64:	e00d      	b.n	8003c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c66:	f7fe fecb 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 8003c6a:	61f8      	str	r0, [r7, #28]
        break;
 8003c6c:	e009      	b.n	8003c82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c72:	61fb      	str	r3, [r7, #28]
        break;
 8003c74:	e005      	b.n	8003c82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c80:	bf00      	nop
    }

    if (pclk != 0U)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d019      	beq.n	8003cbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	085a      	lsrs	r2, r3, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	441a      	add	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b0f      	cmp	r3, #15
 8003ca0:	d909      	bls.n	8003cb6 <UART_SetConfig+0x546>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca8:	d205      	bcs.n	8003cb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e002      	b.n	8003cbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3728      	adds	r7, #40	@ 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40008000 	.word	0x40008000
 8003cdc:	00f42400 	.word	0x00f42400

08003ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dde:	d10a      	bne.n	8003df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b098      	sub	sp, #96	@ 0x60
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e34:	f7fc ffa8 	bl	8000d88 <HAL_GetTick>
 8003e38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d12e      	bne.n	8003ea6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f88c 	bl	8003f74 <UART_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d021      	beq.n	8003ea6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e6      	bne.n	8003e62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e062      	b.n	8003f6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d149      	bne.n	8003f48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f856 	bl	8003f74 <UART_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03c      	beq.n	8003f48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	623b      	str	r3, [r7, #32]
   return(result);
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e6      	bne.n	8003ece <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f20:	61fa      	str	r2, [r7, #28]
 8003f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e011      	b.n	8003f6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3758      	adds	r7, #88	@ 0x58
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f84:	e04f      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d04b      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fc fefb 	bl	8000d88 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e04e      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d037      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b80      	cmp	r3, #128	@ 0x80
 8003fba:	d034      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d031      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d110      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f838 	bl	800404e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e029      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004000:	d111      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800400a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f81e 	bl	800404e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e00f      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d0a0      	beq.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b095      	sub	sp, #84	@ 0x54
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800406a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004074:	643b      	str	r3, [r7, #64]	@ 0x40
 8004076:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800407a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e6      	bne.n	8004056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	61fb      	str	r3, [r7, #28]
   return(result);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e5      	bne.n	8004088 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d118      	bne.n	80040f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 0310 	bic.w	r3, r3, #16
 80040d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	613b      	str	r3, [r7, #16]
   return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800410a:	bf00      	nop
 800410c:	3754      	adds	r7, #84	@ 0x54
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <sniprintf>:
 8004118:	b40c      	push	{r2, r3}
 800411a:	b530      	push	{r4, r5, lr}
 800411c:	4b18      	ldr	r3, [pc, #96]	@ (8004180 <sniprintf+0x68>)
 800411e:	1e0c      	subs	r4, r1, #0
 8004120:	681d      	ldr	r5, [r3, #0]
 8004122:	b09d      	sub	sp, #116	@ 0x74
 8004124:	da08      	bge.n	8004138 <sniprintf+0x20>
 8004126:	238b      	movs	r3, #139	@ 0x8b
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f04f 30ff 	mov.w	r0, #4294967295
 800412e:	b01d      	add	sp, #116	@ 0x74
 8004130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004134:	b002      	add	sp, #8
 8004136:	4770      	bx	lr
 8004138:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800413c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004146:	bf14      	ite	ne
 8004148:	f104 33ff 	addne.w	r3, r4, #4294967295
 800414c:	4623      	moveq	r3, r4
 800414e:	9304      	str	r3, [sp, #16]
 8004150:	9307      	str	r3, [sp, #28]
 8004152:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004156:	9002      	str	r0, [sp, #8]
 8004158:	9006      	str	r0, [sp, #24]
 800415a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800415e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004160:	ab21      	add	r3, sp, #132	@ 0x84
 8004162:	a902      	add	r1, sp, #8
 8004164:	4628      	mov	r0, r5
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	f000 f994 	bl	8004494 <_svfiprintf_r>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	bfbc      	itt	lt
 8004170:	238b      	movlt	r3, #139	@ 0x8b
 8004172:	602b      	strlt	r3, [r5, #0]
 8004174:	2c00      	cmp	r4, #0
 8004176:	d0da      	beq.n	800412e <sniprintf+0x16>
 8004178:	9b02      	ldr	r3, [sp, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e7d6      	b.n	800412e <sniprintf+0x16>
 8004180:	2000000c 	.word	0x2000000c

08004184 <memset>:
 8004184:	4402      	add	r2, r0
 8004186:	4603      	mov	r3, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	f803 1b01 	strb.w	r1, [r3], #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <__errno>:
 8004194:	4b01      	ldr	r3, [pc, #4]	@ (800419c <__errno+0x8>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	2000000c 	.word	0x2000000c

080041a0 <__libc_init_array>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4d0d      	ldr	r5, [pc, #52]	@ (80041d8 <__libc_init_array+0x38>)
 80041a4:	4c0d      	ldr	r4, [pc, #52]	@ (80041dc <__libc_init_array+0x3c>)
 80041a6:	1b64      	subs	r4, r4, r5
 80041a8:	10a4      	asrs	r4, r4, #2
 80041aa:	2600      	movs	r6, #0
 80041ac:	42a6      	cmp	r6, r4
 80041ae:	d109      	bne.n	80041c4 <__libc_init_array+0x24>
 80041b0:	4d0b      	ldr	r5, [pc, #44]	@ (80041e0 <__libc_init_array+0x40>)
 80041b2:	4c0c      	ldr	r4, [pc, #48]	@ (80041e4 <__libc_init_array+0x44>)
 80041b4:	f000 fc64 	bl	8004a80 <_init>
 80041b8:	1b64      	subs	r4, r4, r5
 80041ba:	10a4      	asrs	r4, r4, #2
 80041bc:	2600      	movs	r6, #0
 80041be:	42a6      	cmp	r6, r4
 80041c0:	d105      	bne.n	80041ce <__libc_init_array+0x2e>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c8:	4798      	blx	r3
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7ee      	b.n	80041ac <__libc_init_array+0xc>
 80041ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d2:	4798      	blx	r3
 80041d4:	3601      	adds	r6, #1
 80041d6:	e7f2      	b.n	80041be <__libc_init_array+0x1e>
 80041d8:	08004b44 	.word	0x08004b44
 80041dc:	08004b44 	.word	0x08004b44
 80041e0:	08004b44 	.word	0x08004b44
 80041e4:	08004b48 	.word	0x08004b48

080041e8 <__retarget_lock_acquire_recursive>:
 80041e8:	4770      	bx	lr

080041ea <__retarget_lock_release_recursive>:
 80041ea:	4770      	bx	lr

080041ec <_free_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4605      	mov	r5, r0
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d041      	beq.n	8004278 <_free_r+0x8c>
 80041f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f8:	1f0c      	subs	r4, r1, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bfb8      	it	lt
 80041fe:	18e4      	addlt	r4, r4, r3
 8004200:	f000 f8e0 	bl	80043c4 <__malloc_lock>
 8004204:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <_free_r+0x90>)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	b933      	cbnz	r3, 8004218 <_free_r+0x2c>
 800420a:	6063      	str	r3, [r4, #4]
 800420c:	6014      	str	r4, [r2, #0]
 800420e:	4628      	mov	r0, r5
 8004210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004214:	f000 b8dc 	b.w	80043d0 <__malloc_unlock>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d908      	bls.n	800422e <_free_r+0x42>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	1821      	adds	r1, r4, r0
 8004220:	428b      	cmp	r3, r1
 8004222:	bf01      	itttt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	e7ed      	b.n	800420a <_free_r+0x1e>
 800422e:	461a      	mov	r2, r3
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b10b      	cbz	r3, 8004238 <_free_r+0x4c>
 8004234:	42a3      	cmp	r3, r4
 8004236:	d9fa      	bls.n	800422e <_free_r+0x42>
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	1850      	adds	r0, r2, r1
 800423c:	42a0      	cmp	r0, r4
 800423e:	d10b      	bne.n	8004258 <_free_r+0x6c>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	4401      	add	r1, r0
 8004244:	1850      	adds	r0, r2, r1
 8004246:	4283      	cmp	r3, r0
 8004248:	6011      	str	r1, [r2, #0]
 800424a:	d1e0      	bne.n	800420e <_free_r+0x22>
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	6053      	str	r3, [r2, #4]
 8004252:	4408      	add	r0, r1
 8004254:	6010      	str	r0, [r2, #0]
 8004256:	e7da      	b.n	800420e <_free_r+0x22>
 8004258:	d902      	bls.n	8004260 <_free_r+0x74>
 800425a:	230c      	movs	r3, #12
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	e7d6      	b.n	800420e <_free_r+0x22>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	1821      	adds	r1, r4, r0
 8004264:	428b      	cmp	r3, r1
 8004266:	bf04      	itt	eq
 8004268:	6819      	ldreq	r1, [r3, #0]
 800426a:	685b      	ldreq	r3, [r3, #4]
 800426c:	6063      	str	r3, [r4, #4]
 800426e:	bf04      	itt	eq
 8004270:	1809      	addeq	r1, r1, r0
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	6054      	str	r4, [r2, #4]
 8004276:	e7ca      	b.n	800420e <_free_r+0x22>
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	bf00      	nop
 800427c:	200002ec 	.word	0x200002ec

08004280 <sbrk_aligned>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4e0f      	ldr	r6, [pc, #60]	@ (80042c0 <sbrk_aligned+0x40>)
 8004284:	460c      	mov	r4, r1
 8004286:	6831      	ldr	r1, [r6, #0]
 8004288:	4605      	mov	r5, r0
 800428a:	b911      	cbnz	r1, 8004292 <sbrk_aligned+0x12>
 800428c:	f000 fba4 	bl	80049d8 <_sbrk_r>
 8004290:	6030      	str	r0, [r6, #0]
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fb9f 	bl	80049d8 <_sbrk_r>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d103      	bne.n	80042a6 <sbrk_aligned+0x26>
 800429e:	f04f 34ff 	mov.w	r4, #4294967295
 80042a2:	4620      	mov	r0, r4
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	1cc4      	adds	r4, r0, #3
 80042a8:	f024 0403 	bic.w	r4, r4, #3
 80042ac:	42a0      	cmp	r0, r4
 80042ae:	d0f8      	beq.n	80042a2 <sbrk_aligned+0x22>
 80042b0:	1a21      	subs	r1, r4, r0
 80042b2:	4628      	mov	r0, r5
 80042b4:	f000 fb90 	bl	80049d8 <_sbrk_r>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d1f2      	bne.n	80042a2 <sbrk_aligned+0x22>
 80042bc:	e7ef      	b.n	800429e <sbrk_aligned+0x1e>
 80042be:	bf00      	nop
 80042c0:	200002e8 	.word	0x200002e8

080042c4 <_malloc_r>:
 80042c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c8:	1ccd      	adds	r5, r1, #3
 80042ca:	f025 0503 	bic.w	r5, r5, #3
 80042ce:	3508      	adds	r5, #8
 80042d0:	2d0c      	cmp	r5, #12
 80042d2:	bf38      	it	cc
 80042d4:	250c      	movcc	r5, #12
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	4606      	mov	r6, r0
 80042da:	db01      	blt.n	80042e0 <_malloc_r+0x1c>
 80042dc:	42a9      	cmp	r1, r5
 80042de:	d904      	bls.n	80042ea <_malloc_r+0x26>
 80042e0:	230c      	movs	r3, #12
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	2000      	movs	r0, #0
 80042e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043c0 <_malloc_r+0xfc>
 80042ee:	f000 f869 	bl	80043c4 <__malloc_lock>
 80042f2:	f8d8 3000 	ldr.w	r3, [r8]
 80042f6:	461c      	mov	r4, r3
 80042f8:	bb44      	cbnz	r4, 800434c <_malloc_r+0x88>
 80042fa:	4629      	mov	r1, r5
 80042fc:	4630      	mov	r0, r6
 80042fe:	f7ff ffbf 	bl	8004280 <sbrk_aligned>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	4604      	mov	r4, r0
 8004306:	d158      	bne.n	80043ba <_malloc_r+0xf6>
 8004308:	f8d8 4000 	ldr.w	r4, [r8]
 800430c:	4627      	mov	r7, r4
 800430e:	2f00      	cmp	r7, #0
 8004310:	d143      	bne.n	800439a <_malloc_r+0xd6>
 8004312:	2c00      	cmp	r4, #0
 8004314:	d04b      	beq.n	80043ae <_malloc_r+0xea>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	4639      	mov	r1, r7
 800431a:	4630      	mov	r0, r6
 800431c:	eb04 0903 	add.w	r9, r4, r3
 8004320:	f000 fb5a 	bl	80049d8 <_sbrk_r>
 8004324:	4581      	cmp	r9, r0
 8004326:	d142      	bne.n	80043ae <_malloc_r+0xea>
 8004328:	6821      	ldr	r1, [r4, #0]
 800432a:	1a6d      	subs	r5, r5, r1
 800432c:	4629      	mov	r1, r5
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff ffa6 	bl	8004280 <sbrk_aligned>
 8004334:	3001      	adds	r0, #1
 8004336:	d03a      	beq.n	80043ae <_malloc_r+0xea>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	442b      	add	r3, r5
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	f8d8 3000 	ldr.w	r3, [r8]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	bb62      	cbnz	r2, 80043a0 <_malloc_r+0xdc>
 8004346:	f8c8 7000 	str.w	r7, [r8]
 800434a:	e00f      	b.n	800436c <_malloc_r+0xa8>
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	1b52      	subs	r2, r2, r5
 8004350:	d420      	bmi.n	8004394 <_malloc_r+0xd0>
 8004352:	2a0b      	cmp	r2, #11
 8004354:	d917      	bls.n	8004386 <_malloc_r+0xc2>
 8004356:	1961      	adds	r1, r4, r5
 8004358:	42a3      	cmp	r3, r4
 800435a:	6025      	str	r5, [r4, #0]
 800435c:	bf18      	it	ne
 800435e:	6059      	strne	r1, [r3, #4]
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	bf08      	it	eq
 8004364:	f8c8 1000 	streq.w	r1, [r8]
 8004368:	5162      	str	r2, [r4, r5]
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f82f 	bl	80043d0 <__malloc_unlock>
 8004372:	f104 000b 	add.w	r0, r4, #11
 8004376:	1d23      	adds	r3, r4, #4
 8004378:	f020 0007 	bic.w	r0, r0, #7
 800437c:	1ac2      	subs	r2, r0, r3
 800437e:	bf1c      	itt	ne
 8004380:	1a1b      	subne	r3, r3, r0
 8004382:	50a3      	strne	r3, [r4, r2]
 8004384:	e7af      	b.n	80042e6 <_malloc_r+0x22>
 8004386:	6862      	ldr	r2, [r4, #4]
 8004388:	42a3      	cmp	r3, r4
 800438a:	bf0c      	ite	eq
 800438c:	f8c8 2000 	streq.w	r2, [r8]
 8004390:	605a      	strne	r2, [r3, #4]
 8004392:	e7eb      	b.n	800436c <_malloc_r+0xa8>
 8004394:	4623      	mov	r3, r4
 8004396:	6864      	ldr	r4, [r4, #4]
 8004398:	e7ae      	b.n	80042f8 <_malloc_r+0x34>
 800439a:	463c      	mov	r4, r7
 800439c:	687f      	ldr	r7, [r7, #4]
 800439e:	e7b6      	b.n	800430e <_malloc_r+0x4a>
 80043a0:	461a      	mov	r2, r3
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d1fb      	bne.n	80043a0 <_malloc_r+0xdc>
 80043a8:	2300      	movs	r3, #0
 80043aa:	6053      	str	r3, [r2, #4]
 80043ac:	e7de      	b.n	800436c <_malloc_r+0xa8>
 80043ae:	230c      	movs	r3, #12
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	4630      	mov	r0, r6
 80043b4:	f000 f80c 	bl	80043d0 <__malloc_unlock>
 80043b8:	e794      	b.n	80042e4 <_malloc_r+0x20>
 80043ba:	6005      	str	r5, [r0, #0]
 80043bc:	e7d6      	b.n	800436c <_malloc_r+0xa8>
 80043be:	bf00      	nop
 80043c0:	200002ec 	.word	0x200002ec

080043c4 <__malloc_lock>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__malloc_lock+0x8>)
 80043c6:	f7ff bf0f 	b.w	80041e8 <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	200002e4 	.word	0x200002e4

080043d0 <__malloc_unlock>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__malloc_unlock+0x8>)
 80043d2:	f7ff bf0a 	b.w	80041ea <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	200002e4 	.word	0x200002e4

080043dc <__ssputs_r>:
 80043dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e0:	688e      	ldr	r6, [r1, #8]
 80043e2:	461f      	mov	r7, r3
 80043e4:	42be      	cmp	r6, r7
 80043e6:	680b      	ldr	r3, [r1, #0]
 80043e8:	4682      	mov	sl, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	4690      	mov	r8, r2
 80043ee:	d82d      	bhi.n	800444c <__ssputs_r+0x70>
 80043f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043f8:	d026      	beq.n	8004448 <__ssputs_r+0x6c>
 80043fa:	6965      	ldr	r5, [r4, #20]
 80043fc:	6909      	ldr	r1, [r1, #16]
 80043fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004402:	eba3 0901 	sub.w	r9, r3, r1
 8004406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800440a:	1c7b      	adds	r3, r7, #1
 800440c:	444b      	add	r3, r9
 800440e:	106d      	asrs	r5, r5, #1
 8004410:	429d      	cmp	r5, r3
 8004412:	bf38      	it	cc
 8004414:	461d      	movcc	r5, r3
 8004416:	0553      	lsls	r3, r2, #21
 8004418:	d527      	bpl.n	800446a <__ssputs_r+0x8e>
 800441a:	4629      	mov	r1, r5
 800441c:	f7ff ff52 	bl	80042c4 <_malloc_r>
 8004420:	4606      	mov	r6, r0
 8004422:	b360      	cbz	r0, 800447e <__ssputs_r+0xa2>
 8004424:	6921      	ldr	r1, [r4, #16]
 8004426:	464a      	mov	r2, r9
 8004428:	f000 fae6 	bl	80049f8 <memcpy>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	6126      	str	r6, [r4, #16]
 800443a:	6165      	str	r5, [r4, #20]
 800443c:	444e      	add	r6, r9
 800443e:	eba5 0509 	sub.w	r5, r5, r9
 8004442:	6026      	str	r6, [r4, #0]
 8004444:	60a5      	str	r5, [r4, #8]
 8004446:	463e      	mov	r6, r7
 8004448:	42be      	cmp	r6, r7
 800444a:	d900      	bls.n	800444e <__ssputs_r+0x72>
 800444c:	463e      	mov	r6, r7
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	4632      	mov	r2, r6
 8004452:	4641      	mov	r1, r8
 8004454:	f000 faa6 	bl	80049a4 <memmove>
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	1b9b      	subs	r3, r3, r6
 800445c:	60a3      	str	r3, [r4, #8]
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	4433      	add	r3, r6
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	2000      	movs	r0, #0
 8004466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446a:	462a      	mov	r2, r5
 800446c:	f000 fad2 	bl	8004a14 <_realloc_r>
 8004470:	4606      	mov	r6, r0
 8004472:	2800      	cmp	r0, #0
 8004474:	d1e0      	bne.n	8004438 <__ssputs_r+0x5c>
 8004476:	6921      	ldr	r1, [r4, #16]
 8004478:	4650      	mov	r0, sl
 800447a:	f7ff feb7 	bl	80041ec <_free_r>
 800447e:	230c      	movs	r3, #12
 8004480:	f8ca 3000 	str.w	r3, [sl]
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
 8004490:	e7e9      	b.n	8004466 <__ssputs_r+0x8a>
	...

08004494 <_svfiprintf_r>:
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	4698      	mov	r8, r3
 800449a:	898b      	ldrh	r3, [r1, #12]
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	b09d      	sub	sp, #116	@ 0x74
 80044a0:	4607      	mov	r7, r0
 80044a2:	460d      	mov	r5, r1
 80044a4:	4614      	mov	r4, r2
 80044a6:	d510      	bpl.n	80044ca <_svfiprintf_r+0x36>
 80044a8:	690b      	ldr	r3, [r1, #16]
 80044aa:	b973      	cbnz	r3, 80044ca <_svfiprintf_r+0x36>
 80044ac:	2140      	movs	r1, #64	@ 0x40
 80044ae:	f7ff ff09 	bl	80042c4 <_malloc_r>
 80044b2:	6028      	str	r0, [r5, #0]
 80044b4:	6128      	str	r0, [r5, #16]
 80044b6:	b930      	cbnz	r0, 80044c6 <_svfiprintf_r+0x32>
 80044b8:	230c      	movs	r3, #12
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	b01d      	add	sp, #116	@ 0x74
 80044c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c6:	2340      	movs	r3, #64	@ 0x40
 80044c8:	616b      	str	r3, [r5, #20]
 80044ca:	2300      	movs	r3, #0
 80044cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044ce:	2320      	movs	r3, #32
 80044d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80044d8:	2330      	movs	r3, #48	@ 0x30
 80044da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004678 <_svfiprintf_r+0x1e4>
 80044de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044e2:	f04f 0901 	mov.w	r9, #1
 80044e6:	4623      	mov	r3, r4
 80044e8:	469a      	mov	sl, r3
 80044ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ee:	b10a      	cbz	r2, 80044f4 <_svfiprintf_r+0x60>
 80044f0:	2a25      	cmp	r2, #37	@ 0x25
 80044f2:	d1f9      	bne.n	80044e8 <_svfiprintf_r+0x54>
 80044f4:	ebba 0b04 	subs.w	fp, sl, r4
 80044f8:	d00b      	beq.n	8004512 <_svfiprintf_r+0x7e>
 80044fa:	465b      	mov	r3, fp
 80044fc:	4622      	mov	r2, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff ff6b 	bl	80043dc <__ssputs_r>
 8004506:	3001      	adds	r0, #1
 8004508:	f000 80a7 	beq.w	800465a <_svfiprintf_r+0x1c6>
 800450c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800450e:	445a      	add	r2, fp
 8004510:	9209      	str	r2, [sp, #36]	@ 0x24
 8004512:	f89a 3000 	ldrb.w	r3, [sl]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 809f 	beq.w	800465a <_svfiprintf_r+0x1c6>
 800451c:	2300      	movs	r3, #0
 800451e:	f04f 32ff 	mov.w	r2, #4294967295
 8004522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004526:	f10a 0a01 	add.w	sl, sl, #1
 800452a:	9304      	str	r3, [sp, #16]
 800452c:	9307      	str	r3, [sp, #28]
 800452e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004532:	931a      	str	r3, [sp, #104]	@ 0x68
 8004534:	4654      	mov	r4, sl
 8004536:	2205      	movs	r2, #5
 8004538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800453c:	484e      	ldr	r0, [pc, #312]	@ (8004678 <_svfiprintf_r+0x1e4>)
 800453e:	f7fb fe4f 	bl	80001e0 <memchr>
 8004542:	9a04      	ldr	r2, [sp, #16]
 8004544:	b9d8      	cbnz	r0, 800457e <_svfiprintf_r+0xea>
 8004546:	06d0      	lsls	r0, r2, #27
 8004548:	bf44      	itt	mi
 800454a:	2320      	movmi	r3, #32
 800454c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004550:	0711      	lsls	r1, r2, #28
 8004552:	bf44      	itt	mi
 8004554:	232b      	movmi	r3, #43	@ 0x2b
 8004556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800455a:	f89a 3000 	ldrb.w	r3, [sl]
 800455e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004560:	d015      	beq.n	800458e <_svfiprintf_r+0xfa>
 8004562:	9a07      	ldr	r2, [sp, #28]
 8004564:	4654      	mov	r4, sl
 8004566:	2000      	movs	r0, #0
 8004568:	f04f 0c0a 	mov.w	ip, #10
 800456c:	4621      	mov	r1, r4
 800456e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004572:	3b30      	subs	r3, #48	@ 0x30
 8004574:	2b09      	cmp	r3, #9
 8004576:	d94b      	bls.n	8004610 <_svfiprintf_r+0x17c>
 8004578:	b1b0      	cbz	r0, 80045a8 <_svfiprintf_r+0x114>
 800457a:	9207      	str	r2, [sp, #28]
 800457c:	e014      	b.n	80045a8 <_svfiprintf_r+0x114>
 800457e:	eba0 0308 	sub.w	r3, r0, r8
 8004582:	fa09 f303 	lsl.w	r3, r9, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	9304      	str	r3, [sp, #16]
 800458a:	46a2      	mov	sl, r4
 800458c:	e7d2      	b.n	8004534 <_svfiprintf_r+0xa0>
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	1d19      	adds	r1, r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	9103      	str	r1, [sp, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	bfbb      	ittet	lt
 800459a:	425b      	neglt	r3, r3
 800459c:	f042 0202 	orrlt.w	r2, r2, #2
 80045a0:	9307      	strge	r3, [sp, #28]
 80045a2:	9307      	strlt	r3, [sp, #28]
 80045a4:	bfb8      	it	lt
 80045a6:	9204      	strlt	r2, [sp, #16]
 80045a8:	7823      	ldrb	r3, [r4, #0]
 80045aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ac:	d10a      	bne.n	80045c4 <_svfiprintf_r+0x130>
 80045ae:	7863      	ldrb	r3, [r4, #1]
 80045b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b2:	d132      	bne.n	800461a <_svfiprintf_r+0x186>
 80045b4:	9b03      	ldr	r3, [sp, #12]
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	9203      	str	r2, [sp, #12]
 80045bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045c0:	3402      	adds	r4, #2
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004688 <_svfiprintf_r+0x1f4>
 80045c8:	7821      	ldrb	r1, [r4, #0]
 80045ca:	2203      	movs	r2, #3
 80045cc:	4650      	mov	r0, sl
 80045ce:	f7fb fe07 	bl	80001e0 <memchr>
 80045d2:	b138      	cbz	r0, 80045e4 <_svfiprintf_r+0x150>
 80045d4:	9b04      	ldr	r3, [sp, #16]
 80045d6:	eba0 000a 	sub.w	r0, r0, sl
 80045da:	2240      	movs	r2, #64	@ 0x40
 80045dc:	4082      	lsls	r2, r0
 80045de:	4313      	orrs	r3, r2
 80045e0:	3401      	adds	r4, #1
 80045e2:	9304      	str	r3, [sp, #16]
 80045e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e8:	4824      	ldr	r0, [pc, #144]	@ (800467c <_svfiprintf_r+0x1e8>)
 80045ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045ee:	2206      	movs	r2, #6
 80045f0:	f7fb fdf6 	bl	80001e0 <memchr>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d036      	beq.n	8004666 <_svfiprintf_r+0x1d2>
 80045f8:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <_svfiprintf_r+0x1ec>)
 80045fa:	bb1b      	cbnz	r3, 8004644 <_svfiprintf_r+0x1b0>
 80045fc:	9b03      	ldr	r3, [sp, #12]
 80045fe:	3307      	adds	r3, #7
 8004600:	f023 0307 	bic.w	r3, r3, #7
 8004604:	3308      	adds	r3, #8
 8004606:	9303      	str	r3, [sp, #12]
 8004608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800460a:	4433      	add	r3, r6
 800460c:	9309      	str	r3, [sp, #36]	@ 0x24
 800460e:	e76a      	b.n	80044e6 <_svfiprintf_r+0x52>
 8004610:	fb0c 3202 	mla	r2, ip, r2, r3
 8004614:	460c      	mov	r4, r1
 8004616:	2001      	movs	r0, #1
 8004618:	e7a8      	b.n	800456c <_svfiprintf_r+0xd8>
 800461a:	2300      	movs	r3, #0
 800461c:	3401      	adds	r4, #1
 800461e:	9305      	str	r3, [sp, #20]
 8004620:	4619      	mov	r1, r3
 8004622:	f04f 0c0a 	mov.w	ip, #10
 8004626:	4620      	mov	r0, r4
 8004628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800462c:	3a30      	subs	r2, #48	@ 0x30
 800462e:	2a09      	cmp	r2, #9
 8004630:	d903      	bls.n	800463a <_svfiprintf_r+0x1a6>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0c6      	beq.n	80045c4 <_svfiprintf_r+0x130>
 8004636:	9105      	str	r1, [sp, #20]
 8004638:	e7c4      	b.n	80045c4 <_svfiprintf_r+0x130>
 800463a:	fb0c 2101 	mla	r1, ip, r1, r2
 800463e:	4604      	mov	r4, r0
 8004640:	2301      	movs	r3, #1
 8004642:	e7f0      	b.n	8004626 <_svfiprintf_r+0x192>
 8004644:	ab03      	add	r3, sp, #12
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	462a      	mov	r2, r5
 800464a:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <_svfiprintf_r+0x1f0>)
 800464c:	a904      	add	r1, sp, #16
 800464e:	4638      	mov	r0, r7
 8004650:	f3af 8000 	nop.w
 8004654:	1c42      	adds	r2, r0, #1
 8004656:	4606      	mov	r6, r0
 8004658:	d1d6      	bne.n	8004608 <_svfiprintf_r+0x174>
 800465a:	89ab      	ldrh	r3, [r5, #12]
 800465c:	065b      	lsls	r3, r3, #25
 800465e:	f53f af2d 	bmi.w	80044bc <_svfiprintf_r+0x28>
 8004662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004664:	e72c      	b.n	80044c0 <_svfiprintf_r+0x2c>
 8004666:	ab03      	add	r3, sp, #12
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	462a      	mov	r2, r5
 800466c:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <_svfiprintf_r+0x1f0>)
 800466e:	a904      	add	r1, sp, #16
 8004670:	4638      	mov	r0, r7
 8004672:	f000 f879 	bl	8004768 <_printf_i>
 8004676:	e7ed      	b.n	8004654 <_svfiprintf_r+0x1c0>
 8004678:	08004b08 	.word	0x08004b08
 800467c:	08004b12 	.word	0x08004b12
 8004680:	00000000 	.word	0x00000000
 8004684:	080043dd 	.word	0x080043dd
 8004688:	08004b0e 	.word	0x08004b0e

0800468c <_printf_common>:
 800468c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004690:	4616      	mov	r6, r2
 8004692:	4698      	mov	r8, r3
 8004694:	688a      	ldr	r2, [r1, #8]
 8004696:	690b      	ldr	r3, [r1, #16]
 8004698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800469c:	4293      	cmp	r3, r2
 800469e:	bfb8      	it	lt
 80046a0:	4613      	movlt	r3, r2
 80046a2:	6033      	str	r3, [r6, #0]
 80046a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046a8:	4607      	mov	r7, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	b10a      	cbz	r2, 80046b2 <_printf_common+0x26>
 80046ae:	3301      	adds	r3, #1
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	0699      	lsls	r1, r3, #26
 80046b6:	bf42      	ittt	mi
 80046b8:	6833      	ldrmi	r3, [r6, #0]
 80046ba:	3302      	addmi	r3, #2
 80046bc:	6033      	strmi	r3, [r6, #0]
 80046be:	6825      	ldr	r5, [r4, #0]
 80046c0:	f015 0506 	ands.w	r5, r5, #6
 80046c4:	d106      	bne.n	80046d4 <_printf_common+0x48>
 80046c6:	f104 0a19 	add.w	sl, r4, #25
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	6832      	ldr	r2, [r6, #0]
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dc26      	bgt.n	8004722 <_printf_common+0x96>
 80046d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	3b00      	subs	r3, #0
 80046dc:	bf18      	it	ne
 80046de:	2301      	movne	r3, #1
 80046e0:	0692      	lsls	r2, r2, #26
 80046e2:	d42b      	bmi.n	800473c <_printf_common+0xb0>
 80046e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046e8:	4641      	mov	r1, r8
 80046ea:	4638      	mov	r0, r7
 80046ec:	47c8      	blx	r9
 80046ee:	3001      	adds	r0, #1
 80046f0:	d01e      	beq.n	8004730 <_printf_common+0xa4>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	6922      	ldr	r2, [r4, #16]
 80046f6:	f003 0306 	and.w	r3, r3, #6
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	bf02      	ittt	eq
 80046fe:	68e5      	ldreq	r5, [r4, #12]
 8004700:	6833      	ldreq	r3, [r6, #0]
 8004702:	1aed      	subeq	r5, r5, r3
 8004704:	68a3      	ldr	r3, [r4, #8]
 8004706:	bf0c      	ite	eq
 8004708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800470c:	2500      	movne	r5, #0
 800470e:	4293      	cmp	r3, r2
 8004710:	bfc4      	itt	gt
 8004712:	1a9b      	subgt	r3, r3, r2
 8004714:	18ed      	addgt	r5, r5, r3
 8004716:	2600      	movs	r6, #0
 8004718:	341a      	adds	r4, #26
 800471a:	42b5      	cmp	r5, r6
 800471c:	d11a      	bne.n	8004754 <_printf_common+0xc8>
 800471e:	2000      	movs	r0, #0
 8004720:	e008      	b.n	8004734 <_printf_common+0xa8>
 8004722:	2301      	movs	r3, #1
 8004724:	4652      	mov	r2, sl
 8004726:	4641      	mov	r1, r8
 8004728:	4638      	mov	r0, r7
 800472a:	47c8      	blx	r9
 800472c:	3001      	adds	r0, #1
 800472e:	d103      	bne.n	8004738 <_printf_common+0xac>
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004738:	3501      	adds	r5, #1
 800473a:	e7c6      	b.n	80046ca <_printf_common+0x3e>
 800473c:	18e1      	adds	r1, r4, r3
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	2030      	movs	r0, #48	@ 0x30
 8004742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004746:	4422      	add	r2, r4
 8004748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800474c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004750:	3302      	adds	r3, #2
 8004752:	e7c7      	b.n	80046e4 <_printf_common+0x58>
 8004754:	2301      	movs	r3, #1
 8004756:	4622      	mov	r2, r4
 8004758:	4641      	mov	r1, r8
 800475a:	4638      	mov	r0, r7
 800475c:	47c8      	blx	r9
 800475e:	3001      	adds	r0, #1
 8004760:	d0e6      	beq.n	8004730 <_printf_common+0xa4>
 8004762:	3601      	adds	r6, #1
 8004764:	e7d9      	b.n	800471a <_printf_common+0x8e>
	...

08004768 <_printf_i>:
 8004768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	7e0f      	ldrb	r7, [r1, #24]
 800476e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004770:	2f78      	cmp	r7, #120	@ 0x78
 8004772:	4691      	mov	r9, r2
 8004774:	4680      	mov	r8, r0
 8004776:	460c      	mov	r4, r1
 8004778:	469a      	mov	sl, r3
 800477a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800477e:	d807      	bhi.n	8004790 <_printf_i+0x28>
 8004780:	2f62      	cmp	r7, #98	@ 0x62
 8004782:	d80a      	bhi.n	800479a <_printf_i+0x32>
 8004784:	2f00      	cmp	r7, #0
 8004786:	f000 80d1 	beq.w	800492c <_printf_i+0x1c4>
 800478a:	2f58      	cmp	r7, #88	@ 0x58
 800478c:	f000 80b8 	beq.w	8004900 <_printf_i+0x198>
 8004790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004798:	e03a      	b.n	8004810 <_printf_i+0xa8>
 800479a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800479e:	2b15      	cmp	r3, #21
 80047a0:	d8f6      	bhi.n	8004790 <_printf_i+0x28>
 80047a2:	a101      	add	r1, pc, #4	@ (adr r1, 80047a8 <_printf_i+0x40>)
 80047a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047a8:	08004801 	.word	0x08004801
 80047ac:	08004815 	.word	0x08004815
 80047b0:	08004791 	.word	0x08004791
 80047b4:	08004791 	.word	0x08004791
 80047b8:	08004791 	.word	0x08004791
 80047bc:	08004791 	.word	0x08004791
 80047c0:	08004815 	.word	0x08004815
 80047c4:	08004791 	.word	0x08004791
 80047c8:	08004791 	.word	0x08004791
 80047cc:	08004791 	.word	0x08004791
 80047d0:	08004791 	.word	0x08004791
 80047d4:	08004913 	.word	0x08004913
 80047d8:	0800483f 	.word	0x0800483f
 80047dc:	080048cd 	.word	0x080048cd
 80047e0:	08004791 	.word	0x08004791
 80047e4:	08004791 	.word	0x08004791
 80047e8:	08004935 	.word	0x08004935
 80047ec:	08004791 	.word	0x08004791
 80047f0:	0800483f 	.word	0x0800483f
 80047f4:	08004791 	.word	0x08004791
 80047f8:	08004791 	.word	0x08004791
 80047fc:	080048d5 	.word	0x080048d5
 8004800:	6833      	ldr	r3, [r6, #0]
 8004802:	1d1a      	adds	r2, r3, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6032      	str	r2, [r6, #0]
 8004808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800480c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004810:	2301      	movs	r3, #1
 8004812:	e09c      	b.n	800494e <_printf_i+0x1e6>
 8004814:	6833      	ldr	r3, [r6, #0]
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	1d19      	adds	r1, r3, #4
 800481a:	6031      	str	r1, [r6, #0]
 800481c:	0606      	lsls	r6, r0, #24
 800481e:	d501      	bpl.n	8004824 <_printf_i+0xbc>
 8004820:	681d      	ldr	r5, [r3, #0]
 8004822:	e003      	b.n	800482c <_printf_i+0xc4>
 8004824:	0645      	lsls	r5, r0, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0xb8>
 8004828:	f9b3 5000 	ldrsh.w	r5, [r3]
 800482c:	2d00      	cmp	r5, #0
 800482e:	da03      	bge.n	8004838 <_printf_i+0xd0>
 8004830:	232d      	movs	r3, #45	@ 0x2d
 8004832:	426d      	negs	r5, r5
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004838:	4858      	ldr	r0, [pc, #352]	@ (800499c <_printf_i+0x234>)
 800483a:	230a      	movs	r3, #10
 800483c:	e011      	b.n	8004862 <_printf_i+0xfa>
 800483e:	6821      	ldr	r1, [r4, #0]
 8004840:	6833      	ldr	r3, [r6, #0]
 8004842:	0608      	lsls	r0, r1, #24
 8004844:	f853 5b04 	ldr.w	r5, [r3], #4
 8004848:	d402      	bmi.n	8004850 <_printf_i+0xe8>
 800484a:	0649      	lsls	r1, r1, #25
 800484c:	bf48      	it	mi
 800484e:	b2ad      	uxthmi	r5, r5
 8004850:	2f6f      	cmp	r7, #111	@ 0x6f
 8004852:	4852      	ldr	r0, [pc, #328]	@ (800499c <_printf_i+0x234>)
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	bf14      	ite	ne
 8004858:	230a      	movne	r3, #10
 800485a:	2308      	moveq	r3, #8
 800485c:	2100      	movs	r1, #0
 800485e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004862:	6866      	ldr	r6, [r4, #4]
 8004864:	60a6      	str	r6, [r4, #8]
 8004866:	2e00      	cmp	r6, #0
 8004868:	db05      	blt.n	8004876 <_printf_i+0x10e>
 800486a:	6821      	ldr	r1, [r4, #0]
 800486c:	432e      	orrs	r6, r5
 800486e:	f021 0104 	bic.w	r1, r1, #4
 8004872:	6021      	str	r1, [r4, #0]
 8004874:	d04b      	beq.n	800490e <_printf_i+0x1a6>
 8004876:	4616      	mov	r6, r2
 8004878:	fbb5 f1f3 	udiv	r1, r5, r3
 800487c:	fb03 5711 	mls	r7, r3, r1, r5
 8004880:	5dc7      	ldrb	r7, [r0, r7]
 8004882:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004886:	462f      	mov	r7, r5
 8004888:	42bb      	cmp	r3, r7
 800488a:	460d      	mov	r5, r1
 800488c:	d9f4      	bls.n	8004878 <_printf_i+0x110>
 800488e:	2b08      	cmp	r3, #8
 8004890:	d10b      	bne.n	80048aa <_printf_i+0x142>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	07df      	lsls	r7, r3, #31
 8004896:	d508      	bpl.n	80048aa <_printf_i+0x142>
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	6861      	ldr	r1, [r4, #4]
 800489c:	4299      	cmp	r1, r3
 800489e:	bfde      	ittt	le
 80048a0:	2330      	movle	r3, #48	@ 0x30
 80048a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048aa:	1b92      	subs	r2, r2, r6
 80048ac:	6122      	str	r2, [r4, #16]
 80048ae:	f8cd a000 	str.w	sl, [sp]
 80048b2:	464b      	mov	r3, r9
 80048b4:	aa03      	add	r2, sp, #12
 80048b6:	4621      	mov	r1, r4
 80048b8:	4640      	mov	r0, r8
 80048ba:	f7ff fee7 	bl	800468c <_printf_common>
 80048be:	3001      	adds	r0, #1
 80048c0:	d14a      	bne.n	8004958 <_printf_i+0x1f0>
 80048c2:	f04f 30ff 	mov.w	r0, #4294967295
 80048c6:	b004      	add	sp, #16
 80048c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	f043 0320 	orr.w	r3, r3, #32
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	4832      	ldr	r0, [pc, #200]	@ (80049a0 <_printf_i+0x238>)
 80048d6:	2778      	movs	r7, #120	@ 0x78
 80048d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	6831      	ldr	r1, [r6, #0]
 80048e0:	061f      	lsls	r7, r3, #24
 80048e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80048e6:	d402      	bmi.n	80048ee <_printf_i+0x186>
 80048e8:	065f      	lsls	r7, r3, #25
 80048ea:	bf48      	it	mi
 80048ec:	b2ad      	uxthmi	r5, r5
 80048ee:	6031      	str	r1, [r6, #0]
 80048f0:	07d9      	lsls	r1, r3, #31
 80048f2:	bf44      	itt	mi
 80048f4:	f043 0320 	orrmi.w	r3, r3, #32
 80048f8:	6023      	strmi	r3, [r4, #0]
 80048fa:	b11d      	cbz	r5, 8004904 <_printf_i+0x19c>
 80048fc:	2310      	movs	r3, #16
 80048fe:	e7ad      	b.n	800485c <_printf_i+0xf4>
 8004900:	4826      	ldr	r0, [pc, #152]	@ (800499c <_printf_i+0x234>)
 8004902:	e7e9      	b.n	80048d8 <_printf_i+0x170>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f023 0320 	bic.w	r3, r3, #32
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	e7f6      	b.n	80048fc <_printf_i+0x194>
 800490e:	4616      	mov	r6, r2
 8004910:	e7bd      	b.n	800488e <_printf_i+0x126>
 8004912:	6833      	ldr	r3, [r6, #0]
 8004914:	6825      	ldr	r5, [r4, #0]
 8004916:	6961      	ldr	r1, [r4, #20]
 8004918:	1d18      	adds	r0, r3, #4
 800491a:	6030      	str	r0, [r6, #0]
 800491c:	062e      	lsls	r6, r5, #24
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	d501      	bpl.n	8004926 <_printf_i+0x1be>
 8004922:	6019      	str	r1, [r3, #0]
 8004924:	e002      	b.n	800492c <_printf_i+0x1c4>
 8004926:	0668      	lsls	r0, r5, #25
 8004928:	d5fb      	bpl.n	8004922 <_printf_i+0x1ba>
 800492a:	8019      	strh	r1, [r3, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	4616      	mov	r6, r2
 8004932:	e7bc      	b.n	80048ae <_printf_i+0x146>
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	1d1a      	adds	r2, r3, #4
 8004938:	6032      	str	r2, [r6, #0]
 800493a:	681e      	ldr	r6, [r3, #0]
 800493c:	6862      	ldr	r2, [r4, #4]
 800493e:	2100      	movs	r1, #0
 8004940:	4630      	mov	r0, r6
 8004942:	f7fb fc4d 	bl	80001e0 <memchr>
 8004946:	b108      	cbz	r0, 800494c <_printf_i+0x1e4>
 8004948:	1b80      	subs	r0, r0, r6
 800494a:	6060      	str	r0, [r4, #4]
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	6123      	str	r3, [r4, #16]
 8004950:	2300      	movs	r3, #0
 8004952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004956:	e7aa      	b.n	80048ae <_printf_i+0x146>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	4632      	mov	r2, r6
 800495c:	4649      	mov	r1, r9
 800495e:	4640      	mov	r0, r8
 8004960:	47d0      	blx	sl
 8004962:	3001      	adds	r0, #1
 8004964:	d0ad      	beq.n	80048c2 <_printf_i+0x15a>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	079b      	lsls	r3, r3, #30
 800496a:	d413      	bmi.n	8004994 <_printf_i+0x22c>
 800496c:	68e0      	ldr	r0, [r4, #12]
 800496e:	9b03      	ldr	r3, [sp, #12]
 8004970:	4298      	cmp	r0, r3
 8004972:	bfb8      	it	lt
 8004974:	4618      	movlt	r0, r3
 8004976:	e7a6      	b.n	80048c6 <_printf_i+0x15e>
 8004978:	2301      	movs	r3, #1
 800497a:	4632      	mov	r2, r6
 800497c:	4649      	mov	r1, r9
 800497e:	4640      	mov	r0, r8
 8004980:	47d0      	blx	sl
 8004982:	3001      	adds	r0, #1
 8004984:	d09d      	beq.n	80048c2 <_printf_i+0x15a>
 8004986:	3501      	adds	r5, #1
 8004988:	68e3      	ldr	r3, [r4, #12]
 800498a:	9903      	ldr	r1, [sp, #12]
 800498c:	1a5b      	subs	r3, r3, r1
 800498e:	42ab      	cmp	r3, r5
 8004990:	dcf2      	bgt.n	8004978 <_printf_i+0x210>
 8004992:	e7eb      	b.n	800496c <_printf_i+0x204>
 8004994:	2500      	movs	r5, #0
 8004996:	f104 0619 	add.w	r6, r4, #25
 800499a:	e7f5      	b.n	8004988 <_printf_i+0x220>
 800499c:	08004b19 	.word	0x08004b19
 80049a0:	08004b2a 	.word	0x08004b2a

080049a4 <memmove>:
 80049a4:	4288      	cmp	r0, r1
 80049a6:	b510      	push	{r4, lr}
 80049a8:	eb01 0402 	add.w	r4, r1, r2
 80049ac:	d902      	bls.n	80049b4 <memmove+0x10>
 80049ae:	4284      	cmp	r4, r0
 80049b0:	4623      	mov	r3, r4
 80049b2:	d807      	bhi.n	80049c4 <memmove+0x20>
 80049b4:	1e43      	subs	r3, r0, #1
 80049b6:	42a1      	cmp	r1, r4
 80049b8:	d008      	beq.n	80049cc <memmove+0x28>
 80049ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049c2:	e7f8      	b.n	80049b6 <memmove+0x12>
 80049c4:	4402      	add	r2, r0
 80049c6:	4601      	mov	r1, r0
 80049c8:	428a      	cmp	r2, r1
 80049ca:	d100      	bne.n	80049ce <memmove+0x2a>
 80049cc:	bd10      	pop	{r4, pc}
 80049ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049d6:	e7f7      	b.n	80049c8 <memmove+0x24>

080049d8 <_sbrk_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d06      	ldr	r5, [pc, #24]	@ (80049f4 <_sbrk_r+0x1c>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fc f8ee 	bl	8000bc4 <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_sbrk_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_sbrk_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	200002e0 	.word	0x200002e0

080049f8 <memcpy>:
 80049f8:	440a      	add	r2, r1
 80049fa:	4291      	cmp	r1, r2
 80049fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a00:	d100      	bne.n	8004a04 <memcpy+0xc>
 8004a02:	4770      	bx	lr
 8004a04:	b510      	push	{r4, lr}
 8004a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a0e:	4291      	cmp	r1, r2
 8004a10:	d1f9      	bne.n	8004a06 <memcpy+0xe>
 8004a12:	bd10      	pop	{r4, pc}

08004a14 <_realloc_r>:
 8004a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	4607      	mov	r7, r0
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	460d      	mov	r5, r1
 8004a1e:	b921      	cbnz	r1, 8004a2a <_realloc_r+0x16>
 8004a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	4611      	mov	r1, r2
 8004a26:	f7ff bc4d 	b.w	80042c4 <_malloc_r>
 8004a2a:	b92a      	cbnz	r2, 8004a38 <_realloc_r+0x24>
 8004a2c:	f7ff fbde 	bl	80041ec <_free_r>
 8004a30:	4625      	mov	r5, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a38:	f000 f81a 	bl	8004a70 <_malloc_usable_size_r>
 8004a3c:	4284      	cmp	r4, r0
 8004a3e:	4606      	mov	r6, r0
 8004a40:	d802      	bhi.n	8004a48 <_realloc_r+0x34>
 8004a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a46:	d8f4      	bhi.n	8004a32 <_realloc_r+0x1e>
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f7ff fc3a 	bl	80042c4 <_malloc_r>
 8004a50:	4680      	mov	r8, r0
 8004a52:	b908      	cbnz	r0, 8004a58 <_realloc_r+0x44>
 8004a54:	4645      	mov	r5, r8
 8004a56:	e7ec      	b.n	8004a32 <_realloc_r+0x1e>
 8004a58:	42b4      	cmp	r4, r6
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	bf28      	it	cs
 8004a60:	4632      	movcs	r2, r6
 8004a62:	f7ff ffc9 	bl	80049f8 <memcpy>
 8004a66:	4629      	mov	r1, r5
 8004a68:	4638      	mov	r0, r7
 8004a6a:	f7ff fbbf 	bl	80041ec <_free_r>
 8004a6e:	e7f1      	b.n	8004a54 <_realloc_r+0x40>

08004a70 <_malloc_usable_size_r>:
 8004a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a74:	1f18      	subs	r0, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbc      	itt	lt
 8004a7a:	580b      	ldrlt	r3, [r1, r0]
 8004a7c:	18c0      	addlt	r0, r0, r3
 8004a7e:	4770      	bx	lr

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
