
15_SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004c48  08004c48  00005c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c94  08004c94  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c9c  08004c9c  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c9c  08004c9c  00005c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004ca4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000018  08004cbc  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004cbc  000061c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0be  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8c  00000000  00000000  00014106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00016098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000914  00000000  00000000  00016c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255a2  00000000  00000000  00017574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df9c  00000000  00000000  0003cb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e63d3  00000000  00000000  0004aab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130e85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  00130ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00133edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c30 	.word	0x08004c30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004c30 	.word	0x08004c30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_SPI_TxRxCpltCallback>:
uint8_t rx_buffer[sizeof(tx_buffer)];       // Buffer to store received SPI data
volatile uint8_t spi_ready = 1;             // Flag to indicate SPI is ready for next transfer


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d120      	bne.n	8000548 <HAL_SPI_TxRxCpltCallback+0x54>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // Set CS HIGH (deselect slave)
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	4811      	ldr	r0, [pc, #68]	@ (8000554 <HAL_SPI_TxRxCpltCallback+0x60>)
 800050e:	f001 f913 	bl	8001738 <HAL_GPIO_WritePin>

        // Optional: Send received SPI data over UART
        HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer)-1, HAL_MAX_DELAY);
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	2209      	movs	r2, #9
 8000518:	490f      	ldr	r1, [pc, #60]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800051a:	4810      	ldr	r0, [pc, #64]	@ (800055c <HAL_SPI_TxRxCpltCallback+0x68>)
 800051c:	f003 fa8e 	bl	8003a3c <HAL_UART_Transmit>

        // Add newline for readability in UART terminal
        uint8_t newline[] = "\r\n";
 8000520:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	8019      	strh	r1, [r3, #0]
 800052c:	3302      	adds	r3, #2
 800052e:	0c12      	lsrs	r2, r2, #16
 8000530:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, newline, sizeof(newline)-1, HAL_MAX_DELAY);
 8000532:	f107 010c 	add.w	r1, r7, #12
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	2202      	movs	r2, #2
 800053c:	4807      	ldr	r0, [pc, #28]	@ (800055c <HAL_SPI_TxRxCpltCallback+0x68>)
 800053e:	f003 fa7d 	bl	8003a3c <HAL_UART_Transmit>

        spi_ready = 1;  // Mark SPI ready for next transfer
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_SPI_TxRxCpltCallback+0x70>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
    }
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013000 	.word	0x40013000
 8000554:	48000400 	.word	0x48000400
 8000558:	200001b0 	.word	0x200001b0
 800055c:	20000128 	.word	0x20000128
 8000560:	08004c48 	.word	0x08004c48
 8000564:	2000000a 	.word	0x2000000a

08000568 <main>:

int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fb36 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f81e 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f902 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f8da 	bl	8000730 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8a8 	bl	80006d0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000580:	f000 f868 	bl	8000654 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // Pull CS LOW to select slave
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058a:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <main+0x38>)
 800058c:	f001 f8d4 	bl	8001738 <HAL_GPIO_WritePin>

      // Start SPI transfer using DMA (non-blocking)
      HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, sizeof(tx_buffer));
 8000590:	230a      	movs	r3, #10
 8000592:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <main+0x3c>)
 8000594:	4904      	ldr	r1, [pc, #16]	@ (80005a8 <main+0x40>)
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <main+0x44>)
 8000598:	f002 fcaa 	bl	8002ef0 <HAL_SPI_TransmitReceive_DMA>
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <main+0x34>
 80005a0:	48000400 	.word	0x48000400
 80005a4:	200001b0 	.word	0x200001b0
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000034 	.word	0x20000034

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	@ 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	@ 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fb09 	bl	8004bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005d6:	f001 f8d5 	bl	8001784 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f934 	bl	800084c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005fe:	230a      	movs	r3, #10
 8000600:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f90c 	bl	8001830 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800061e:	f000 f915 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fcd4 	bl	8001fe8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000646:	f000 f901 	bl	800084c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	@ 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_SPI1_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <MX_SPI1_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_SPI1_Init+0x74>)
 8000660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_SPI1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_SPI1_Init+0x74>)
 800066e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000672:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_SPI1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_SPI1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_SPI1_Init+0x74>)
 8000682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000686:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_SPI1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_SPI1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_SPI1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_SPI1_Init+0x74>)
 80006a2:	2207      	movs	r2, #7
 80006a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_SPI1_Init+0x74>)
 80006ae:	2208      	movs	r2, #8
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_SPI1_Init+0x74>)
 80006b4:	f002 fb78 	bl	8002da8 <HAL_SPI_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 f8c5 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000034 	.word	0x20000034
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	@ (800072c <MX_USART2_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x58>)
 8000714:	f003 f944 	bl	80039a0 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f895 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000128 	.word	0x20000128
 800072c:	40004400 	.word	0x40004400

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_DMA_Init+0x48>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <MX_DMA_Init+0x48>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <MX_DMA_Init+0x48>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	200c      	movs	r0, #12
 8000754:	f000 fb99 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000758:	200c      	movs	r0, #12
 800075a:	f000 fbb2 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	200d      	movs	r0, #13
 8000764:	f000 fb91 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000768:	200d      	movs	r0, #13
 800076a:	f000 fbaa 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a2a      	ldr	r2, [pc, #168]	@ (8000840 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a24      	ldr	r2, [pc, #144]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a18      	ldr	r2, [pc, #96]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f8:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_GPIO_Init+0xc8>)
 80007fa:	f000 ff9d 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000804:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <MX_GPIO_Init+0xcc>)
 8000816:	f000 fde5 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_GPIO_Init+0xc8>)
 8000834:	f000 fdd6 	bl	80013e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	@ 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	48000400 	.word	0x48000400
 8000848:	48000800 	.word	0x48000800

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_MspInit+0x44>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	@ 0x60
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x44>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a45      	ldr	r2, [pc, #276]	@ (80009d4 <HAL_SPI_MspInit+0x134>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	f040 8083 	bne.w	80009ca <HAL_SPI_MspInit+0x12a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c4:	4b44      	ldr	r3, [pc, #272]	@ (80009d8 <HAL_SPI_MspInit+0x138>)
 80008c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c8:	4a43      	ldr	r2, [pc, #268]	@ (80009d8 <HAL_SPI_MspInit+0x138>)
 80008ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80008d0:	4b41      	ldr	r3, [pc, #260]	@ (80009d8 <HAL_SPI_MspInit+0x138>)
 80008d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <HAL_SPI_MspInit+0x138>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	4a3d      	ldr	r2, [pc, #244]	@ (80009d8 <HAL_SPI_MspInit+0x138>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e8:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <HAL_SPI_MspInit+0x138>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008f4:	23e0      	movs	r3, #224	@ 0xe0
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000904:	2305      	movs	r3, #5
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f000 fd67 	bl	80013e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000916:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000918:	4a31      	ldr	r2, [pc, #196]	@ (80009e0 <HAL_SPI_MspInit+0x140>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 800091e:	2201      	movs	r2, #1
 8000920:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000924:	2210      	movs	r2, #16
 8000926:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800094c:	4823      	ldr	r0, [pc, #140]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 800094e:	f000 fad3 	bl	8000ef8 <HAL_DMA_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000958:	f7ff ff78 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a1f      	ldr	r2, [pc, #124]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000960:	655a      	str	r2, [r3, #84]	@ 0x54
 8000962:	4a1e      	ldr	r2, [pc, #120]	@ (80009dc <HAL_SPI_MspInit+0x13c>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 800096a:	4a1f      	ldr	r2, [pc, #124]	@ (80009e8 <HAL_SPI_MspInit+0x148>)
 800096c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 8000970:	2201      	movs	r2, #1
 8000972:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 8000982:	2280      	movs	r2, #128	@ 0x80
 8000984:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 80009a0:	f000 faaa 	bl	8000ef8 <HAL_DMA_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80009aa:	f7ff ff4f 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 80009b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80009b4:	4a0b      	ldr	r2, [pc, #44]	@ (80009e4 <HAL_SPI_MspInit+0x144>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2023      	movs	r0, #35	@ 0x23
 80009c0:	f000 fa63 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009c4:	2023      	movs	r0, #35	@ 0x23
 80009c6:	f000 fa7c 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	20000098 	.word	0x20000098
 80009e0:	40020030 	.word	0x40020030
 80009e4:	200000e0 	.word	0x200000e0
 80009e8:	4002001c 	.word	0x4002001c

080009ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ac      	sub	sp, #176	@ 0xb0
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2288      	movs	r2, #136	@ 0x88
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 f8e2 	bl	8004bd6 <memset>
  if(huart->Instance==USART2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a25      	ldr	r2, [pc, #148]	@ (8000aac <HAL_UART_MspInit+0xc0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d143      	bne.n	8000aa4 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 fd01 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a34:	f7ff ff0a 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a38:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a80:	2307      	movs	r3, #7
 8000a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f000 fca8 	bl	80013e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2026      	movs	r0, #38	@ 0x26
 8000a9a:	f000 f9f6 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9e:	2026      	movs	r0, #38	@ 0x26
 8000aa0:	f000 fa0f 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa4:	bf00      	nop
 8000aa6:	37b0      	adds	r7, #176	@ 0xb0
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f8c3 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <DMA1_Channel2_IRQHandler+0x10>)
 8000b1a:	f000 fb84 	bl	8001226 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000e0 	.word	0x200000e0

08000b28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <DMA1_Channel3_IRQHandler+0x10>)
 8000b2e:	f000 fb7a 	bl	8001226 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000098 	.word	0x20000098

08000b3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <SPI1_IRQHandler+0x10>)
 8000b42:	f002 fb5b 	bl	80031fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000034 	.word	0x20000034

08000b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	f002 fffb 	bl	8003b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000128 	.word	0x20000128

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	@ (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 f817 	bl	8004be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fcd5 	bl	8000568 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bcc:	08004ca4 	.word	0x08004ca4
  ldr r2, =_sbss
 8000bd0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bd4:	200001c0 	.word	0x200001c0

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_Init+0x3c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <HAL_Init+0x3c>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f93e 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f80f 	bl	8000c1c <HAL_InitTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	e001      	b.n	8000c0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0a:	f7ff fe25 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d023      	beq.n	8000c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c30:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <HAL_InitTick+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_InitTick+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f949 	bl	8000ede <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10f      	bne.n	8000c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d809      	bhi.n	8000c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f913 	bl	8000e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_InitTick+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e004      	b.n	8000c7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e001      	b.n	8000c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000014 	.word	0x20000014
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20000010 	.word	0x20000010

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	200001bc 	.word	0x200001bc

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200001bc 	.word	0x200001bc

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e098      	b.n	800103c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <HAL_DMA_Init+0x150>)
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d80f      	bhi.n	8000f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <HAL_DMA_Init+0x154>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a4b      	ldr	r2, [pc, #300]	@ (8001050 <HAL_DMA_Init+0x158>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	009a      	lsls	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a48      	ldr	r2, [pc, #288]	@ (8001054 <HAL_DMA_Init+0x15c>)
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f34:	e00e      	b.n	8000f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b46      	ldr	r3, [pc, #280]	@ (8001058 <HAL_DMA_Init+0x160>)
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a43      	ldr	r2, [pc, #268]	@ (8001050 <HAL_DMA_Init+0x158>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	009a      	lsls	r2, r3, #2
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a42      	ldr	r2, [pc, #264]	@ (800105c <HAL_DMA_Init+0x164>)
 8000f52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000fae:	d039      	beq.n	8001024 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a27      	ldr	r2, [pc, #156]	@ (8001054 <HAL_DMA_Init+0x15c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11a      	bne.n	8000ff0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fba:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <HAL_DMA_Init+0x168>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f003 031c 	and.w	r3, r3, #28
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4924      	ldr	r1, [pc, #144]	@ (8001060 <HAL_DMA_Init+0x168>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <HAL_DMA_Init+0x168>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6859      	ldr	r1, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	f003 031c 	and.w	r3, r3, #28
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	491d      	ldr	r1, [pc, #116]	@ (8001060 <HAL_DMA_Init+0x168>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
 8000fee:	e019      	b.n	8001024 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <HAL_DMA_Init+0x16c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff8:	f003 031c 	and.w	r3, r3, #28
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	4917      	ldr	r1, [pc, #92]	@ (8001064 <HAL_DMA_Init+0x16c>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_DMA_Init+0x16c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6859      	ldr	r1, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f003 031c 	and.w	r3, r3, #28
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	4911      	ldr	r1, [pc, #68]	@ (8001064 <HAL_DMA_Init+0x16c>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40020407 	.word	0x40020407
 800104c:	bffdfff8 	.word	0xbffdfff8
 8001050:	cccccccd 	.word	0xcccccccd
 8001054:	40020000 	.word	0x40020000
 8001058:	bffdfbf8 	.word	0xbffdfbf8
 800105c:	40020400 	.word	0x40020400
 8001060:	400200a8 	.word	0x400200a8
 8001064:	400204a8 	.word	0x400204a8

08001068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_DMA_Start_IT+0x20>
 8001084:	2302      	movs	r3, #2
 8001086:	e04b      	b.n	8001120 <HAL_DMA_Start_IT+0xb8>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d13a      	bne.n	8001112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f95f 	bl	8001384 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 020e 	orr.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e00f      	b.n	8001100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0204 	bic.w	r2, r2, #4
 80010ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 020a 	orr.w	r2, r2, #10
 80010fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e005      	b.n	800111e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800111a:	2302      	movs	r3, #2
 800111c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d008      	beq.n	8001152 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2204      	movs	r2, #4
 8001144:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e022      	b.n	8001198 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 020e 	bic.w	r2, r2, #14
 8001160:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f003 021c 	and.w	r2, r3, #28
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d005      	beq.n	80011c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2204      	movs	r2, #4
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	e029      	b.n	800121c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 020e 	bic.w	r2, r2, #14
 80011d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0201 	bic.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ec:	f003 021c 	and.w	r2, r3, #28
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
    }
  }
  return status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f003 031c 	and.w	r3, r3, #28
 8001246:	2204      	movs	r2, #4
 8001248:	409a      	lsls	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d026      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x7a>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d021      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0320 	and.w	r3, r3, #32
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0204 	bic.w	r2, r2, #4
 8001278:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f003 021c 	and.w	r2, r3, #28
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	2104      	movs	r1, #4
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	2b00      	cmp	r3, #0
 8001294:	d071      	beq.n	800137a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800129e:	e06c      	b.n	800137a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a4:	f003 031c 	and.w	r3, r3, #28
 80012a8:	2202      	movs	r2, #2
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d02e      	beq.n	8001312 <HAL_DMA_IRQHandler+0xec>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d029      	beq.n	8001312 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10b      	bne.n	80012e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 020a 	bic.w	r2, r2, #10
 80012da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e8:	f003 021c 	and.w	r2, r3, #28
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	2102      	movs	r1, #2
 80012f2:	fa01 f202 	lsl.w	r2, r1, r2
 80012f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001304:	2b00      	cmp	r3, #0
 8001306:	d038      	beq.n	800137a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001310:	e033      	b.n	800137a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f003 031c 	and.w	r3, r3, #28
 800131a:	2208      	movs	r2, #8
 800131c:	409a      	lsls	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d02a      	beq.n	800137c <HAL_DMA_IRQHandler+0x156>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d025      	beq.n	800137c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020e 	bic.w	r2, r2, #14
 800133e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001344:	f003 021c 	and.w	r2, r3, #28
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800137a:	bf00      	nop
 800137c:	bf00      	nop
}
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f003 021c 	and.w	r2, r3, #28
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d108      	bne.n	80013c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013c6:	e007      	b.n	80013d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	60da      	str	r2, [r3, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e17f      	b.n	80016f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8171 	beq.w	80016ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x40>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 0201 	and.w	r2, r3, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b03      	cmp	r3, #3
 8001490:	d118      	bne.n	80014c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	6939      	ldr	r1, [r7, #16]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80ac 	beq.w	80016ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <HAL_GPIO_Init+0x330>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	4a5e      	ldr	r2, [pc, #376]	@ (8001714 <HAL_GPIO_Init+0x330>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001714 <HAL_GPIO_Init+0x330>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001718 <HAL_GPIO_Init+0x334>)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x242>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4f      	ldr	r2, [pc, #316]	@ (800171c <HAL_GPIO_Init+0x338>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x23e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001720 <HAL_GPIO_Init+0x33c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x23a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001724 <HAL_GPIO_Init+0x340>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x236>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <HAL_GPIO_Init+0x344>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x232>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	@ (800172c <HAL_GPIO_Init+0x348>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x22e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4a      	ldr	r2, [pc, #296]	@ (8001730 <HAL_GPIO_Init+0x34c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x22a>
 800160a:	2306      	movs	r3, #6
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x244>
 800160e:	2307      	movs	r3, #7
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x244>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x244>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x244>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x244>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x244>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x244>
 8001626:	2300      	movs	r3, #0
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001638:	4937      	ldr	r1, [pc, #220]	@ (8001718 <HAL_GPIO_Init+0x334>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001646:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <HAL_GPIO_Init+0x350>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800166a:	4a32      	ldr	r2, [pc, #200]	@ (8001734 <HAL_GPIO_Init+0x350>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001670:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <HAL_GPIO_Init+0x350>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001694:	4a27      	ldr	r2, [pc, #156]	@ (8001734 <HAL_GPIO_Init+0x350>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <HAL_GPIO_Init+0x350>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016be:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <HAL_GPIO_Init+0x350>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_GPIO_Init+0x350>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e8:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <HAL_GPIO_Init+0x350>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f47f ae78 	bne.w	80013f4 <HAL_GPIO_Init+0x10>
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	48000c00 	.word	0x48000c00
 8001728:	48001000 	.word	0x48001000
 800172c:	48001400 	.word	0x48001400
 8001730:	48001800 	.word	0x48001800
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <HAL_PWREx_GetVoltageRange+0x18>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40007000 	.word	0x40007000

08001784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001792:	d130      	bne.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001794:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800179c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017a0:	d038      	beq.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2232      	movs	r2, #50	@ 0x32
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
 80017bc:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	0c9b      	lsrs	r3, r3, #18
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c8:	e002      	b.n	80017d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017dc:	d102      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f2      	bne.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f0:	d110      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e00f      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001802:	d007      	beq.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800180c:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001812:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40007000 	.word	0x40007000
 8001828:	2000000c 	.word	0x2000000c
 800182c:	431bde83 	.word	0x431bde83

08001830 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e3ca      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001842:	4b97      	ldr	r3, [pc, #604]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184c:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80e4 	beq.w	8001a2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_RCC_OscConfig+0x4a>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	f040 808b 	bne.w	8001988 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 8087 	bne.w	8001988 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187a:	4b89      	ldr	r3, [pc, #548]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x62>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e3a2      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1a      	ldr	r2, [r3, #32]
 8001896:	4b82      	ldr	r3, [pc, #520]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_RCC_OscConfig+0x7c>
 80018a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018aa:	e005      	b.n	80018b8 <HAL_RCC_OscConfig+0x88>
 80018ac:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d223      	bcs.n	8001904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd55 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e383      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d0:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a72      	ldr	r2, [pc, #456]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b70      	ldr	r3, [pc, #448]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	496d      	ldr	r1, [pc, #436]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4968      	ldr	r1, [pc, #416]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e025      	b.n	8001950 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001904:	4b66      	ldr	r3, [pc, #408]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a65      	ldr	r2, [pc, #404]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4960      	ldr	r1, [pc, #384]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	495b      	ldr	r1, [pc, #364]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd15 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e343      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001950:	f000 fc4a 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b52      	ldr	r3, [pc, #328]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	4950      	ldr	r1, [pc, #320]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	4a4e      	ldr	r2, [pc, #312]	@ (8001aa8 <HAL_RCC_OscConfig+0x278>)
 800196e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001970:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <HAL_RCC_OscConfig+0x27c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f951 	bl	8000c1c <HAL_InitTick>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d052      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	e327      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d032      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001990:	4b43      	ldr	r3, [pc, #268]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a42      	ldr	r2, [pc, #264]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800199c:	f7ff f98e 	bl	8000cbc <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a4:	f7ff f98a 	bl	8000cbc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e310      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b6:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c2:	4b37      	ldr	r3, [pc, #220]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a36      	ldr	r2, [pc, #216]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b34      	ldr	r3, [pc, #208]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4931      	ldr	r1, [pc, #196]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e0:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	492c      	ldr	r1, [pc, #176]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e01a      	b.n	8001a2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019f6:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a29      	ldr	r2, [pc, #164]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f95b 	bl	8000cbc <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f957 	bl	8000cbc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e2dd      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a1c:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x1da>
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d074      	beq.n	8001b22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x21a>
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d10e      	bne.n	8001a62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d10b      	bne.n	8001a62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d064      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d160      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e2ba      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x24a>
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e026      	b.n	8001ac8 <HAL_RCC_OscConfig+0x298>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a82:	d115      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x280>
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a02      	ldr	r2, [pc, #8]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x298>
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08004c4c 	.word	0x08004c4c
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b9d      	ldr	r3, [pc, #628]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f8f4 	bl	8000cbc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f8f0 	bl	8000cbc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e276      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aea:	4b92      	ldr	r3, [pc, #584]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2a8>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f8e0 	bl	8000cbc <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff f8dc 	bl	8000cbc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	@ 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e262      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b12:	4b88      	ldr	r3, [pc, #544]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2d0>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d060      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x310>
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d119      	bne.n	8001b6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d116      	bne.n	8001b6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b40:	4b7c      	ldr	r3, [pc, #496]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_OscConfig+0x328>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e23f      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b76      	ldr	r3, [pc, #472]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	4973      	ldr	r1, [pc, #460]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6c:	e040      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d023      	beq.n	8001bbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b76:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff f89b 	bl	8000cbc <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f897 	bl	8000cbc <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e21d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b65      	ldr	r3, [pc, #404]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b62      	ldr	r3, [pc, #392]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	495f      	ldr	r1, [pc, #380]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e018      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f877 	bl	8000cbc <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f873 	bl	8000cbc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1f9      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be4:	4b53      	ldr	r3, [pc, #332]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c04:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c0a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f852 	bl	8000cbc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f84e 	bl	8000cbc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1d4      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c2e:	4b41      	ldr	r3, [pc, #260]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ef      	beq.n	8001c1c <HAL_RCC_OscConfig+0x3ec>
 8001c3c:	e01b      	b.n	8001c76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c44:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f835 	bl	8000cbc <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c56:	f7ff f831 	bl	8000cbc <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1b7      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c68:	4b32      	ldr	r3, [pc, #200]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ef      	bne.n	8001c56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80a6 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c88:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10d      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cac:	2301      	movs	r3, #1
 8001cae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <HAL_RCC_OscConfig+0x508>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d118      	bne.n	8001cee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <HAL_RCC_OscConfig+0x508>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d38 <HAL_RCC_OscConfig+0x508>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fff8 	bl	8000cbc <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7fe fff4 	bl	8000cbc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e17a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_RCC_OscConfig+0x508>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4d8>
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d06:	e029      	b.n	8001d5c <HAL_RCC_OscConfig+0x52c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d115      	bne.n	8001d3c <HAL_RCC_OscConfig+0x50c>
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d16:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d26:	4a03      	ldr	r2, [pc, #12]	@ (8001d34 <HAL_RCC_OscConfig+0x504>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d30:	e014      	b.n	8001d5c <HAL_RCC_OscConfig+0x52c>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d42:	4a9b      	ldr	r2, [pc, #620]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d4c:	4b98      	ldr	r3, [pc, #608]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d52:	4a97      	ldr	r2, [pc, #604]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d016      	beq.n	8001d92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7fe ffaa 	bl	8000cbc <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7fe ffa6 	bl	8000cbc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e12a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d82:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ed      	beq.n	8001d6c <HAL_RCC_OscConfig+0x53c>
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7fe ff93 	bl	8000cbc <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7fe ff8f 	bl	8000cbc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e113      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db0:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ed      	bne.n	8001d9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dbe:	7ffb      	ldrb	r3, [r7, #31]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	4a79      	ldr	r2, [pc, #484]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80fe 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	f040 80d0 	bne.w	8001f84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001de4:	4b72      	ldr	r3, [pc, #456]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d130      	bne.n	8001e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	3b01      	subs	r3, #1
 8001e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d127      	bne.n	8001e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d11f      	bne.n	8001e5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e24:	2a07      	cmp	r2, #7
 8001e26:	bf14      	ite	ne
 8001e28:	2201      	movne	r2, #1
 8001e2a:	2200      	moveq	r2, #0
 8001e2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d113      	bne.n	8001e5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d06e      	beq.n	8001f38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d069      	beq.n	8001f34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e60:	4b53      	ldr	r3, [pc, #332]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e6c:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0ad      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e88:	f7fe ff18 	bl	8000cbc <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7fe ff14 	bl	8000cbc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e09a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea2:	4b43      	ldr	r3, [pc, #268]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eae:	4b40      	ldr	r3, [pc, #256]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <HAL_RCC_OscConfig+0x784>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ec8:	0212      	lsls	r2, r2, #8
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ed0:	0852      	lsrs	r2, r2, #1
 8001ed2:	3a01      	subs	r2, #1
 8001ed4:	0552      	lsls	r2, r2, #21
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001edc:	0852      	lsrs	r2, r2, #1
 8001ede:	3a01      	subs	r2, #1
 8001ee0:	0652      	lsls	r2, r2, #25
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ee8:	0912      	lsrs	r2, r2, #4
 8001eea:	0452      	lsls	r2, r2, #17
 8001eec:	430a      	orrs	r2, r1
 8001eee:	4930      	ldr	r1, [pc, #192]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f00:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f0c:	f7fe fed6 	bl	8000cbc <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe fed2 	bl	8000cbc <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e058      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f32:	e050      	b.n	8001fd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e04f      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d148      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a16      	ldr	r2, [pc, #88]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f5c:	f7fe feae 	bl	8000cbc <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe feaa 	bl	8000cbc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e030      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x734>
 8001f82:	e028      	b.n	8001fd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d023      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <HAL_RCC_OscConfig+0x780>)
 8001f90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fe91 	bl	8000cbc <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9c:	e00c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fe8d 	bl	8000cbc <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d905      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e013      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <HAL_RCC_OscConfig+0x7b0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ec      	bne.n	8001f9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_OscConfig+0x7b0>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4905      	ldr	r1, [pc, #20]	@ (8001fe0 <HAL_RCC_OscConfig+0x7b0>)
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCC_OscConfig+0x7b4>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60cb      	str	r3, [r1, #12]
 8001fd0:	e001      	b.n	8001fd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	feeefffc 	.word	0xfeeefffc

08001fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0e7      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b75      	ldr	r3, [pc, #468]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b72      	ldr	r3, [pc, #456]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4970      	ldr	r1, [pc, #448]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b6e      	ldr	r3, [pc, #440]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0cf      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4b66      	ldr	r3, [pc, #408]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b63      	ldr	r3, [pc, #396]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4960      	ldr	r1, [pc, #384]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04c      	beq.n	8002100 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	4b5a      	ldr	r3, [pc, #360]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d121      	bne.n	80020be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0a6      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002086:	4b54      	ldr	r3, [pc, #336]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d115      	bne.n	80020be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e09a      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209e:	4b4e      	ldr	r3, [pc, #312]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e08e      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ae:	4b4a      	ldr	r3, [pc, #296]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e086      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020be:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f023 0203 	bic.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4943      	ldr	r1, [pc, #268]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d0:	f7fe fdf4 	bl	8000cbc <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fdf0 	bl	8000cbc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e06e      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	4b3a      	ldr	r3, [pc, #232]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 020c 	and.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1eb      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002118:	429a      	cmp	r2, r3
 800211a:	d208      	bcs.n	800212e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	492b      	ldr	r1, [pc, #172]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d210      	bcs.n	800215e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 0207 	bic.w	r2, r3, #7
 8002144:	4923      	ldr	r1, [pc, #140]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214c:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <HAL_RCC_ClockConfig+0x1ec>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e036      	b.n	80021cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4918      	ldr	r1, [pc, #96]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4910      	ldr	r1, [pc, #64]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800219c:	f000 f824 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	490b      	ldr	r1, [pc, #44]	@ (80021dc <HAL_RCC_ClockConfig+0x1f4>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_RCC_ClockConfig+0x1f8>)
 80021ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1fc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fd2b 	bl	8000c1c <HAL_InitTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80021ca:	7afb      	ldrb	r3, [r7, #11]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08004c4c 	.word	0x08004c4c
 80021e0:	2000000c 	.word	0x2000000c
 80021e4:	20000010 	.word	0x20000010

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d121      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d11e      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800221c:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002228:	4b31      	ldr	r3, [pc, #196]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002244:	4a2b      	ldr	r2, [pc, #172]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d102      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002260:	4b25      	ldr	r3, [pc, #148]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e004      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d101      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800226c:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x114>)
 800226e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d134      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0xa6>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d003      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0xac>
 800228c:	e005      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800228e:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002290:	617b      	str	r3, [r7, #20]
      break;
 8002292:	e005      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002296:	617b      	str	r3, [r7, #20]
      break;
 8002298:	e002      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	617b      	str	r3, [r7, #20]
      break;
 800229e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a0:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	3301      	adds	r3, #1
 80022ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	fb03 f202 	mul.w	r2, r3, r2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	0e5b      	lsrs	r3, r3, #25
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	3301      	adds	r3, #1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022e0:	69bb      	ldr	r3, [r7, #24]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08004c64 	.word	0x08004c64
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4904      	ldr	r1, [pc, #16]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08004c5c 	.word	0x08004c5c

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002348:	f7ff ffda 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0adb      	lsrs	r3, r3, #11
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4904      	ldr	r1, [pc, #16]	@ (800236c <HAL_RCC_GetPCLK2Freq+0x28>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	08004c5c 	.word	0x08004c5c

08002370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800237c:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002388:	f7ff f9ee 	bl	8001768 <HAL_PWREx_GetVoltageRange>
 800238c:	6178      	str	r0, [r7, #20]
 800238e:	e014      	b.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002394:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	@ 0x58
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023a8:	f7ff f9de 	bl	8001768 <HAL_PWREx_GetVoltageRange>
 80023ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023c0:	d10b      	bne.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b80      	cmp	r3, #128	@ 0x80
 80023c6:	d919      	bls.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80023cc:	d902      	bls.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ce:	2302      	movs	r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e013      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d4:	2301      	movs	r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e010      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b80      	cmp	r3, #128	@ 0x80
 80023de:	d902      	bls.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023e0:	2303      	movs	r3, #3
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e00a      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b80      	cmp	r3, #128	@ 0x80
 80023ea:	d102      	bne.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	e004      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b70      	cmp	r3, #112	@ 0x70
 80023f6:	d101      	bne.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f8:	2301      	movs	r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0207 	bic.w	r2, r3, #7
 8002404:	4909      	ldr	r1, [pc, #36]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800240c:	4b07      	ldr	r3, [pc, #28]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	40022000 	.word	0x40022000

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002438:	2300      	movs	r3, #0
 800243a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800243c:	2300      	movs	r3, #0
 800243e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002448:	2b00      	cmp	r3, #0
 800244a:	d041      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002450:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002454:	d02a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002456:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800245a:	d824      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800245c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002466:	d81e      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800246c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002470:	d010      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002472:	e018      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002474:	4b86      	ldr	r3, [pc, #536]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a85      	ldr	r2, [pc, #532]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002480:	e015      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fabb 	bl	8002a04 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002492:	e00c      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3320      	adds	r3, #32
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fba6 	bl	8002bec <RCCEx_PLLSAI2_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a4:	e003      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	74fb      	strb	r3, [r7, #19]
      break;
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b4:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024c2:	4973      	ldr	r1, [pc, #460]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024ca:	e001      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d041      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024e4:	d02a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024ea:	d824      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024f6:	d81e      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002500:	d010      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002502:	e018      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002504:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a61      	ldr	r2, [pc, #388]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002510:	e015      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fa73 	bl	8002a04 <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002522:	e00c      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3320      	adds	r3, #32
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fb5e 	bl	8002bec <RCCEx_PLLSAI2_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002534:	e003      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	74fb      	strb	r3, [r7, #19]
      break;
 800253a:	e000      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800253c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002544:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002552:	494f      	ldr	r1, [pc, #316]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800255a:	e001      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a0 	beq.w	80026ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	4a40      	ldr	r2, [pc, #256]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002592:	6593      	str	r3, [r2, #88]	@ 0x58
 8002594:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fb84 	bl	8000cbc <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b6:	e009      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fb80 	bl	8000cbc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	74fb      	strb	r3, [r7, #19]
        break;
 80025ca:	e005      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025cc:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d15c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025de:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01f      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d019      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002606:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002608:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260e:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002618:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002628:	4a19      	ldr	r2, [pc, #100]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fb3f 	bl	8000cbc <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	e00b      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fb3b 	bl	8000cbc <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d902      	bls.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	74fb      	strb	r3, [r7, #19]
            break;
 8002658:	e006      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ec      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800267e:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002686:	e009      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7c7b      	ldrb	r3, [r7, #17]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b9e      	ldr	r3, [pc, #632]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4a9d      	ldr	r2, [pc, #628]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	4b98      	ldr	r3, [pc, #608]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	4994      	ldr	r1, [pc, #592]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026dc:	4b8f      	ldr	r3, [pc, #572]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f023 020c 	bic.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ea:	498c      	ldr	r1, [pc, #560]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fe:	4b87      	ldr	r3, [pc, #540]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	4983      	ldr	r1, [pc, #524]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002720:	4b7e      	ldr	r3, [pc, #504]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	497b      	ldr	r1, [pc, #492]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002742:	4b76      	ldr	r3, [pc, #472]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	4972      	ldr	r1, [pc, #456]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002764:	4b6d      	ldr	r3, [pc, #436]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	496a      	ldr	r1, [pc, #424]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	4961      	ldr	r1, [pc, #388]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a8:	4b5c      	ldr	r3, [pc, #368]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	4959      	ldr	r1, [pc, #356]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ca:	4b54      	ldr	r3, [pc, #336]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d8:	4950      	ldr	r1, [pc, #320]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ec:	4b4b      	ldr	r3, [pc, #300]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	4948      	ldr	r1, [pc, #288]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280e:	4b43      	ldr	r3, [pc, #268]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	493f      	ldr	r1, [pc, #252]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d028      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283e:	4937      	ldr	r1, [pc, #220]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800284e:	d106      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002850:	4b32      	ldr	r3, [pc, #200]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a31      	ldr	r2, [pc, #196]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285a:	60d3      	str	r3, [r2, #12]
 800285c:	e011      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002862:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002866:	d10c      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f8c8 	bl	8002a04 <RCCEx_PLLSAI1_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800288e:	4b23      	ldr	r3, [pc, #140]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002894:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	491f      	ldr	r1, [pc, #124]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ac:	d106      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ae:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a1a      	ldr	r2, [pc, #104]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028b8:	60d3      	str	r3, [r2, #12]
 80028ba:	e011      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f899 	bl	8002a04 <RCCEx_PLLSAI1_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02b      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800290a:	d109      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b03      	ldr	r3, [pc, #12]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a02      	ldr	r2, [pc, #8]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
 8002918:	e014      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002928:	d10c      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f867 	bl	8002a04 <RCCEx_PLLSAI1_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02f      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002950:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800295e:	4928      	ldr	r1, [pc, #160]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800296e:	d10d      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f844 	bl	8002a04 <RCCEx_PLLSAI1_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	74bb      	strb	r3, [r7, #18]
 800298a:	e011      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3320      	adds	r3, #32
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f925 	bl	8002bec <RCCEx_PLLSAI2_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029bc:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029ca:	490d      	ldr	r1, [pc, #52]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ee:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a12:	4b75      	ldr	r3, [pc, #468]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d018      	beq.n	8002a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a1e:	4b72      	ldr	r3, [pc, #456]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0203 	and.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
       ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a36:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
       ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d047      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e044      	b.n	8002ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d018      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0x86>
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d825      	bhi.n	8002aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d002      	beq.n	8002a66 <RCCEx_PLLSAI1_Config+0x62>
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d009      	beq.n	8002a78 <RCCEx_PLLSAI1_Config+0x74>
 8002a64:	e020      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a66:	4b60      	ldr	r3, [pc, #384]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11d      	bne.n	8002aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a76:	e01a      	b.n	8002aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a78:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e013      	b.n	8002ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a8a:	4b57      	ldr	r3, [pc, #348]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a96:	4b54      	ldr	r3, [pc, #336]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aa6:	e006      	b.n	8002ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e004      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e002      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002abe:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	4944      	ldr	r1, [pc, #272]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d17d      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ae0:	4b41      	ldr	r3, [pc, #260]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a40      	ldr	r2, [pc, #256]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aec:	f7fe f8e6 	bl	8000cbc <HAL_GetTick>
 8002af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af2:	e009      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af4:	f7fe f8e2 	bl	8000cbc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	73fb      	strb	r3, [r7, #15]
        break;
 8002b06:	e005      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b08:	4b37      	ldr	r3, [pc, #220]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ef      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d160      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d111      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b20:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6892      	ldr	r2, [r2, #8]
 8002b30:	0211      	lsls	r1, r2, #8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	0912      	lsrs	r2, r2, #4
 8002b38:	0452      	lsls	r2, r2, #17
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	492a      	ldr	r1, [pc, #168]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	610b      	str	r3, [r1, #16]
 8002b42:	e027      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d112      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b4a:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6892      	ldr	r2, [r2, #8]
 8002b5a:	0211      	lsls	r1, r2, #8
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6912      	ldr	r2, [r2, #16]
 8002b60:	0852      	lsrs	r2, r2, #1
 8002b62:	3a01      	subs	r2, #1
 8002b64:	0552      	lsls	r2, r2, #21
 8002b66:	430a      	orrs	r2, r1
 8002b68:	491f      	ldr	r1, [pc, #124]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	610b      	str	r3, [r1, #16]
 8002b6e:	e011      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6892      	ldr	r2, [r2, #8]
 8002b80:	0211      	lsls	r1, r2, #8
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6952      	ldr	r2, [r2, #20]
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0652      	lsls	r2, r2, #25
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	4916      	ldr	r1, [pc, #88]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f88c 	bl	8000cbc <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ba6:	e009      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba8:	f7fe f888 	bl	8000cbc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bba:	e005      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ef      	beq.n	8002ba8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	4904      	ldr	r1, [pc, #16]	@ (8002be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c06:	4b67      	ldr	r3, [pc, #412]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d10d      	bne.n	8002c32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
       ||
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c1e:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d047      	beq.n	8002cc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	e044      	b.n	8002cc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d018      	beq.n	8002c72 <RCCEx_PLLSAI2_Config+0x86>
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d825      	bhi.n	8002c90 <RCCEx_PLLSAI2_Config+0xa4>
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d002      	beq.n	8002c4e <RCCEx_PLLSAI2_Config+0x62>
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d009      	beq.n	8002c60 <RCCEx_PLLSAI2_Config+0x74>
 8002c4c:	e020      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c4e:	4b55      	ldr	r3, [pc, #340]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11d      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5e:	e01a      	b.n	8002c96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c60:	4b50      	ldr	r3, [pc, #320]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d116      	bne.n	8002c9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e013      	b.n	8002c9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c72:	4b4c      	ldr	r3, [pc, #304]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c8e:	e006      	b.n	8002c9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e004      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c96:	bf00      	nop
 8002c98:	e002      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	4939      	ldr	r1, [pc, #228]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d167      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cc8:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a35      	ldr	r2, [pc, #212]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fd fff2 	bl	8000cbc <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cda:	e009      	b.n	8002cf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cdc:	f7fd ffee 	bl	8000cbc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	73fb      	strb	r3, [r7, #15]
        break;
 8002cee:	e005      	b.n	8002cfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1ef      	bne.n	8002cdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d14a      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d08:	4b26      	ldr	r3, [pc, #152]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	0211      	lsls	r1, r2, #8
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68d2      	ldr	r2, [r2, #12]
 8002d1e:	0912      	lsrs	r2, r2, #4
 8002d20:	0452      	lsls	r2, r2, #17
 8002d22:	430a      	orrs	r2, r1
 8002d24:	491f      	ldr	r1, [pc, #124]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	614b      	str	r3, [r1, #20]
 8002d2a:	e011      	b.n	8002d50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	0211      	lsls	r1, r2, #8
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6912      	ldr	r2, [r2, #16]
 8002d42:	0852      	lsrs	r2, r2, #1
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0652      	lsls	r2, r2, #25
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4916      	ldr	r1, [pc, #88]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a13      	ldr	r2, [pc, #76]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fd ffae 	bl	8000cbc <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d62:	e009      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d64:	f7fd ffaa 	bl	8000cbc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d902      	bls.n	8002d78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73fb      	strb	r3, [r7, #15]
          break;
 8002d76:	e005      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ef      	beq.n	8002d64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000

08002da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e095      	b.n	8002ee6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dca:	d009      	beq.n	8002de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
 8002dd2:	e005      	b.n	8002de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fd50 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e20:	d902      	bls.n	8002e28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	e002      	b.n	8002e2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e36:	d007      	beq.n	8002e48 <HAL_SPI_Init+0xa0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	ea42 0103 	orr.w	r1, r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	0c1b      	lsrs	r3, r3, #16
 8002ea4:	f003 0204 	and.w	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ec4:	ea42 0103 	orr.w	r1, r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f04:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d00c      	beq.n	8002f2c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f18:	d106      	bne.n	8002f28 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_SPI_TransmitReceive_DMA+0x38>
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d001      	beq.n	8002f2c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e158      	b.n	80031de <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e14d      	b.n	80031de <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e146      	b.n	80031de <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d003      	beq.n	8002f6c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2205      	movs	r2, #5
 8002f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	887a      	ldrh	r2, [r7, #2]
 8002f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002fb4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fbe:	d908      	bls.n	8002fd2 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	e06f      	b.n	80030b2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fe0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fec:	d126      	bne.n	800303c <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003008:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003018:	e010      	b.n	800303c <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003028:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	b29b      	uxth	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003046:	d134      	bne.n	80030b2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003056:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800305e:	b29b      	uxth	r3, r3
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d111      	bne.n	800308c <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003076:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800307e:	b29b      	uxth	r3, r3
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800308a:	e012      	b.n	80030b2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800309a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d108      	bne.n	80030d0 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	4a49      	ldr	r2, [pc, #292]	@ (80031e8 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	4a48      	ldr	r2, [pc, #288]	@ (80031ec <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030ce:	e007      	b.n	80030e0 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	4a46      	ldr	r2, [pc, #280]	@ (80031f0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	4a45      	ldr	r2, [pc, #276]	@ (80031f4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	4a44      	ldr	r2, [pc, #272]	@ (80031f8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80030e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	2200      	movs	r2, #0
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	4619      	mov	r1, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003108:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800310a:	f7fd ffad 	bl	8001068 <HAL_DMA_Start_IT>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003118:	f043 0210 	orr.w	r2, r3, #16
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e058      	b.n	80031de <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003148:	2200      	movs	r2, #0
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003150:	2200      	movs	r2, #0
 8003152:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	2200      	movs	r2, #0
 800315a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	4619      	mov	r1, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003172:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003174:	f7fd ff78 	bl	8001068 <HAL_DMA_Start_IT>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e023      	b.n	80031de <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d007      	beq.n	80031b4 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0220 	orr.w	r2, r2, #32
 80031ca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0202 	orr.w	r2, r2, #2
 80031da:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	08003585 	.word	0x08003585
 80031ec:	0800344d 	.word	0x0800344d
 80031f0:	080035a1 	.word	0x080035a1
 80031f4:	080034f5 	.word	0x080034f5
 80031f8:	080035bd 	.word	0x080035bd

080031fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10f      	bne.n	8003240 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
    return;
 800323e:	e0d7      	b.n	80033f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_SPI_IRQHandler+0x66>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	09db      	lsrs	r3, r3, #7
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
    return;
 8003260:	e0c6      	b.n	80033f0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_SPI_IRQHandler+0x8c>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80b4 	beq.w	80033f0 <HAL_SPI_IRQHandler+0x1f4>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80ad 	beq.w	80033f0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d023      	beq.n	80032ea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d011      	beq.n	80032d2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	f043 0204 	orr.w	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	e00b      	b.n	80032ea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
        return;
 80032e8:	e082      	b.n	80033f0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d014      	beq.n	8003320 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003330:	f043 0208 	orr.w	r2, r3, #8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04f      	beq.n	80033ee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800335c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <HAL_SPI_IRQHandler+0x17e>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d034      	beq.n	80033e4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0203 	bic.w	r2, r2, #3
 8003388:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	2b00      	cmp	r3, #0
 8003390:	d011      	beq.n	80033b6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_SPI_IRQHandler+0x1fc>)
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd ff00 	bl	80011a4 <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <HAL_SPI_IRQHandler+0x1fc>)
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd feea 	bl	80011a4 <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80033e2:	e003      	b.n	80033ec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f827 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033ea:	e000      	b.n	80033ee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80033ec:	bf00      	nop
    return;
 80033ee:	bf00      	nop
  }
}
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	080035fd 	.word	0x080035fd

080033fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800345a:	f7fd fc2f 	bl	8000cbc <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b20      	cmp	r3, #32
 800346c:	d03c      	beq.n	80034e8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0220 	bic.w	r2, r2, #32
 800347c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <SPI_DMAReceiveCplt+0x56>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d108      	bne.n	80034a2 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0203 	bic.w	r2, r2, #3
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	e007      	b.n	80034b2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	2164      	movs	r1, #100	@ 0x64
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f9d4 	bl	8003864 <SPI_EndRxTransaction>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff ffa9 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80034e6:	e002      	b.n	80034ee <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff ff87 	bl	80033fc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003502:	f7fd fbdb 	bl	8000cbc <HAL_GetTick>
 8003506:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b20      	cmp	r3, #32
 8003514:	d030      	beq.n	8003578 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0220 	bic.w	r2, r2, #32
 8003524:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	2164      	movs	r1, #100	@ 0x64
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f9f2 	bl	8003914 <SPI_EndRxTxTransaction>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0203 	bic.w	r2, r2, #3
 8003550:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff ff61 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003576:	e002      	b.n	800357e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7fc ffbb 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f7ff ff3c 	bl	8003410 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff ff38 	bl	8003424 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0203 	bic.w	r2, r2, #3
 80035d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035de:	f043 0210 	orr.w	r2, r3, #16
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff22 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff ff0d 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003638:	f7fd fb40 	bl	8000cbc <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	4413      	add	r3, r2
 8003646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003648:	f7fd fb38 	bl	8000cbc <HAL_GetTick>
 800364c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800364e:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	015b      	lsls	r3, r3, #5
 8003654:	0d1b      	lsrs	r3, r3, #20
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800365e:	e054      	b.n	800370a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003666:	d050      	beq.n	800370a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003668:	f7fd fb28 	bl	8000cbc <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	d902      	bls.n	800367e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d13d      	bne.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800368c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003696:	d111      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a0:	d004      	beq.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036aa:	d107      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c4:	d10f      	bne.n	80036e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e017      	b.n	800372a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3b01      	subs	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	429a      	cmp	r2, r3
 8003726:	d19b      	bne.n	8003660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000000c 	.word	0x2000000c

08003738 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800374a:	f7fd fab7 	bl	8000cbc <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	4413      	add	r3, r2
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800375a:	f7fd faaf 	bl	8000cbc <HAL_GetTick>
 800375e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003768:	4b3d      	ldr	r3, [pc, #244]	@ (8003860 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00da      	lsls	r2, r3, #3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	0d1b      	lsrs	r3, r3, #20
 8003778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003780:	e060      	b.n	8003844 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003788:	d107      	bne.n	800379a <SPI_WaitFifoStateUntilTimeout+0x62>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003798:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d050      	beq.n	8003844 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a2:	f7fd fa8b 	bl	8000cbc <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d902      	bls.n	80037b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d13d      	bne.n	8003834 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d0:	d111      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037da:	d004      	beq.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e4:	d107      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037fe:	d10f      	bne.n	8003820 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800381e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e010      	b.n	8003856 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	3b01      	subs	r3, #1
 8003842:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d196      	bne.n	8003782 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3728      	adds	r7, #40	@ 0x28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2000000c 	.word	0x2000000c

08003864 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003878:	d111      	bne.n	800389e <SPI_EndRxTransaction+0x3a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003882:	d004      	beq.n	800388e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388c:	d107      	bne.n	800389e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2180      	movs	r1, #128	@ 0x80
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff febd 	bl	8003628 <SPI_WaitFlagStateUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e023      	b.n	800390c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038cc:	d11d      	bne.n	800390a <SPI_EndRxTransaction+0xa6>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d6:	d004      	beq.n	80038e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e0:	d113      	bne.n	800390a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff ff22 	bl	8003738 <SPI_WaitFifoStateUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e000      	b.n	800390c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff ff03 	bl	8003738 <SPI_WaitFifoStateUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e027      	b.n	8003998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fe68 	bl	8003628 <SPI_WaitFlagStateUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e014      	b.n	8003998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff fedc 	bl	8003738 <SPI_WaitFifoStateUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e000      	b.n	8003998 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e040      	b.n	8003a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd f812 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2224      	movs	r2, #36	@ 0x24
 80039cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fe90 	bl	800470c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fbd5 	bl	800419c <UART_SetConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e01b      	b.n	8003a34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 ff0f 	bl	8004850 <UART_CheckIdleState>
 8003a32:	4603      	mov	r3, r0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d177      	bne.n	8003b44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_UART_Transmit+0x24>
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e070      	b.n	8003b46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	@ 0x21
 8003a70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a72:	f7fd f923 	bl	8000cbc <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	88fa      	ldrh	r2, [r7, #6]
 8003a84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a90:	d108      	bne.n	8003aa4 <HAL_UART_Transmit+0x68>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aac:	e02f      	b.n	8003b0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	@ 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 ff71 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e03b      	b.n	8003b46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e007      	b.n	8003afc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1c9      	bne.n	8003aae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2140      	movs	r1, #64	@ 0x40
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 ff3b 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e005      	b.n	8003b46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0ba      	sub	sp, #232	@ 0xe8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b7e:	4013      	ands	r3, r2
 8003b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d115      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 82ca 	beq.w	8004142 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
      }
      return;
 8003bb6:	e2c4      	b.n	8004142 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8117 	beq.w	8003df0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003bd2:	4b85      	ldr	r3, [pc, #532]	@ (8003de8 <HAL_UART_IRQHandler+0x298>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 810a 	beq.w	8003df0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d011      	beq.n	8003c0c <HAL_UART_IRQHandler+0xbc>
 8003be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d011      	beq.n	8003c3c <HAL_UART_IRQHandler+0xec>
 8003c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d011      	beq.n	8003c6c <HAL_UART_IRQHandler+0x11c>
 8003c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2204      	movs	r2, #4
 8003c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2208      	movs	r2, #8
 8003c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9e:	f043 0208 	orr.w	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <HAL_UART_IRQHandler+0x18a>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8230 	beq.w	8004146 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d22:	2b40      	cmp	r3, #64	@ 0x40
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d04f      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fea1 	bl	8004a7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b40      	cmp	r3, #64	@ 0x40
 8003d44:	d141      	bne.n	8003dca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1d9      	bne.n	8003d46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9e:	4a13      	ldr	r2, [pc, #76]	@ (8003dec <HAL_UART_IRQHandler+0x29c>)
 8003da0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd f9fc 	bl	80011a4 <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00f      	b.n	8003de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f9d4 	bl	8004170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00b      	b.n	8003de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9d0 	bl	8004170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e007      	b.n	8003de2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9cc 	bl	8004170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003de0:	e1b1      	b.n	8004146 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de2:	bf00      	nop
    return;
 8003de4:	e1af      	b.n	8004146 <HAL_UART_IRQHandler+0x5f6>
 8003de6:	bf00      	nop
 8003de8:	04000120 	.word	0x04000120
 8003dec:	08004b43 	.word	0x08004b43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 816a 	bne.w	80040ce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8163 	beq.w	80040ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 815c 	beq.w	80040ce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	f040 80d4 	bne.w	8003fd6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80ad 	beq.w	8003f9e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f080 80a5 	bcs.w	8003f9e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 8086 	bne.w	8003f7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1da      	bne.n	8003e70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ede:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e1      	bne.n	8003eba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f4c:	f023 0310 	bic.w	r3, r3, #16
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e4      	bne.n	8003f3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd f8d6 	bl	8001128 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8f4 	bl	8004184 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f9c:	e0d5      	b.n	800414a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	f040 80ce 	bne.w	800414a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	f040 80c5 	bne.w	800414a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8d8 	bl	8004184 <HAL_UARTEx_RxEventCallback>
      return;
 8003fd4:	e0b9      	b.n	800414a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80ab 	beq.w	800414e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a6 	beq.w	800414e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004016:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004024:	647b      	str	r3, [r7, #68]	@ 0x44
 8004026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800402a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e4      	bne.n	8004002 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	623b      	str	r3, [r7, #32]
   return(result);
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800405c:	633a      	str	r2, [r7, #48]	@ 0x30
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	60fb      	str	r3, [r7, #12]
   return(result);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	69b9      	ldr	r1, [r7, #24]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	617b      	str	r3, [r7, #20]
   return(result);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e4      	bne.n	8004084 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f85c 	bl	8004184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040cc:	e03f      	b.n	800414e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00e      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5a8>
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fd66 	bl	8004bc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040f6:	e02d      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01c      	beq.n	8004152 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
    }
    return;
 8004120:	e017      	b.n	8004152 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <HAL_UART_IRQHandler+0x604>
 800412e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd17 	bl	8004b6e <UART_EndTransmit_IT>
    return;
 8004140:	e008      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
      return;
 8004142:	bf00      	nop
 8004144:	e006      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
    return;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
      return;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
      return;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_UART_IRQHandler+0x604>
    return;
 8004152:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004154:	37e8      	adds	r7, #232	@ 0xe8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop

0800415c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b08a      	sub	sp, #40	@ 0x28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4ba4      	ldr	r3, [pc, #656]	@ (800445c <UART_SetConfig+0x2c0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a99      	ldr	r2, [pc, #612]	@ (8004460 <UART_SetConfig+0x2c4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	4313      	orrs	r3, r2
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a90      	ldr	r2, [pc, #576]	@ (8004464 <UART_SetConfig+0x2c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d126      	bne.n	8004274 <UART_SetConfig+0xd8>
 8004226:	4b90      	ldr	r3, [pc, #576]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b03      	cmp	r3, #3
 8004232:	d81b      	bhi.n	800426c <UART_SetConfig+0xd0>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0xa0>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425d 	.word	0x0800425d
 8004244:	08004255 	.word	0x08004255
 8004248:	08004265 	.word	0x08004265
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004252:	e116      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004254:	2302      	movs	r3, #2
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425a:	e112      	b.n	8004482 <UART_SetConfig+0x2e6>
 800425c:	2304      	movs	r3, #4
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004262:	e10e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004264:	2308      	movs	r3, #8
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e10a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800426c:	2310      	movs	r3, #16
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004272:	e106      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <UART_SetConfig+0x2d0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d138      	bne.n	80042f0 <UART_SetConfig+0x154>
 800427e:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d82d      	bhi.n	80042e8 <UART_SetConfig+0x14c>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <UART_SetConfig+0xf8>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042e9 	.word	0x080042e9
 80042a0:	080042e9 	.word	0x080042e9
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042e9 	.word	0x080042e9
 80042b0:	080042e9 	.word	0x080042e9
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	080042e9 	.word	0x080042e9
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ce:	e0d8      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042d0:	2302      	movs	r3, #2
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e0d4      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042d8:	2304      	movs	r3, #4
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e0d0      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042e0:	2308      	movs	r3, #8
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e6:	e0cc      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ee:	e0c8      	b.n	8004482 <UART_SetConfig+0x2e6>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004470 <UART_SetConfig+0x2d4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d125      	bne.n	8004346 <UART_SetConfig+0x1aa>
 80042fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004468 <UART_SetConfig+0x2cc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d016      	beq.n	8004336 <UART_SetConfig+0x19a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d818      	bhi.n	800433e <UART_SetConfig+0x1a2>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d00a      	beq.n	8004326 <UART_SetConfig+0x18a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d814      	bhi.n	800433e <UART_SetConfig+0x1a2>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <UART_SetConfig+0x182>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d008      	beq.n	800432e <UART_SetConfig+0x192>
 800431c:	e00f      	b.n	800433e <UART_SetConfig+0x1a2>
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004324:	e0ad      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004326:	2302      	movs	r3, #2
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432c:	e0a9      	b.n	8004482 <UART_SetConfig+0x2e6>
 800432e:	2304      	movs	r3, #4
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004334:	e0a5      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004336:	2308      	movs	r3, #8
 8004338:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433c:	e0a1      	b.n	8004482 <UART_SetConfig+0x2e6>
 800433e:	2310      	movs	r3, #16
 8004340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004344:	e09d      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4a      	ldr	r2, [pc, #296]	@ (8004474 <UART_SetConfig+0x2d8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d125      	bne.n	800439c <UART_SetConfig+0x200>
 8004350:	4b45      	ldr	r3, [pc, #276]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800435a:	2bc0      	cmp	r3, #192	@ 0xc0
 800435c:	d016      	beq.n	800438c <UART_SetConfig+0x1f0>
 800435e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004360:	d818      	bhi.n	8004394 <UART_SetConfig+0x1f8>
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d00a      	beq.n	800437c <UART_SetConfig+0x1e0>
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d814      	bhi.n	8004394 <UART_SetConfig+0x1f8>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <UART_SetConfig+0x1d8>
 800436e:	2b40      	cmp	r3, #64	@ 0x40
 8004370:	d008      	beq.n	8004384 <UART_SetConfig+0x1e8>
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x1f8>
 8004374:	2300      	movs	r3, #0
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e082      	b.n	8004482 <UART_SetConfig+0x2e6>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e07e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e07a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e076      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e072      	b.n	8004482 <UART_SetConfig+0x2e6>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a35      	ldr	r2, [pc, #212]	@ (8004478 <UART_SetConfig+0x2dc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d12a      	bne.n	80043fc <UART_SetConfig+0x260>
 80043a6:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <UART_SetConfig+0x2cc>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b4:	d01a      	beq.n	80043ec <UART_SetConfig+0x250>
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ba:	d81b      	bhi.n	80043f4 <UART_SetConfig+0x258>
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d00c      	beq.n	80043dc <UART_SetConfig+0x240>
 80043c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c6:	d815      	bhi.n	80043f4 <UART_SetConfig+0x258>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <UART_SetConfig+0x238>
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d0:	d008      	beq.n	80043e4 <UART_SetConfig+0x248>
 80043d2:	e00f      	b.n	80043f4 <UART_SetConfig+0x258>
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e052      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043dc:	2302      	movs	r3, #2
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e04e      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043e4:	2304      	movs	r3, #4
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e04a      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043ec:	2308      	movs	r3, #8
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e046      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043f4:	2310      	movs	r3, #16
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e042      	b.n	8004482 <UART_SetConfig+0x2e6>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <UART_SetConfig+0x2c4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d13a      	bne.n	800447c <UART_SetConfig+0x2e0>
 8004406:	4b18      	ldr	r3, [pc, #96]	@ (8004468 <UART_SetConfig+0x2cc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004410:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004414:	d01a      	beq.n	800444c <UART_SetConfig+0x2b0>
 8004416:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800441a:	d81b      	bhi.n	8004454 <UART_SetConfig+0x2b8>
 800441c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004420:	d00c      	beq.n	800443c <UART_SetConfig+0x2a0>
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004426:	d815      	bhi.n	8004454 <UART_SetConfig+0x2b8>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <UART_SetConfig+0x298>
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d008      	beq.n	8004444 <UART_SetConfig+0x2a8>
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x2b8>
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e022      	b.n	8004482 <UART_SetConfig+0x2e6>
 800443c:	2302      	movs	r3, #2
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e01e      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004444:	2304      	movs	r3, #4
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e01a      	b.n	8004482 <UART_SetConfig+0x2e6>
 800444c:	2308      	movs	r3, #8
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e016      	b.n	8004482 <UART_SetConfig+0x2e6>
 8004454:	2310      	movs	r3, #16
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e012      	b.n	8004482 <UART_SetConfig+0x2e6>
 800445c:	efff69f3 	.word	0xefff69f3
 8004460:	40008000 	.word	0x40008000
 8004464:	40013800 	.word	0x40013800
 8004468:	40021000 	.word	0x40021000
 800446c:	40004400 	.word	0x40004400
 8004470:	40004800 	.word	0x40004800
 8004474:	40004c00 	.word	0x40004c00
 8004478:	40005000 	.word	0x40005000
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a9f      	ldr	r2, [pc, #636]	@ (8004704 <UART_SetConfig+0x568>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d17a      	bne.n	8004582 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004490:	2b08      	cmp	r3, #8
 8004492:	d824      	bhi.n	80044de <UART_SetConfig+0x342>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <UART_SetConfig+0x300>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044cf 	.word	0x080044cf
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044df 	.word	0x080044df
 80044b8:	080044df 	.word	0x080044df
 80044bc:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fd ff2a 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80044c4:	61f8      	str	r0, [r7, #28]
        break;
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004708 <UART_SetConfig+0x56c>)
 80044ca:	61fb      	str	r3, [r7, #28]
        break;
 80044cc:	e00d      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fd fe8b 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80044d2:	61f8      	str	r0, [r7, #28]
        break;
 80044d4:	e009      	b.n	80044ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e005      	b.n	80044ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80fb 	beq.w	80046e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d305      	bcc.n	800450e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004514:	e0e8      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	2200      	movs	r2, #0
 800451a:	461c      	mov	r4, r3
 800451c:	4615      	mov	r5, r2
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	022b      	lsls	r3, r5, #8
 8004528:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800452c:	0222      	lsls	r2, r4, #8
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	6849      	ldr	r1, [r1, #4]
 8004532:	0849      	lsrs	r1, r1, #1
 8004534:	2000      	movs	r0, #0
 8004536:	4688      	mov	r8, r1
 8004538:	4681      	mov	r9, r0
 800453a:	eb12 0a08 	adds.w	sl, r2, r8
 800453e:	eb43 0b09 	adc.w	fp, r3, r9
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004550:	4650      	mov	r0, sl
 8004552:	4659      	mov	r1, fp
 8004554:	f7fb fe38 	bl	80001c8 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004566:	d308      	bcc.n	800457a <UART_SetConfig+0x3de>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456e:	d204      	bcs.n	800457a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e0b6      	b.n	80046e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004580:	e0b2      	b.n	80046e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800458a:	d15e      	bne.n	800464a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800458c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004590:	2b08      	cmp	r3, #8
 8004592:	d828      	bhi.n	80045e6 <UART_SetConfig+0x44a>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <UART_SetConfig+0x400>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fd feaa 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80045c4:	61f8      	str	r0, [r7, #28]
        break;
 80045c6:	e014      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fd febc 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 80045cc:	61f8      	str	r0, [r7, #28]
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004708 <UART_SetConfig+0x56c>)
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fd fe07 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80045da:	61f8      	str	r0, [r7, #28]
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d077      	beq.n	80046e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005a      	lsls	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b0f      	cmp	r3, #15
 8004612:	d916      	bls.n	8004642 <UART_SetConfig+0x4a6>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d212      	bcs.n	8004642 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f023 030f 	bic.w	r3, r3, #15
 8004624:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	b29b      	uxth	r3, r3
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	b29a      	uxth	r2, r3
 8004632:	8afb      	ldrh	r3, [r7, #22]
 8004634:	4313      	orrs	r3, r2
 8004636:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	8afa      	ldrh	r2, [r7, #22]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	e052      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004648:	e04e      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800464e:	2b08      	cmp	r3, #8
 8004650:	d827      	bhi.n	80046a2 <UART_SetConfig+0x506>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <UART_SetConfig+0x4bc>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	080046a3 	.word	0x080046a3
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a3 	.word	0x080046a3
 8004670:	080046a3 	.word	0x080046a3
 8004674:	080046a3 	.word	0x080046a3
 8004678:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fd fe4c 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8004680:	61f8      	str	r0, [r7, #28]
        break;
 8004682:	e014      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7fd fe5e 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8004688:	61f8      	str	r0, [r7, #28]
        break;
 800468a:	e010      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <UART_SetConfig+0x56c>)
 800468e:	61fb      	str	r3, [r7, #28]
        break;
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7fd fda9 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8004696:	61f8      	str	r0, [r7, #28]
        break;
 8004698:	e009      	b.n	80046ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e005      	b.n	80046ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046ac:	bf00      	nop
    }

    if (pclk != 0U)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d019      	beq.n	80046e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	085a      	lsrs	r2, r3, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	441a      	add	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	d909      	bls.n	80046e2 <UART_SetConfig+0x546>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d205      	bcs.n	80046e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e002      	b.n	80046e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004702:	bf00      	nop
 8004704:	40008000 	.word	0x40008000
 8004708:	00f42400 	.word	0x00f42400

0800470c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01a      	beq.n	8004822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800480a:	d10a      	bne.n	8004822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b098      	sub	sp, #96	@ 0x60
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004860:	f7fc fa2c 	bl	8000cbc <HAL_GetTick>
 8004864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b08      	cmp	r3, #8
 8004872:	d12e      	bne.n	80048d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f88c 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e062      	b.n	8004998 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d149      	bne.n	8004974 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f856 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03c      	beq.n	8004974 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	623b      	str	r3, [r7, #32]
   return(result);
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
 800491a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800491e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	60fb      	str	r3, [r7, #12]
   return(result);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e011      	b.n	8004998 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3758      	adds	r7, #88	@ 0x58
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	e04f      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d04b      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fc f97f 	bl	8000cbc <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e04e      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d037      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d034      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d031      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d110      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2208      	movs	r2, #8
 8004a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f838 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e029      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2c:	d111      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f81e 	bl	8004a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e00f      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0a0      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b095      	sub	sp, #84	@ 0x54
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d118      	bne.n	8004b22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f023 0310 	bic.w	r3, r3, #16
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e6      	bne.n	8004af0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b36:	bf00      	nop
 8004b38:	3754      	adds	r7, #84	@ 0x54
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fb05 	bl	8004170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b088      	sub	sp, #32
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fad1 	bl	800415c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bba:	bf00      	nop
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <memset>:
 8004bd6:	4402      	add	r2, r0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d100      	bne.n	8004be0 <memset+0xa>
 8004bde:	4770      	bx	lr
 8004be0:	f803 1b01 	strb.w	r1, [r3], #1
 8004be4:	e7f9      	b.n	8004bda <memset+0x4>
	...

08004be8 <__libc_init_array>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4d0d      	ldr	r5, [pc, #52]	@ (8004c20 <__libc_init_array+0x38>)
 8004bec:	4c0d      	ldr	r4, [pc, #52]	@ (8004c24 <__libc_init_array+0x3c>)
 8004bee:	1b64      	subs	r4, r4, r5
 8004bf0:	10a4      	asrs	r4, r4, #2
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	42a6      	cmp	r6, r4
 8004bf6:	d109      	bne.n	8004c0c <__libc_init_array+0x24>
 8004bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8004c28 <__libc_init_array+0x40>)
 8004bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8004c2c <__libc_init_array+0x44>)
 8004bfc:	f000 f818 	bl	8004c30 <_init>
 8004c00:	1b64      	subs	r4, r4, r5
 8004c02:	10a4      	asrs	r4, r4, #2
 8004c04:	2600      	movs	r6, #0
 8004c06:	42a6      	cmp	r6, r4
 8004c08:	d105      	bne.n	8004c16 <__libc_init_array+0x2e>
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c10:	4798      	blx	r3
 8004c12:	3601      	adds	r6, #1
 8004c14:	e7ee      	b.n	8004bf4 <__libc_init_array+0xc>
 8004c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1a:	4798      	blx	r3
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	e7f2      	b.n	8004c06 <__libc_init_array+0x1e>
 8004c20:	08004c9c 	.word	0x08004c9c
 8004c24:	08004c9c 	.word	0x08004c9c
 8004c28:	08004c9c 	.word	0x08004c9c
 8004c2c:	08004ca0 	.word	0x08004ca0

08004c30 <_init>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr

08004c3c <_fini>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr
