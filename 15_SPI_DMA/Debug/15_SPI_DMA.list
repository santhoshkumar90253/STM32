
15_SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004cb8  08004cb8  00005cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d04  08004d04  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d0c  08004d0c  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d0c  08004d0c  00005d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d10  08004d10  00005d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004d14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000018  08004d2c  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004d2c  000061c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0d8  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8c  00000000  00000000  00014120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000160b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000914  00000000  00000000  00016c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e79  00000000  00000000  0001758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e10f  00000000  00000000  0003d405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95b4  00000000  00000000  0004b514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  00134b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00137b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ca0 	.word	0x08004ca0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004ca0 	.word	0x08004ca0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_SPI_TxRxCpltCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d120      	bne.n	8000548 <HAL_SPI_TxRxCpltCallback+0x54>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Set CS HIGH (deselect slave)
 8000506:	2201      	movs	r2, #1
 8000508:	2110      	movs	r1, #16
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f001 f94b 	bl	80017a8 <HAL_GPIO_WritePin>

        // Optional: Send received SPI data over UART
        HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	220a      	movs	r2, #10
 8000518:	490e      	ldr	r1, [pc, #56]	@ (8000554 <HAL_SPI_TxRxCpltCallback+0x60>)
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800051c:	f003 fac6 	bl	8003aac <HAL_UART_Transmit>

        // Add newline for readability in UART terminal
        uint8_t newline[] = "\r\n";
 8000520:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_SPI_TxRxCpltCallback+0x68>)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	8019      	strh	r1, [r3, #0]
 800052c:	3302      	adds	r3, #2
 800052e:	0c12      	lsrs	r2, r2, #16
 8000530:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, newline, sizeof(newline)-1, HAL_MAX_DELAY);
 8000532:	f107 010c 	add.w	r1, r7, #12
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	2202      	movs	r2, #2
 800053c:	4806      	ldr	r0, [pc, #24]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800053e:	f003 fab5 	bl	8003aac <HAL_UART_Transmit>

        spi_ready = 1;  // Mark SPI ready for next transfer
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
    }
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013000 	.word	0x40013000
 8000554:	20000034 	.word	0x20000034
 8000558:	20000134 	.word	0x20000134
 800055c:	08004cb8 	.word	0x08004cb8
 8000560:	2000000a 	.word	0x2000000a

08000564 <main>:

int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fb4c 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f836 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f91a 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000574:	f000 f8f2 	bl	800075c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8c0 	bl	80006fc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800057c:	f000 f880 	bl	8000680 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Pull CS LOW to select slave
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 f90e 	bl	80017a8 <HAL_GPIO_WritePin>

      // Start SPI transfer using DMA (non-blocking)
      HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, sizeof(tx_buffer));
 800058c:	230a      	movs	r3, #10
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <main+0x68>)
 8000590:	490f      	ldr	r1, [pc, #60]	@ (80005d0 <main+0x6c>)
 8000592:	4810      	ldr	r0, [pc, #64]	@ (80005d4 <main+0x70>)
 8000594:	f002 fce4 	bl	8002f60 <HAL_SPI_TransmitReceive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (spi_ready)
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <main+0x74>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00e      	beq.n	80005c0 <main+0x5c>
	  {
		  spi_ready = 0;                                // Reset ready flag
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <main+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Select slave
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f001 f8fa 	bl	80017a8 <HAL_GPIO_WritePin>
		  HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, sizeof(tx_buffer)); // Start new transfer
 80005b4:	230a      	movs	r3, #10
 80005b6:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <main+0x68>)
 80005b8:	4905      	ldr	r1, [pc, #20]	@ (80005d0 <main+0x6c>)
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <main+0x70>)
 80005bc:	f002 fcd0 	bl	8002f60 <HAL_SPI_TransmitReceive_DMA>
	  }

	  HAL_Delay(1000); // Wait 1 second before next check/transfer
 80005c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c4:	f000 fb9a 	bl	8000cfc <HAL_Delay>
	  if (spi_ready)
 80005c8:	e7e6      	b.n	8000598 <main+0x34>
 80005ca:	bf00      	nop
 80005cc:	20000034 	.word	0x20000034
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000040 	.word	0x20000040
 80005d8:	2000000a 	.word	0x2000000a

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fb2b 	bl	8004c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f001 f8f7 	bl	80017f4 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f932 	bl	8000874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f92e 	bl	80018a0 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f913 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fcf6 	bl	8002058 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f8ff 	bl	8000874 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	@ 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_SPI1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800069a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800069e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006da:	2208      	movs	r2, #8
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006e0:	f002 fb9a 	bl	8002e18 <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f8c3 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000040 	.word	0x20000040
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f003 f966 	bl	8003a10 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f893 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000134 	.word	0x20000134
 8000758:	40004400 	.word	0x40004400

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_DMA_Init+0x48>)
 8000764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000766:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <MX_DMA_Init+0x48>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6493      	str	r3, [r2, #72]	@ 0x48
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <MX_DMA_Init+0x48>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200c      	movs	r0, #12
 8000780:	f000 fbbb 	bl	8000efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000784:	200c      	movs	r0, #12
 8000786:	f000 fbd4 	bl	8000f32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	200d      	movs	r0, #13
 8000790:	f000 fbb3 	bl	8000efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000794:	200d      	movs	r0, #13
 8000796:	f000 fbcc 	bl	8000f32 <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a24      	ldr	r2, [pc, #144]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_GPIO_Init+0xc4>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2110      	movs	r1, #16
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f000 ffbf 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000830:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <MX_GPIO_Init+0xc8>)
 8000842:	f000 fe07 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000846:	2310      	movs	r3, #16
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f000 fdf8 	bl	8001454 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000800 	.word	0x48000800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	4a0e      	ldr	r2, [pc, #56]	@ (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6613      	str	r3, [r2, #96]	@ 0x60
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a45      	ldr	r2, [pc, #276]	@ (80009fc <HAL_SPI_MspInit+0x134>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	f040 8083 	bne.w	80009f2 <HAL_SPI_MspInit+0x12a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ec:	4b44      	ldr	r3, [pc, #272]	@ (8000a00 <HAL_SPI_MspInit+0x138>)
 80008ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f0:	4a43      	ldr	r2, [pc, #268]	@ (8000a00 <HAL_SPI_MspInit+0x138>)
 80008f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f8:	4b41      	ldr	r3, [pc, #260]	@ (8000a00 <HAL_SPI_MspInit+0x138>)
 80008fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b3e      	ldr	r3, [pc, #248]	@ (8000a00 <HAL_SPI_MspInit+0x138>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	4a3d      	ldr	r2, [pc, #244]	@ (8000a00 <HAL_SPI_MspInit+0x138>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000910:	4b3b      	ldr	r3, [pc, #236]	@ (8000a00 <HAL_SPI_MspInit+0x138>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800091c:	23e0      	movs	r3, #224	@ 0xe0
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800092c:	2305      	movs	r3, #5
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093a:	f000 fd8b 	bl	8001454 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800093e:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000940:	4a31      	ldr	r2, [pc, #196]	@ (8000a08 <HAL_SPI_MspInit+0x140>)
 8000942:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000944:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000946:	2201      	movs	r2, #1
 8000948:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800094a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 800094c:	2210      	movs	r2, #16
 800094e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000950:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000956:	4b2b      	ldr	r3, [pc, #172]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095c:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000962:	4b28      	ldr	r3, [pc, #160]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000968:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800096e:	4b25      	ldr	r3, [pc, #148]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000974:	4823      	ldr	r0, [pc, #140]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000976:	f000 faf7 	bl	8000f68 <HAL_DMA_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000980:	f7ff ff78 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 8000988:	655a      	str	r2, [r3, #84]	@ 0x54
 800098a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <HAL_SPI_MspInit+0x13c>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 8000992:	4a1f      	ldr	r2, [pc, #124]	@ (8000a10 <HAL_SPI_MspInit+0x148>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80009c6:	4811      	ldr	r0, [pc, #68]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009c8:	f000 face 	bl	8000f68 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80009d2:	f7ff ff4f 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009da:	659a      	str	r2, [r3, #88]	@ 0x58
 80009dc:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <HAL_SPI_MspInit+0x144>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2023      	movs	r0, #35	@ 0x23
 80009e8:	f000 fa87 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009ec:	2023      	movs	r0, #35	@ 0x23
 80009ee:	f000 faa0 	bl	8000f32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40013000 	.word	0x40013000
 8000a00:	40021000 	.word	0x40021000
 8000a04:	200000a4 	.word	0x200000a4
 8000a08:	40020030 	.word	0x40020030
 8000a0c:	200000ec 	.word	0x200000ec
 8000a10:	4002001c 	.word	0x4002001c

08000a14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ac      	sub	sp, #176	@ 0xb0
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2288      	movs	r2, #136	@ 0x88
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f004 f906 	bl	8004c46 <memset>
  if(huart->Instance==USART2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ad4 <HAL_UART_MspInit+0xc0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d143      	bne.n	8000acc <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fd25 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a5c:	f7ff ff0a 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a90:	230c      	movs	r3, #12
 8000a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f000 fccc 	bl	8001454 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2026      	movs	r0, #38	@ 0x26
 8000ac2:	f000 fa1a 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac6:	2026      	movs	r0, #38	@ 0x26
 8000ac8:	f000 fa33 	bl	8000f32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	37b0      	adds	r7, #176	@ 0xb0
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f000 f8c3 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <DMA1_Channel2_IRQHandler+0x10>)
 8000b42:	f000 fba8 	bl	8001296 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000ec 	.word	0x200000ec

08000b50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <DMA1_Channel3_IRQHandler+0x10>)
 8000b56:	f000 fb9e 	bl	8001296 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000a4 	.word	0x200000a4

08000b64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <SPI1_IRQHandler+0x10>)
 8000b6a:	f002 fb7f 	bl	800326c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000040 	.word	0x20000040

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <USART2_IRQHandler+0x10>)
 8000b7e:	f003 f81f 	bl	8003bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000134 	.word	0x20000134

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f004 f83b 	bl	8004c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fcbf 	bl	8000564 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000bf4:	08004d14 	.word	0x08004d14
  ldr r2, =_sbss
 8000bf8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bfc:	200001c0 	.word	0x200001c0

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_Init+0x3c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <HAL_Init+0x3c>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f962 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f80f 	bl	8000c44 <HAL_InitTick>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	e001      	b.n	8000c36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c32:	f7ff fe25 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_InitTick+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f96d 	bl	8000f4e <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d809      	bhi.n	8000c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f937 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_InitTick+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e001      	b.n	8000ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20000010 	.word	0x20000010

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000014 	.word	0x20000014
 8000ce0:	200001bc 	.word	0x200001bc

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200001bc 	.word	0x200001bc

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000014 	.word	0x20000014

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	@ (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	@ (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff3e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff31 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa2 	bl	8000ea0 <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e098      	b.n	80010ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b4d      	ldr	r3, [pc, #308]	@ (80010b8 <HAL_DMA_Init+0x150>)
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d80f      	bhi.n	8000fa6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80010bc <HAL_DMA_Init+0x154>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a4b      	ldr	r2, [pc, #300]	@ (80010c0 <HAL_DMA_Init+0x158>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	009a      	lsls	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a48      	ldr	r2, [pc, #288]	@ (80010c4 <HAL_DMA_Init+0x15c>)
 8000fa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fa4:	e00e      	b.n	8000fc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b46      	ldr	r3, [pc, #280]	@ (80010c8 <HAL_DMA_Init+0x160>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a43      	ldr	r2, [pc, #268]	@ (80010c0 <HAL_DMA_Init+0x158>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	009a      	lsls	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a42      	ldr	r2, [pc, #264]	@ (80010cc <HAL_DMA_Init+0x164>)
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800101e:	d039      	beq.n	8001094 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	@ (80010c4 <HAL_DMA_Init+0x15c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d11a      	bne.n	8001060 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800102a:	4b29      	ldr	r3, [pc, #164]	@ (80010d0 <HAL_DMA_Init+0x168>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f003 031c 	and.w	r3, r3, #28
 8001036:	210f      	movs	r1, #15
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	4924      	ldr	r1, [pc, #144]	@ (80010d0 <HAL_DMA_Init+0x168>)
 8001040:	4013      	ands	r3, r2
 8001042:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_DMA_Init+0x168>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001050:	f003 031c 	and.w	r3, r3, #28
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	491d      	ldr	r1, [pc, #116]	@ (80010d0 <HAL_DMA_Init+0x168>)
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
 800105e:	e019      	b.n	8001094 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <HAL_DMA_Init+0x16c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001068:	f003 031c 	and.w	r3, r3, #28
 800106c:	210f      	movs	r1, #15
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	4917      	ldr	r1, [pc, #92]	@ (80010d4 <HAL_DMA_Init+0x16c>)
 8001076:	4013      	ands	r3, r2
 8001078:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <HAL_DMA_Init+0x16c>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6859      	ldr	r1, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f003 031c 	and.w	r3, r3, #28
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	4911      	ldr	r1, [pc, #68]	@ (80010d4 <HAL_DMA_Init+0x16c>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40020407 	.word	0x40020407
 80010bc:	bffdfff8 	.word	0xbffdfff8
 80010c0:	cccccccd 	.word	0xcccccccd
 80010c4:	40020000 	.word	0x40020000
 80010c8:	bffdfbf8 	.word	0xbffdfbf8
 80010cc:	40020400 	.word	0x40020400
 80010d0:	400200a8 	.word	0x400200a8
 80010d4:	400204a8 	.word	0x400204a8

080010d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_DMA_Start_IT+0x20>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e04b      	b.n	8001190 <HAL_DMA_Start_IT+0xb8>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d13a      	bne.n	8001182 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f000 f95f 	bl	80013f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	2b00      	cmp	r3, #0
 800113c:	d008      	beq.n	8001150 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 020e 	orr.w	r2, r2, #14
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e00f      	b.n	8001170 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0204 	bic.w	r2, r2, #4
 800115e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 020a 	orr.w	r2, r2, #10
 800116e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e005      	b.n	800118e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800118a:	2302      	movs	r3, #2
 800118c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d008      	beq.n	80011c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2204      	movs	r2, #4
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e022      	b.n	8001208 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 020e 	bic.w	r2, r2, #14
 80011d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f003 021c 	and.w	r2, r3, #28
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d005      	beq.n	8001238 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2204      	movs	r2, #4
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e029      	b.n	800128c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 020e 	bic.w	r2, r2, #14
 8001246:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0201 	bic.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	f003 021c 	and.w	r2, r3, #28
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
    }
  }
  return status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f003 031c 	and.w	r3, r3, #28
 80012b6:	2204      	movs	r2, #4
 80012b8:	409a      	lsls	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d026      	beq.n	8001310 <HAL_DMA_IRQHandler+0x7a>
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d021      	beq.n	8001310 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d107      	bne.n	80012ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0204 	bic.w	r2, r2, #4
 80012e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 021c 	and.w	r2, r3, #28
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	2104      	movs	r1, #4
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	2b00      	cmp	r3, #0
 8001304:	d071      	beq.n	80013ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800130e:	e06c      	b.n	80013ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001314:	f003 031c 	and.w	r3, r3, #28
 8001318:	2202      	movs	r2, #2
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d02e      	beq.n	8001382 <HAL_DMA_IRQHandler+0xec>
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d029      	beq.n	8001382 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10b      	bne.n	8001354 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 020a 	bic.w	r2, r2, #10
 800134a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f003 021c 	and.w	r2, r3, #28
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	2102      	movs	r1, #2
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d038      	beq.n	80013ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001380:	e033      	b.n	80013ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	2208      	movs	r2, #8
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d02a      	beq.n	80013ec <HAL_DMA_IRQHandler+0x156>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d025      	beq.n	80013ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020e 	bic.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	f003 021c 	and.w	r2, r3, #28
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
}
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f003 021c 	and.w	r2, r3, #28
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	2101      	movs	r1, #1
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d108      	bne.n	8001438 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001436:	e007      	b.n	8001448 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e17f      	b.n	8001764 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8171 	beq.w	800175e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_GPIO_Init+0x40>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d118      	bne.n	8001534 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001508:	2201      	movs	r2, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f003 0201 	and.w	r2, r3, #1
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b03      	cmp	r3, #3
 800153e:	d017      	beq.n	8001570 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	6939      	ldr	r1, [r7, #16]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80ac 	beq.w	800175e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b5f      	ldr	r3, [pc, #380]	@ (8001784 <HAL_GPIO_Init+0x330>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	4a5e      	ldr	r2, [pc, #376]	@ (8001784 <HAL_GPIO_Init+0x330>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6613      	str	r3, [r2, #96]	@ 0x60
 8001612:	4b5c      	ldr	r3, [pc, #368]	@ (8001784 <HAL_GPIO_Init+0x330>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800161e:	4a5a      	ldr	r2, [pc, #360]	@ (8001788 <HAL_GPIO_Init+0x334>)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_Init+0x242>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4f      	ldr	r2, [pc, #316]	@ (800178c <HAL_GPIO_Init+0x338>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_Init+0x23e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4e      	ldr	r2, [pc, #312]	@ (8001790 <HAL_GPIO_Init+0x33c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_Init+0x23a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4d      	ldr	r2, [pc, #308]	@ (8001794 <HAL_GPIO_Init+0x340>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x236>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4c      	ldr	r2, [pc, #304]	@ (8001798 <HAL_GPIO_Init+0x344>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x232>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4b      	ldr	r2, [pc, #300]	@ (800179c <HAL_GPIO_Init+0x348>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x22e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4a      	ldr	r2, [pc, #296]	@ (80017a0 <HAL_GPIO_Init+0x34c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x22a>
 800167a:	2306      	movs	r3, #6
 800167c:	e00c      	b.n	8001698 <HAL_GPIO_Init+0x244>
 800167e:	2307      	movs	r3, #7
 8001680:	e00a      	b.n	8001698 <HAL_GPIO_Init+0x244>
 8001682:	2305      	movs	r3, #5
 8001684:	e008      	b.n	8001698 <HAL_GPIO_Init+0x244>
 8001686:	2304      	movs	r3, #4
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x244>
 800168a:	2303      	movs	r3, #3
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x244>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x244>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x244>
 8001696:	2300      	movs	r3, #0
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016a8:	4937      	ldr	r1, [pc, #220]	@ (8001788 <HAL_GPIO_Init+0x334>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016b6:	4b3b      	ldr	r3, [pc, #236]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016da:	4a32      	ldr	r2, [pc, #200]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016e0:	4b30      	ldr	r3, [pc, #192]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001704:	4a27      	ldr	r2, [pc, #156]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800170a:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800172e:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001758:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <HAL_GPIO_Init+0x350>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	f47f ae78 	bne.w	8001464 <HAL_GPIO_Init+0x10>
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	48000400 	.word	0x48000400
 8001790:	48000800 	.word	0x48000800
 8001794:	48000c00 	.word	0x48000c00
 8001798:	48001000 	.word	0x48001000
 800179c:	48001400 	.word	0x48001400
 80017a0:	48001800 	.word	0x48001800
 80017a4:	40010400 	.word	0x40010400

080017a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
 80017b4:	4613      	mov	r3, r2
 80017b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017dc:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000

080017f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001802:	d130      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001804:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800180c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001810:	d038      	beq.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800181a:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001820:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2232      	movs	r2, #50	@ 0x32
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	4a1b      	ldr	r2, [pc, #108]	@ (800189c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001838:	e002      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3b01      	subs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800184c:	d102      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x60>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f2      	bne.n	800183a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001860:	d110      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e00f      	b.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001872:	d007      	beq.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001882:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000
 8001898:	2000000c 	.word	0x2000000c
 800189c:	431bde83 	.word	0x431bde83

080018a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e3ca      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b2:	4b97      	ldr	r3, [pc, #604]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018bc:	4b94      	ldr	r3, [pc, #592]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80e4 	beq.w	8001a9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <HAL_RCC_OscConfig+0x4a>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	f040 808b 	bne.w	80019f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	f040 8087 	bne.w	80019f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ea:	4b89      	ldr	r3, [pc, #548]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x62>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e3a2      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1a      	ldr	r2, [r3, #32]
 8001906:	4b82      	ldr	r3, [pc, #520]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <HAL_RCC_OscConfig+0x7c>
 8001912:	4b7f      	ldr	r3, [pc, #508]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800191a:	e005      	b.n	8001928 <HAL_RCC_OscConfig+0x88>
 800191c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800191e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001928:	4293      	cmp	r3, r2
 800192a:	d223      	bcs.n	8001974 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fd55 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e383      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001940:	4b73      	ldr	r3, [pc, #460]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a72      	ldr	r2, [pc, #456]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b70      	ldr	r3, [pc, #448]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	496d      	ldr	r1, [pc, #436]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4968      	ldr	r1, [pc, #416]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	e025      	b.n	80019c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001974:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b63      	ldr	r3, [pc, #396]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4960      	ldr	r1, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001992:	4b5f      	ldr	r3, [pc, #380]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	495b      	ldr	r1, [pc, #364]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fd15 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e343      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c0:	f000 fc4a 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b52      	ldr	r3, [pc, #328]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	4950      	ldr	r1, [pc, #320]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
 80019dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001b18 <HAL_RCC_OscConfig+0x278>)
 80019de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019e0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <HAL_RCC_OscConfig+0x27c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f92d 	bl	8000c44 <HAL_InitTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d052      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	e327      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d032      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a00:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f96a 	bl	8000ce4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a14:	f7ff f966 	bl	8000ce4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e310      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a26:	4b3a      	ldr	r3, [pc, #232]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a32:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a36      	ldr	r2, [pc, #216]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4931      	ldr	r1, [pc, #196]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a50:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	492c      	ldr	r1, [pc, #176]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	e01a      	b.n	8001a9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a66:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a29      	ldr	r2, [pc, #164]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a72:	f7ff f937 	bl	8000ce4 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f933 	bl	8000ce4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e2dd      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x1da>
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d074      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x21a>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d064      	beq.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d160      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e2ba      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x24a>
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e026      	b.n	8001b38 <HAL_RCC_OscConfig+0x298>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af2:	d115      	bne.n	8001b20 <HAL_RCC_OscConfig+0x280>
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001afa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a02      	ldr	r2, [pc, #8]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e014      	b.n	8001b38 <HAL_RCC_OscConfig+0x298>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08004cbc 	.word	0x08004cbc
 8001b18:	2000000c 	.word	0x2000000c
 8001b1c:	20000010 	.word	0x20000010
 8001b20:	4ba0      	ldr	r3, [pc, #640]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a9f      	ldr	r2, [pc, #636]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a9c      	ldr	r2, [pc, #624]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8d0 	bl	8000ce4 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f8cc 	bl	8000ce4 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	@ 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e276      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5a:	4b92      	ldr	r3, [pc, #584]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2a8>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f8bc 	bl	8000ce4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f8b8 	bl	8000ce4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e262      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b82:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2d0>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d060      	beq.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x310>
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d119      	bne.n	8001bde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d116      	bne.n	8001bde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x328>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e23f      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b76      	ldr	r3, [pc, #472]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	4973      	ldr	r1, [pc, #460]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bdc:	e040      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d023      	beq.n	8001c2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be6:	4b6f      	ldr	r3, [pc, #444]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f877 	bl	8000ce4 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f873 	bl	8000ce4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e21d      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	4b65      	ldr	r3, [pc, #404]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b62      	ldr	r3, [pc, #392]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	495f      	ldr	r1, [pc, #380]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e018      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5c      	ldr	r2, [pc, #368]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f853 	bl	8000ce4 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f84f 	bl	8000ce4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1f9      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01c      	beq.n	8001cae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c74:	4b4b      	ldr	r3, [pc, #300]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f82e 	bl	8000ce4 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f82a 	bl	8000ce4 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1d4      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ef      	beq.n	8001c8c <HAL_RCC_OscConfig+0x3ec>
 8001cac:	e01b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f811 	bl	8000ce4 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f80d 	bl	8000ce4 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1b7      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a6 	beq.w	8001e40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10d      	bne.n	8001d20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d10:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d38:	f7fe ffd4 	bl	8000ce4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7fe ffd0 	bl	8000ce4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e17a      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_RCC_OscConfig+0x508>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4d8>
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d76:	e029      	b.n	8001dcc <HAL_RCC_OscConfig+0x52c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d115      	bne.n	8001dac <HAL_RCC_OscConfig+0x50c>
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d86:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	4a03      	ldr	r2, [pc, #12]	@ (8001da4 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x52c>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40007000 	.word	0x40007000
 8001dac:	4b9c      	ldr	r3, [pc, #624]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db2:	4a9b      	ldr	r2, [pc, #620]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dbc:	4b98      	ldr	r3, [pc, #608]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	4a97      	ldr	r2, [pc, #604]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7fe ff86 	bl	8000ce4 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe ff82 	bl	8000ce4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e12a      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	4b8b      	ldr	r3, [pc, #556]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ed      	beq.n	8001ddc <HAL_RCC_OscConfig+0x53c>
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7fe ff6f 	bl	8000ce4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff6b 	bl	8000ce4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e113      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	4b7f      	ldr	r3, [pc, #508]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ed      	bne.n	8001e0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b7a      	ldr	r3, [pc, #488]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	4a79      	ldr	r2, [pc, #484]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80fe 	beq.w	8002046 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	f040 80d0 	bne.w	8001ff4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e54:	4b72      	ldr	r3, [pc, #456]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d130      	bne.n	8001eca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	3b01      	subs	r3, #1
 8001e74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d127      	bne.n	8001eca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11f      	bne.n	8001eca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e94:	2a07      	cmp	r2, #7
 8001e96:	bf14      	ite	ne
 8001e98:	2201      	movne	r2, #1
 8001e9a:	2200      	moveq	r2, #0
 8001e9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d113      	bne.n	8001eca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d06e      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d069      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ed0:	4b53      	ldr	r3, [pc, #332]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001edc:	4b50      	ldr	r3, [pc, #320]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0ad      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eec:	4b4c      	ldr	r3, [pc, #304]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef8:	f7fe fef4 	bl	8000ce4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fef0 	bl	8000ce4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e09a      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	4b43      	ldr	r3, [pc, #268]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1e:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b40      	ldr	r3, [pc, #256]	@ (8002024 <HAL_RCC_OscConfig+0x784>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f2e:	3a01      	subs	r2, #1
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f38:	0212      	lsls	r2, r2, #8
 8001f3a:	4311      	orrs	r1, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f40:	0852      	lsrs	r2, r2, #1
 8001f42:	3a01      	subs	r2, #1
 8001f44:	0552      	lsls	r2, r2, #21
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f4c:	0852      	lsrs	r2, r2, #1
 8001f4e:	3a01      	subs	r2, #1
 8001f50:	0652      	lsls	r2, r2, #25
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f58:	0912      	lsrs	r2, r2, #4
 8001f5a:	0452      	lsls	r2, r2, #17
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	4930      	ldr	r1, [pc, #192]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f64:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2d      	ldr	r2, [pc, #180]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f70:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a2a      	ldr	r2, [pc, #168]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f7c:	f7fe feb2 	bl	8000ce4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe feae 	bl	8000ce4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e058      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa2:	e050      	b.n	8002046 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e04f      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d148      	bne.n	8002046 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fc0:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a16      	ldr	r2, [pc, #88]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fcc:	f7fe fe8a 	bl	8000ce4 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe fe86 	bl	8000ce4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e030      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x734>
 8001ff2:	e028      	b.n	8002046 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d023      	beq.n	8002042 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a08      	ldr	r2, [pc, #32]	@ (8002020 <HAL_RCC_OscConfig+0x780>)
 8002000:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7fe fe6d 	bl	8000ce4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200c:	e00c      	b.n	8002028 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fe69 	bl	8000ce4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d905      	bls.n	8002028 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
 8002020:	40021000 	.word	0x40021000
 8002024:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_RCC_OscConfig+0x7b0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ec      	bne.n	800200e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <HAL_RCC_OscConfig+0x7b0>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4905      	ldr	r1, [pc, #20]	@ (8002050 <HAL_RCC_OscConfig+0x7b0>)
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_RCC_OscConfig+0x7b4>)
 800203c:	4013      	ands	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e001      	b.n	8002046 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	feeefffc 	.word	0xfeeefffc

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0e7      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b75      	ldr	r3, [pc, #468]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b72      	ldr	r3, [pc, #456]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4970      	ldr	r1, [pc, #448]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b6e      	ldr	r3, [pc, #440]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0cf      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b66      	ldr	r3, [pc, #408]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d908      	bls.n	80020ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b8:	4b63      	ldr	r3, [pc, #396]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4960      	ldr	r1, [pc, #384]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d04c      	beq.n	8002170 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b5a      	ldr	r3, [pc, #360]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d121      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0a6      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f6:	4b54      	ldr	r3, [pc, #336]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d115      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e09a      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800210e:	4b4e      	ldr	r3, [pc, #312]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e08e      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800211e:	4b4a      	ldr	r3, [pc, #296]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e086      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b46      	ldr	r3, [pc, #280]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4943      	ldr	r1, [pc, #268]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe fdd0 	bl	8000ce4 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7fe fdcc 	bl	8000ce4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e06e      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b3a      	ldr	r3, [pc, #232]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 020c 	and.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1eb      	bne.n	8002148 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d010      	beq.n	800219e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b31      	ldr	r3, [pc, #196]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002188:	429a      	cmp	r2, r3
 800218a:	d208      	bcs.n	800219e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	492b      	ldr	r1, [pc, #172]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800219e:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d210      	bcs.n	80021ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 0207 	bic.w	r2, r3, #7
 80021b4:	4923      	ldr	r1, [pc, #140]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_RCC_ClockConfig+0x1ec>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e036      	b.n	800223c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021da:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4918      	ldr	r1, [pc, #96]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f8:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4910      	ldr	r1, [pc, #64]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220c:	f000 f824 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	490b      	ldr	r1, [pc, #44]	@ (800224c <HAL_RCC_ClockConfig+0x1f4>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
 8002228:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <HAL_RCC_ClockConfig+0x1f8>)
 800222a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_RCC_ClockConfig+0x1fc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fd07 	bl	8000c44 <HAL_InitTick>
 8002236:	4603      	mov	r3, r0
 8002238:	72fb      	strb	r3, [r7, #11]

  return status;
 800223a:	7afb      	ldrb	r3, [r7, #11]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40022000 	.word	0x40022000
 8002248:	40021000 	.word	0x40021000
 800224c:	08004cbc 	.word	0x08004cbc
 8002250:	2000000c 	.word	0x2000000c
 8002254:	20000010 	.word	0x20000010

08002258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	@ 0x24
 800225c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002266:	4b3e      	ldr	r3, [pc, #248]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002270:	4b3b      	ldr	r3, [pc, #236]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x34>
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d121      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d11e      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800228c:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002298:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e005      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10d      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x110>)
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	e004      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <HAL_RCC_GetSysClockFreq+0x114>)
 80022de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d134      	bne.n	8002350 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0xa6>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d003      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0xac>
 80022fc:	e005      	b.n	800230a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x110>)
 8002300:	617b      	str	r3, [r7, #20]
      break;
 8002302:	e005      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002304:	4b19      	ldr	r3, [pc, #100]	@ (800236c <HAL_RCC_GetSysClockFreq+0x114>)
 8002306:	617b      	str	r3, [r7, #20]
      break;
 8002308:	e002      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	617b      	str	r3, [r7, #20]
      break;
 800230e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	3301      	adds	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	fb03 f202 	mul.w	r2, r3, r2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x108>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	0e5b      	lsrs	r3, r3, #25
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	3301      	adds	r3, #1
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002350:	69bb      	ldr	r3, [r7, #24]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	08004cd4 	.word	0x08004cd4
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_RCC_GetHCLKFreq+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000000c 	.word	0x2000000c

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800238c:	f7ff fff0 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4904      	ldr	r1, [pc, #16]	@ (80023b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08004ccc 	.word	0x08004ccc

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023b8:	f7ff ffda 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4904      	ldr	r1, [pc, #16]	@ (80023dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08004ccc 	.word	0x08004ccc

080023e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023f8:	f7ff f9ee 	bl	80017d8 <HAL_PWREx_GetVoltageRange>
 80023fc:	6178      	str	r0, [r7, #20]
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002404:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	@ 0x58
 800240c:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f9de 	bl	80017d8 <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	4a1d      	ldr	r2, [pc, #116]	@ (8002498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002430:	d10b      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d919      	bls.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2ba0      	cmp	r3, #160	@ 0xa0
 800243c:	d902      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e013      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e010      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b80      	cmp	r3, #128	@ 0x80
 800244e:	d902      	bls.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002450:	2303      	movs	r3, #3
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e00a      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	@ 0x80
 800245a:	d102      	bne.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245c:	2302      	movs	r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e004      	b.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b70      	cmp	r3, #112	@ 0x70
 8002466:	d101      	bne.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 0207 	bic.w	r2, r3, #7
 8002474:	4909      	ldr	r1, [pc, #36]	@ (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800247c:	4b07      	ldr	r3, [pc, #28]	@ (800249c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a8:	2300      	movs	r3, #0
 80024aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ac:	2300      	movs	r3, #0
 80024ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d041      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024c4:	d02a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024ca:	d824      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024d0:	d008      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024d6:	d81e      	bhi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024e0:	d010      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024e2:	e018      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024e4:	4b86      	ldr	r3, [pc, #536]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a85      	ldr	r2, [pc, #532]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f0:	e015      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fabb 	bl	8002a74 <RCCEx_PLLSAI1_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002502:	e00c      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3320      	adds	r3, #32
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fba6 	bl	8002c5c <RCCEx_PLLSAI2_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002514:	e003      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	74fb      	strb	r3, [r7, #19]
      break;
 800251a:	e000      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800251c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002524:	4b76      	ldr	r3, [pc, #472]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002532:	4973      	ldr	r1, [pc, #460]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800253a:	e001      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d041      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002550:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002554:	d02a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002556:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800255a:	d824      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800255c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002566:	d81e      	bhi.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002570:	d010      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002572:	e018      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002574:	4b62      	ldr	r3, [pc, #392]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a61      	ldr	r2, [pc, #388]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002580:	e015      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fa73 	bl	8002a74 <RCCEx_PLLSAI1_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002592:	e00c      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3320      	adds	r3, #32
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fb5e 	bl	8002c5c <RCCEx_PLLSAI2_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a4:	e003      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	74fb      	strb	r3, [r7, #19]
      break;
 80025aa:	e000      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025b4:	4b52      	ldr	r3, [pc, #328]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c2:	494f      	ldr	r1, [pc, #316]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ca:	e001      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a0 	beq.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025e2:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002602:	6593      	str	r3, [r2, #88]	@ 0x58
 8002604:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002610:	2301      	movs	r3, #1
 8002612:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002614:	4b3b      	ldr	r3, [pc, #236]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a3a      	ldr	r2, [pc, #232]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002620:	f7fe fb60 	bl	8000ce4 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002626:	e009      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe fb5c 	bl	8000ce4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d902      	bls.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	74fb      	strb	r3, [r7, #19]
        break;
 800263a:	e005      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263c:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d15c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002654:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002658:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d019      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800266c:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002676:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	4a20      	ldr	r2, [pc, #128]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002698:	4a19      	ldr	r2, [pc, #100]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fb1b 	bl	8000ce4 <HAL_GetTick>
 80026ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b0:	e00b      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fb17 	bl	8000ce4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d902      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	74fb      	strb	r3, [r7, #19]
            break;
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ec      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ee:	4904      	ldr	r1, [pc, #16]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026f6:	e009      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
 80026fc:	e006      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b9e      	ldr	r3, [pc, #632]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	4a9d      	ldr	r2, [pc, #628]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272a:	4b98      	ldr	r3, [pc, #608]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002730:	f023 0203 	bic.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002738:	4994      	ldr	r1, [pc, #592]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800274c:	4b8f      	ldr	r3, [pc, #572]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	f023 020c 	bic.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275a:	498c      	ldr	r1, [pc, #560]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800276e:	4b87      	ldr	r3, [pc, #540]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	4983      	ldr	r1, [pc, #524]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002790:	4b7e      	ldr	r3, [pc, #504]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	497b      	ldr	r1, [pc, #492]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027b2:	4b76      	ldr	r3, [pc, #472]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c0:	4972      	ldr	r1, [pc, #456]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d4:	4b6d      	ldr	r3, [pc, #436]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	496a      	ldr	r1, [pc, #424]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027f6:	4b65      	ldr	r3, [pc, #404]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	4961      	ldr	r1, [pc, #388]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002818:	4b5c      	ldr	r3, [pc, #368]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	4959      	ldr	r1, [pc, #356]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283a:	4b54      	ldr	r3, [pc, #336]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002848:	4950      	ldr	r1, [pc, #320]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285c:	4b4b      	ldr	r3, [pc, #300]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	4948      	ldr	r1, [pc, #288]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800287e:	4b43      	ldr	r3, [pc, #268]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	493f      	ldr	r1, [pc, #252]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d028      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028a0:	4b3a      	ldr	r3, [pc, #232]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ae:	4937      	ldr	r1, [pc, #220]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028be:	d106      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b32      	ldr	r3, [pc, #200]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a31      	ldr	r2, [pc, #196]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
 80028cc:	e011      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f8c8 	bl	8002a74 <RCCEx_PLLSAI1_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028fe:	4b23      	ldr	r3, [pc, #140]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	491f      	ldr	r1, [pc, #124]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800291c:	d106      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291e:	4b1b      	ldr	r3, [pc, #108]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002928:	60d3      	str	r3, [r2, #12]
 800292a:	e011      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f899 	bl	8002a74 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02b      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296a:	4908      	ldr	r1, [pc, #32]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800297a:	d109      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a02      	ldr	r2, [pc, #8]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002986:	60d3      	str	r3, [r2, #12]
 8002988:	e014      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f867 	bl	8002a74 <RCCEx_PLLSAI1_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02f      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ce:	4928      	ldr	r1, [pc, #160]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029de:	d10d      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	2102      	movs	r1, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f844 	bl	8002a74 <RCCEx_PLLSAI1_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d014      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	74bb      	strb	r3, [r7, #18]
 80029fa:	e011      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3320      	adds	r3, #32
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f925 	bl	8002c5c <RCCEx_PLLSAI2_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a2c:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a3a:	490d      	ldr	r1, [pc, #52]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a5e:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a66:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000

08002a74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a82:	4b75      	ldr	r3, [pc, #468]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d018      	beq.n	8002ac0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a8e:	4b72      	ldr	r3, [pc, #456]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d10d      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d047      	beq.n	8002b4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e044      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d018      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x86>
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d825      	bhi.n	8002b18 <RCCEx_PLLSAI1_Config+0xa4>
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d002      	beq.n	8002ad6 <RCCEx_PLLSAI1_Config+0x62>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d009      	beq.n	8002ae8 <RCCEx_PLLSAI1_Config+0x74>
 8002ad4:	e020      	b.n	8002b18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad6:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae6:	e01a      	b.n	8002b1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e013      	b.n	8002b22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afa:	4b57      	ldr	r3, [pc, #348]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b06:	4b54      	ldr	r3, [pc, #336]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b16:	e006      	b.n	8002b26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e004      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	430b      	orrs	r3, r1
 8002b44:	4944      	ldr	r1, [pc, #272]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d17d      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b50:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a40      	ldr	r2, [pc, #256]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe f8c2 	bl	8000ce4 <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b62:	e009      	b.n	8002b78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b64:	f7fe f8be 	bl	8000ce4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	73fb      	strb	r3, [r7, #15]
        break;
 8002b76:	e005      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b78:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ef      	bne.n	8002b64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d160      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b90:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	0211      	lsls	r1, r2, #8
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	0912      	lsrs	r2, r2, #4
 8002ba8:	0452      	lsls	r2, r2, #17
 8002baa:	430a      	orrs	r2, r1
 8002bac:	492a      	ldr	r1, [pc, #168]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	610b      	str	r3, [r1, #16]
 8002bb2:	e027      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d112      	bne.n	8002be0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bba:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002bc2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	0211      	lsls	r1, r2, #8
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6912      	ldr	r2, [r2, #16]
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0552      	lsls	r2, r2, #21
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	491f      	ldr	r1, [pc, #124]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	610b      	str	r3, [r1, #16]
 8002bde:	e011      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002be8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6892      	ldr	r2, [r2, #8]
 8002bf0:	0211      	lsls	r1, r2, #8
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6952      	ldr	r2, [r2, #20]
 8002bf6:	0852      	lsrs	r2, r2, #1
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	0652      	lsls	r2, r2, #25
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	4916      	ldr	r1, [pc, #88]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe f868 	bl	8000ce4 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c16:	e009      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c18:	f7fe f864 	bl	8000ce4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	73fb      	strb	r3, [r7, #15]
          break;
 8002c2a:	e005      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ef      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	4904      	ldr	r1, [pc, #16]	@ (8002c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000

08002c5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c76:	4b67      	ldr	r3, [pc, #412]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
       ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c8e:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d047      	beq.n	8002d32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e044      	b.n	8002d32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d018      	beq.n	8002ce2 <RCCEx_PLLSAI2_Config+0x86>
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d825      	bhi.n	8002d00 <RCCEx_PLLSAI2_Config+0xa4>
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d002      	beq.n	8002cbe <RCCEx_PLLSAI2_Config+0x62>
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d009      	beq.n	8002cd0 <RCCEx_PLLSAI2_Config+0x74>
 8002cbc:	e020      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cbe:	4b55      	ldr	r3, [pc, #340]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11d      	bne.n	8002d06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cce:	e01a      	b.n	8002d06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd0:	4b50      	ldr	r3, [pc, #320]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce0:	e013      	b.n	8002d0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cee:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cfe:	e006      	b.n	8002d0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e004      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d16:	4b3f      	ldr	r3, [pc, #252]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	4939      	ldr	r1, [pc, #228]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d167      	bne.n	8002e08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d38:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a35      	ldr	r2, [pc, #212]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fd ffce 	bl	8000ce4 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d4a:	e009      	b.n	8002d60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d4c:	f7fd ffca 	bl	8000ce4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d902      	bls.n	8002d60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d5e:	e005      	b.n	8002d6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d60:	4b2c      	ldr	r3, [pc, #176]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ef      	bne.n	8002d4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d14a      	bne.n	8002e08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d78:	4b26      	ldr	r3, [pc, #152]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	0211      	lsls	r1, r2, #8
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	0912      	lsrs	r2, r2, #4
 8002d90:	0452      	lsls	r2, r2, #17
 8002d92:	430a      	orrs	r2, r1
 8002d94:	491f      	ldr	r1, [pc, #124]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	614b      	str	r3, [r1, #20]
 8002d9a:	e011      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002da4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6892      	ldr	r2, [r2, #8]
 8002dac:	0211      	lsls	r1, r2, #8
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6912      	ldr	r2, [r2, #16]
 8002db2:	0852      	lsrs	r2, r2, #1
 8002db4:	3a01      	subs	r2, #1
 8002db6:	0652      	lsls	r2, r2, #25
 8002db8:	430a      	orrs	r2, r1
 8002dba:	4916      	ldr	r1, [pc, #88]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a13      	ldr	r2, [pc, #76]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fd ff8a 	bl	8000ce4 <HAL_GetTick>
 8002dd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dd2:	e009      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd4:	f7fd ff86 	bl	8000ce4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d902      	bls.n	8002de8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	73fb      	strb	r3, [r7, #15]
          break;
 8002de6:	e005      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ef      	beq.n	8002dd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4904      	ldr	r1, [pc, #16]	@ (8002e14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e095      	b.n	8002f56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e3a:	d009      	beq.n	8002e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd fd2c 	bl	80008c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e90:	d902      	bls.n	8002e98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e002      	b.n	8002e9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ea6:	d007      	beq.n	8002eb8 <HAL_SPI_Init+0xa0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	ea42 0103 	orr.w	r1, r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	0c1b      	lsrs	r3, r3, #16
 8002f14:	f003 0204 	and.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f34:	ea42 0103 	orr.w	r1, r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f74:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d00c      	beq.n	8002f9c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f88:	d106      	bne.n	8002f98 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_TransmitReceive_DMA+0x38>
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d001      	beq.n	8002f9c <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e158      	b.n	800324e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e14d      	b.n	800324e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e146      	b.n	800324e <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003024:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800302e:	d908      	bls.n	8003042 <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	e06f      	b.n	8003122 <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003050:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305c:	d126      	bne.n	80030ac <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003078:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003088:	e010      	b.n	80030ac <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003098:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b6:	d134      	bne.n	8003122 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030c6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80030fa:	e012      	b.n	8003122 <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800310a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003112:	b29b      	uxth	r3, r3
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	3301      	adds	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b04      	cmp	r3, #4
 800312c:	d108      	bne.n	8003140 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	4a49      	ldr	r2, [pc, #292]	@ (8003258 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	4a48      	ldr	r2, [pc, #288]	@ (800325c <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800313e:	e007      	b.n	8003150 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	4a46      	ldr	r2, [pc, #280]	@ (8003260 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	4a45      	ldr	r2, [pc, #276]	@ (8003264 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4a44      	ldr	r2, [pc, #272]	@ (8003268 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003156:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	2200      	movs	r2, #0
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	4619      	mov	r1, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003178:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800317a:	f7fd ffad 	bl	80010d8 <HAL_DMA_Start_IT>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	f043 0210 	orr.w	r2, r3, #16
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e058      	b.n	800324e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	2200      	movs	r2, #0
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	2200      	movs	r2, #0
 80031c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c8:	2200      	movs	r2, #0
 80031ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	4619      	mov	r1, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80031e4:	f7fd ff78 	bl	80010d8 <HAL_DMA_Start_IT>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e023      	b.n	800324e <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d007      	beq.n	8003224 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003222:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0220 	orr.w	r2, r2, #32
 800323a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0202 	orr.w	r2, r2, #2
 800324a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	080035f5 	.word	0x080035f5
 800325c:	080034bd 	.word	0x080034bd
 8003260:	08003611 	.word	0x08003611
 8003264:	08003565 	.word	0x08003565
 8003268:	0800362d 	.word	0x0800362d

0800326c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    return;
 80032ae:	e0d7      	b.n	8003460 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_SPI_IRQHandler+0x66>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	09db      	lsrs	r3, r3, #7
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
    return;
 80032d0:	e0c6      	b.n	8003460 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_SPI_IRQHandler+0x8c>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	099b      	lsrs	r3, r3, #6
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80b4 	beq.w	8003460 <HAL_SPI_IRQHandler+0x1f4>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ad 	beq.w	8003460 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d023      	beq.n	800335a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b03      	cmp	r3, #3
 800331c:	d011      	beq.n	8003342 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	e00b      	b.n	800335a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]
        return;
 8003358:	e082      	b.n	8003460 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	095b      	lsrs	r3, r3, #5
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d014      	beq.n	8003390 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a0:	f043 0208 	orr.w	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04f      	beq.n	800345e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_SPI_IRQHandler+0x17e>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d034      	beq.n	8003454 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0203 	bic.w	r2, r2, #3
 80033f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d011      	beq.n	8003426 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_SPI_IRQHandler+0x1fc>)
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd ff00 	bl	8001214 <HAL_DMA_Abort_IT>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <HAL_SPI_IRQHandler+0x1fc>)
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd feea 	bl	8001214 <HAL_DMA_Abort_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003452:	e003      	b.n	800345c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f827 	bl	80034a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800345a:	e000      	b.n	800345e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800345c:	bf00      	nop
    return;
 800345e:	bf00      	nop
  }
}
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	0800366d 	.word	0x0800366d

0800346c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ca:	f7fd fc0b 	bl	8000ce4 <HAL_GetTick>
 80034ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d03c      	beq.n	8003558 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0220 	bic.w	r2, r2, #32
 80034ec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <SPI_DMAReceiveCplt+0x56>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034fe:	d108      	bne.n	8003512 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0203 	bic.w	r2, r2, #3
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	e007      	b.n	8003522 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	2164      	movs	r1, #100	@ 0x64
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f9d4 	bl	80038d4 <SPI_EndRxTransaction>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff ffa9 	bl	80034a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003556:	e002      	b.n	800355e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff ff87 	bl	800346c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003570:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003572:	f7fd fbb7 	bl	8000ce4 <HAL_GetTick>
 8003576:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b20      	cmp	r3, #32
 8003584:	d030      	beq.n	80035e8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0220 	bic.w	r2, r2, #32
 8003594:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	2164      	movs	r1, #100	@ 0x64
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f9f2 	bl	8003984 <SPI_EndRxTxTransaction>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0203 	bic.w	r2, r2, #3
 80035c0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff61 	bl	80034a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035e6:	e002      	b.n	80035ee <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7fc ff83 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff3c 	bl	8003480 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff38 	bl	8003494 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0203 	bic.w	r2, r2, #3
 8003648:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364e:	f043 0210 	orr.w	r2, r3, #16
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff ff22 	bl	80034a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff ff0d 	bl	80034a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036a8:	f7fd fb1c 	bl	8000ce4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036b8:	f7fd fb14 	bl	8000ce4 <HAL_GetTick>
 80036bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036be:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	015b      	lsls	r3, r3, #5
 80036c4:	0d1b      	lsrs	r3, r3, #20
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ce:	e054      	b.n	800377a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d050      	beq.n	800377a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036d8:	f7fd fb04 	bl	8000ce4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d902      	bls.n	80036ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d13d      	bne.n	800376a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003706:	d111      	bne.n	800372c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003710:	d004      	beq.n	800371c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800371a:	d107      	bne.n	800372c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003734:	d10f      	bne.n	8003756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e017      	b.n	800379a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3b01      	subs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	429a      	cmp	r2, r3
 8003796:	d19b      	bne.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ba:	f7fd fa93 	bl	8000ce4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80037ca:	f7fd fa8b 	bl	8000ce4 <HAL_GetTick>
 80037ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037d8:	4b3d      	ldr	r3, [pc, #244]	@ (80038d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00da      	lsls	r2, r3, #3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	0d1b      	lsrs	r3, r3, #20
 80037e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037f0:	e060      	b.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037f8:	d107      	bne.n	800380a <SPI_WaitFifoStateUntilTimeout+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003808:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d050      	beq.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003812:	f7fd fa67 	bl	8000ce4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	429a      	cmp	r2, r3
 8003820:	d902      	bls.n	8003828 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d13d      	bne.n	80038a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003840:	d111      	bne.n	8003866 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384a:	d004      	beq.n	8003856 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003854:	d107      	bne.n	8003866 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003864:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386e:	d10f      	bne.n	8003890 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800388e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e010      	b.n	80038c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d196      	bne.n	80037f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3728      	adds	r7, #40	@ 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	2000000c 	.word	0x2000000c

080038d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e8:	d111      	bne.n	800390e <SPI_EndRxTransaction+0x3a>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f2:	d004      	beq.n	80038fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fc:	d107      	bne.n	800390e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	@ 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff febd 	bl	8003698 <SPI_WaitFlagStateUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e023      	b.n	800397c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393c:	d11d      	bne.n	800397a <SPI_EndRxTransaction+0xa6>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003946:	d004      	beq.n	8003952 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003950:	d113      	bne.n	800397a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff ff22 	bl	80037a8 <SPI_WaitFifoStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e000      	b.n	800397c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff03 	bl	80037a8 <SPI_WaitFifoStateUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e027      	b.n	8003a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	2180      	movs	r1, #128	@ 0x80
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff fe68 	bl	8003698 <SPI_WaitFlagStateUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e014      	b.n	8003a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fedc 	bl	80037a8 <SPI_WaitFifoStateUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e000      	b.n	8003a08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e040      	b.n	8003aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fc ffee 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	@ 0x24
 8003a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fe90 	bl	800477c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fbd5 	bl	800420c <UART_SetConfig>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e01b      	b.n	8003aa4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 ff0f 	bl	80048c0 <UART_CheckIdleState>
 8003aa2:	4603      	mov	r3, r0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	@ 0x28
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d177      	bne.n	8003bb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_UART_Transmit+0x24>
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e070      	b.n	8003bb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2221      	movs	r2, #33	@ 0x21
 8003ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae2:	f7fd f8ff 	bl	8000ce4 <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	88fa      	ldrh	r2, [r7, #6]
 8003af4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b00:	d108      	bne.n	8003b14 <HAL_UART_Transmit+0x68>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e003      	b.n	8003b1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b1c:	e02f      	b.n	8003b7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	@ 0x80
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 ff71 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e03b      	b.n	8003bb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	881a      	ldrh	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b50:	b292      	uxth	r2, r2
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	3302      	adds	r3, #2
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e007      	b.n	8003b6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1c9      	bne.n	8003b1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2200      	movs	r2, #0
 8003b92:	2140      	movs	r1, #64	@ 0x40
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 ff3b 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e005      	b.n	8003bb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003be6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003bea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003bee:	4013      	ands	r3, r2
 8003bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d115      	bne.n	8003c28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00f      	beq.n	8003c28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 82ca 	beq.w	80041b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
      }
      return;
 8003c26:	e2c4      	b.n	80041b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8117 	beq.w	8003e60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c42:	4b85      	ldr	r3, [pc, #532]	@ (8003e58 <HAL_UART_IRQHandler+0x298>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 810a 	beq.w	8003e60 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d011      	beq.n	8003c7c <HAL_UART_IRQHandler+0xbc>
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c72:	f043 0201 	orr.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d011      	beq.n	8003cac <HAL_UART_IRQHandler+0xec>
 8003c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	f043 0204 	orr.w	r2, r3, #4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d011      	beq.n	8003cdc <HAL_UART_IRQHandler+0x11c>
 8003cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd2:	f043 0202 	orr.w	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d017      	beq.n	8003d18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2208      	movs	r2, #8
 8003d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0e:	f043 0208 	orr.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <HAL_UART_IRQHandler+0x18a>
 8003d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00c      	beq.n	8003d4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8230 	beq.w	80041b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d04f      	beq.n	8003e42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fea1 	bl	8004aea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b40      	cmp	r3, #64	@ 0x40
 8003db4:	d141      	bne.n	8003e3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003de2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1d9      	bne.n	8003db6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d013      	beq.n	8003e32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0e:	4a13      	ldr	r2, [pc, #76]	@ (8003e5c <HAL_UART_IRQHandler+0x29c>)
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd f9fc 	bl	8001214 <HAL_DMA_Abort_IT>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00f      	b.n	8003e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9d4 	bl	80041e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e00b      	b.n	8003e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9d0 	bl	80041e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	e007      	b.n	8003e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f9cc 	bl	80041e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e50:	e1b1      	b.n	80041b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e52:	bf00      	nop
    return;
 8003e54:	e1af      	b.n	80041b6 <HAL_UART_IRQHandler+0x5f6>
 8003e56:	bf00      	nop
 8003e58:	04000120 	.word	0x04000120
 8003e5c:	08004bb3 	.word	0x08004bb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 816a 	bne.w	800413e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8163 	beq.w	800413e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 815c 	beq.w	800413e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	f040 80d4 	bne.w	8004046 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80ad 	beq.w	800400e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	f080 80a5 	bcs.w	800400e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 8086 	bne.w	8003fec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1da      	bne.n	8003ee0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e1      	bne.n	8003f2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e3      	bne.n	8003f66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fbc:	f023 0310 	bic.w	r3, r3, #16
 8003fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e4      	bne.n	8003fac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd f8d6 	bl	8001198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	b29b      	uxth	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8f4 	bl	80041f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800400c:	e0d5      	b.n	80041ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004018:	429a      	cmp	r2, r3
 800401a:	f040 80ce 	bne.w	80041ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b20      	cmp	r3, #32
 800402c:	f040 80c5 	bne.w	80041ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8d8 	bl	80041f4 <HAL_UARTEx_RxEventCallback>
      return;
 8004044:	e0b9      	b.n	80041ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004052:	b29b      	uxth	r3, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80ab 	beq.w	80041be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a6 	beq.w	80041be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004086:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004094:	647b      	str	r3, [r7, #68]	@ 0x44
 8004096:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800409a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e4      	bne.n	8004072 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	623b      	str	r3, [r7, #32]
   return(result);
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e3      	bne.n	80040a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	60fb      	str	r3, [r7, #12]
   return(result);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 0310 	bic.w	r3, r3, #16
 8004108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	617b      	str	r3, [r7, #20]
   return(result);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e4      	bne.n	80040f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f85c 	bl	80041f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800413c:	e03f      	b.n	80041be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00e      	beq.n	8004168 <HAL_UART_IRQHandler+0x5a8>
 800414a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800414e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800415e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fd66 	bl	8004c32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004166:	e02d      	b.n	80041c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01c      	beq.n	80041c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
    }
    return;
 8004190:	e017      	b.n	80041c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d012      	beq.n	80041c4 <HAL_UART_IRQHandler+0x604>
 800419e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00c      	beq.n	80041c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fd17 	bl	8004bde <UART_EndTransmit_IT>
    return;
 80041b0:	e008      	b.n	80041c4 <HAL_UART_IRQHandler+0x604>
      return;
 80041b2:	bf00      	nop
 80041b4:	e006      	b.n	80041c4 <HAL_UART_IRQHandler+0x604>
    return;
 80041b6:	bf00      	nop
 80041b8:	e004      	b.n	80041c4 <HAL_UART_IRQHandler+0x604>
      return;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <HAL_UART_IRQHandler+0x604>
      return;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_UART_IRQHandler+0x604>
    return;
 80041c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80041c4:	37e8      	adds	r7, #232	@ 0xe8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop

080041cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b08a      	sub	sp, #40	@ 0x28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	431a      	orrs	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4313      	orrs	r3, r2
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4ba4      	ldr	r3, [pc, #656]	@ (80044cc <UART_SetConfig+0x2c0>)
 800423c:	4013      	ands	r3, r2
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004244:	430b      	orrs	r3, r1
 8004246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a99      	ldr	r2, [pc, #612]	@ (80044d0 <UART_SetConfig+0x2c4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004274:	4313      	orrs	r3, r2
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a90      	ldr	r2, [pc, #576]	@ (80044d4 <UART_SetConfig+0x2c8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d126      	bne.n	80042e4 <UART_SetConfig+0xd8>
 8004296:	4b90      	ldr	r3, [pc, #576]	@ (80044d8 <UART_SetConfig+0x2cc>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d81b      	bhi.n	80042dc <UART_SetConfig+0xd0>
 80042a4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <UART_SetConfig+0xa0>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	080042c5 	.word	0x080042c5
 80042b8:	080042d5 	.word	0x080042d5
 80042bc:	2301      	movs	r3, #1
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c2:	e116      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ca:	e112      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d2:	e10e      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042da:	e10a      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e2:	e106      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a7c      	ldr	r2, [pc, #496]	@ (80044dc <UART_SetConfig+0x2d0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d138      	bne.n	8004360 <UART_SetConfig+0x154>
 80042ee:	4b7a      	ldr	r3, [pc, #488]	@ (80044d8 <UART_SetConfig+0x2cc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b0c      	cmp	r3, #12
 80042fa:	d82d      	bhi.n	8004358 <UART_SetConfig+0x14c>
 80042fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <UART_SetConfig+0xf8>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004339 	.word	0x08004339
 8004308:	08004359 	.word	0x08004359
 800430c:	08004359 	.word	0x08004359
 8004310:	08004359 	.word	0x08004359
 8004314:	08004349 	.word	0x08004349
 8004318:	08004359 	.word	0x08004359
 800431c:	08004359 	.word	0x08004359
 8004320:	08004359 	.word	0x08004359
 8004324:	08004341 	.word	0x08004341
 8004328:	08004359 	.word	0x08004359
 800432c:	08004359 	.word	0x08004359
 8004330:	08004359 	.word	0x08004359
 8004334:	08004351 	.word	0x08004351
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433e:	e0d8      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004340:	2302      	movs	r3, #2
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e0d4      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004348:	2304      	movs	r3, #4
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e0d0      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004350:	2308      	movs	r3, #8
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e0cc      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004358:	2310      	movs	r3, #16
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e0c8      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5e      	ldr	r2, [pc, #376]	@ (80044e0 <UART_SetConfig+0x2d4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d125      	bne.n	80043b6 <UART_SetConfig+0x1aa>
 800436a:	4b5b      	ldr	r3, [pc, #364]	@ (80044d8 <UART_SetConfig+0x2cc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004370:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004374:	2b30      	cmp	r3, #48	@ 0x30
 8004376:	d016      	beq.n	80043a6 <UART_SetConfig+0x19a>
 8004378:	2b30      	cmp	r3, #48	@ 0x30
 800437a:	d818      	bhi.n	80043ae <UART_SetConfig+0x1a2>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d00a      	beq.n	8004396 <UART_SetConfig+0x18a>
 8004380:	2b20      	cmp	r3, #32
 8004382:	d814      	bhi.n	80043ae <UART_SetConfig+0x1a2>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <UART_SetConfig+0x182>
 8004388:	2b10      	cmp	r3, #16
 800438a:	d008      	beq.n	800439e <UART_SetConfig+0x192>
 800438c:	e00f      	b.n	80043ae <UART_SetConfig+0x1a2>
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004394:	e0ad      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004396:	2302      	movs	r3, #2
 8004398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439c:	e0a9      	b.n	80044f2 <UART_SetConfig+0x2e6>
 800439e:	2304      	movs	r3, #4
 80043a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a4:	e0a5      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80043a6:	2308      	movs	r3, #8
 80043a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ac:	e0a1      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80043ae:	2310      	movs	r3, #16
 80043b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b4:	e09d      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4a      	ldr	r2, [pc, #296]	@ (80044e4 <UART_SetConfig+0x2d8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d125      	bne.n	800440c <UART_SetConfig+0x200>
 80043c0:	4b45      	ldr	r3, [pc, #276]	@ (80044d8 <UART_SetConfig+0x2cc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80043cc:	d016      	beq.n	80043fc <UART_SetConfig+0x1f0>
 80043ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80043d0:	d818      	bhi.n	8004404 <UART_SetConfig+0x1f8>
 80043d2:	2b80      	cmp	r3, #128	@ 0x80
 80043d4:	d00a      	beq.n	80043ec <UART_SetConfig+0x1e0>
 80043d6:	2b80      	cmp	r3, #128	@ 0x80
 80043d8:	d814      	bhi.n	8004404 <UART_SetConfig+0x1f8>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <UART_SetConfig+0x1d8>
 80043de:	2b40      	cmp	r3, #64	@ 0x40
 80043e0:	d008      	beq.n	80043f4 <UART_SetConfig+0x1e8>
 80043e2:	e00f      	b.n	8004404 <UART_SetConfig+0x1f8>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e082      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80043ec:	2302      	movs	r3, #2
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e07e      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e07a      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004402:	e076      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e072      	b.n	80044f2 <UART_SetConfig+0x2e6>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a35      	ldr	r2, [pc, #212]	@ (80044e8 <UART_SetConfig+0x2dc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d12a      	bne.n	800446c <UART_SetConfig+0x260>
 8004416:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <UART_SetConfig+0x2cc>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004424:	d01a      	beq.n	800445c <UART_SetConfig+0x250>
 8004426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442a:	d81b      	bhi.n	8004464 <UART_SetConfig+0x258>
 800442c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004430:	d00c      	beq.n	800444c <UART_SetConfig+0x240>
 8004432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004436:	d815      	bhi.n	8004464 <UART_SetConfig+0x258>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <UART_SetConfig+0x238>
 800443c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004440:	d008      	beq.n	8004454 <UART_SetConfig+0x248>
 8004442:	e00f      	b.n	8004464 <UART_SetConfig+0x258>
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e052      	b.n	80044f2 <UART_SetConfig+0x2e6>
 800444c:	2302      	movs	r3, #2
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e04e      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004454:	2304      	movs	r3, #4
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e04a      	b.n	80044f2 <UART_SetConfig+0x2e6>
 800445c:	2308      	movs	r3, #8
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004462:	e046      	b.n	80044f2 <UART_SetConfig+0x2e6>
 8004464:	2310      	movs	r3, #16
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e042      	b.n	80044f2 <UART_SetConfig+0x2e6>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <UART_SetConfig+0x2c4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d13a      	bne.n	80044ec <UART_SetConfig+0x2e0>
 8004476:	4b18      	ldr	r3, [pc, #96]	@ (80044d8 <UART_SetConfig+0x2cc>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004484:	d01a      	beq.n	80044bc <UART_SetConfig+0x2b0>
 8004486:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800448a:	d81b      	bhi.n	80044c4 <UART_SetConfig+0x2b8>
 800448c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004490:	d00c      	beq.n	80044ac <UART_SetConfig+0x2a0>
 8004492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004496:	d815      	bhi.n	80044c4 <UART_SetConfig+0x2b8>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <UART_SetConfig+0x298>
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a0:	d008      	beq.n	80044b4 <UART_SetConfig+0x2a8>
 80044a2:	e00f      	b.n	80044c4 <UART_SetConfig+0x2b8>
 80044a4:	2300      	movs	r3, #0
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044aa:	e022      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80044ac:	2302      	movs	r3, #2
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b2:	e01e      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80044b4:	2304      	movs	r3, #4
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ba:	e01a      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80044bc:	2308      	movs	r3, #8
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c2:	e016      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80044c4:	2310      	movs	r3, #16
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ca:	e012      	b.n	80044f2 <UART_SetConfig+0x2e6>
 80044cc:	efff69f3 	.word	0xefff69f3
 80044d0:	40008000 	.word	0x40008000
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40004400 	.word	0x40004400
 80044e0:	40004800 	.word	0x40004800
 80044e4:	40004c00 	.word	0x40004c00
 80044e8:	40005000 	.word	0x40005000
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a9f      	ldr	r2, [pc, #636]	@ (8004774 <UART_SetConfig+0x568>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d17a      	bne.n	80045f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004500:	2b08      	cmp	r3, #8
 8004502:	d824      	bhi.n	800454e <UART_SetConfig+0x342>
 8004504:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <UART_SetConfig+0x300>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004531 	.word	0x08004531
 8004510:	0800454f 	.word	0x0800454f
 8004514:	08004539 	.word	0x08004539
 8004518:	0800454f 	.word	0x0800454f
 800451c:	0800453f 	.word	0x0800453f
 8004520:	0800454f 	.word	0x0800454f
 8004524:	0800454f 	.word	0x0800454f
 8004528:	0800454f 	.word	0x0800454f
 800452c:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fd ff2a 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004534:	61f8      	str	r0, [r7, #28]
        break;
 8004536:	e010      	b.n	800455a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b8f      	ldr	r3, [pc, #572]	@ (8004778 <UART_SetConfig+0x56c>)
 800453a:	61fb      	str	r3, [r7, #28]
        break;
 800453c:	e00d      	b.n	800455a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7fd fe8b 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8004542:	61f8      	str	r0, [r7, #28]
        break;
 8004544:	e009      	b.n	800455a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800454a:	61fb      	str	r3, [r7, #28]
        break;
 800454c:	e005      	b.n	800455a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80fb 	beq.w	8004758 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	429a      	cmp	r2, r3
 8004570:	d305      	bcc.n	800457e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	429a      	cmp	r2, r3
 800457c:	d903      	bls.n	8004586 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004584:	e0e8      	b.n	8004758 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2200      	movs	r2, #0
 800458a:	461c      	mov	r4, r3
 800458c:	4615      	mov	r5, r2
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	022b      	lsls	r3, r5, #8
 8004598:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800459c:	0222      	lsls	r2, r4, #8
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	6849      	ldr	r1, [r1, #4]
 80045a2:	0849      	lsrs	r1, r1, #1
 80045a4:	2000      	movs	r0, #0
 80045a6:	4688      	mov	r8, r1
 80045a8:	4681      	mov	r9, r0
 80045aa:	eb12 0a08 	adds.w	sl, r2, r8
 80045ae:	eb43 0b09 	adc.w	fp, r3, r9
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c0:	4650      	mov	r0, sl
 80045c2:	4659      	mov	r1, fp
 80045c4:	f7fb fe00 	bl	80001c8 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d6:	d308      	bcc.n	80045ea <UART_SetConfig+0x3de>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045de:	d204      	bcs.n	80045ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	e0b6      	b.n	8004758 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045f0:	e0b2      	b.n	8004758 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fa:	d15e      	bne.n	80046ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004600:	2b08      	cmp	r3, #8
 8004602:	d828      	bhi.n	8004656 <UART_SetConfig+0x44a>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0x400>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004631 	.word	0x08004631
 8004610:	08004639 	.word	0x08004639
 8004614:	08004641 	.word	0x08004641
 8004618:	08004657 	.word	0x08004657
 800461c:	08004647 	.word	0x08004647
 8004620:	08004657 	.word	0x08004657
 8004624:	08004657 	.word	0x08004657
 8004628:	08004657 	.word	0x08004657
 800462c:	0800464f 	.word	0x0800464f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fd feaa 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8004634:	61f8      	str	r0, [r7, #28]
        break;
 8004636:	e014      	b.n	8004662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7fd febc 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 800463c:	61f8      	str	r0, [r7, #28]
        break;
 800463e:	e010      	b.n	8004662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004640:	4b4d      	ldr	r3, [pc, #308]	@ (8004778 <UART_SetConfig+0x56c>)
 8004642:	61fb      	str	r3, [r7, #28]
        break;
 8004644:	e00d      	b.n	8004662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004646:	f7fd fe07 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 800464a:	61f8      	str	r0, [r7, #28]
        break;
 800464c:	e009      	b.n	8004662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004652:	61fb      	str	r3, [r7, #28]
        break;
 8004654:	e005      	b.n	8004662 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d077      	beq.n	8004758 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005a      	lsls	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	441a      	add	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d916      	bls.n	80046b2 <UART_SetConfig+0x4a6>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468a:	d212      	bcs.n	80046b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f023 030f 	bic.w	r3, r3, #15
 8004694:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	8afb      	ldrh	r3, [r7, #22]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	8afa      	ldrh	r2, [r7, #22]
 80046ae:	60da      	str	r2, [r3, #12]
 80046b0:	e052      	b.n	8004758 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046b8:	e04e      	b.n	8004758 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d827      	bhi.n	8004712 <UART_SetConfig+0x506>
 80046c2:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <UART_SetConfig+0x4bc>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fd fe4c 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80046f0:	61f8      	str	r0, [r7, #28]
        break;
 80046f2:	e014      	b.n	800471e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fd fe5e 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 80046f8:	61f8      	str	r0, [r7, #28]
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <UART_SetConfig+0x56c>)
 80046fe:	61fb      	str	r3, [r7, #28]
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fd fda9 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8004706:	61f8      	str	r0, [r7, #28]
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800471c:	bf00      	nop
    }

    if (pclk != 0U)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d019      	beq.n	8004758 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	085a      	lsrs	r2, r3, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d909      	bls.n	8004752 <UART_SetConfig+0x546>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004744:	d205      	bcs.n	8004752 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	e002      	b.n	8004758 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004764:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	@ 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	40008000 	.word	0x40008000
 8004778:	00f42400 	.word	0x00f42400

0800477c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800487a:	d10a      	bne.n	8004892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  }
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b098      	sub	sp, #96	@ 0x60
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048d0:	f7fc fa08 	bl	8000ce4 <HAL_GetTick>
 80048d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d12e      	bne.n	8004942 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f88c 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d021      	beq.n	8004942 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004912:	653b      	str	r3, [r7, #80]	@ 0x50
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800491c:	647b      	str	r3, [r7, #68]	@ 0x44
 800491e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800492a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e6      	bne.n	80048fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e062      	b.n	8004a08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b04      	cmp	r3, #4
 800494e:	d149      	bne.n	80049e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004950:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004958:	2200      	movs	r2, #0
 800495a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f856 	bl	8004a10 <UART_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03c      	beq.n	80049e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	623b      	str	r3, [r7, #32]
   return(result);
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30
 800498a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800498e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3308      	adds	r3, #8
 80049a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049bc:	61fa      	str	r2, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e011      	b.n	8004a08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3758      	adds	r7, #88	@ 0x58
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a20:	e04f      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d04b      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fc f95b 	bl	8000ce4 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e04e      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d037      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b80      	cmp	r3, #128	@ 0x80
 8004a56:	d034      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b40      	cmp	r3, #64	@ 0x40
 8004a5c:	d031      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d110      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2208      	movs	r2, #8
 8004a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f838 	bl	8004aea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e029      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a9c:	d111      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f81e 	bl	8004aea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e00f      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d0a0      	beq.n	8004a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b095      	sub	sp, #84	@ 0x54
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e6      	bne.n	8004af2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e5      	bne.n	8004b24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d118      	bne.n	8004b92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 0310 	bic.w	r3, r3, #16
 8004b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e6      	bne.n	8004b60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ba6:	bf00      	nop
 8004ba8:	3754      	adds	r7, #84	@ 0x54
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fb05 	bl	80041e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b088      	sub	sp, #32
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6979      	ldr	r1, [r7, #20]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	613b      	str	r3, [r7, #16]
   return(result);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e6      	bne.n	8004be6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fad1 	bl	80041cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c2a:	bf00      	nop
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <memset>:
 8004c46:	4402      	add	r2, r0
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d100      	bne.n	8004c50 <memset+0xa>
 8004c4e:	4770      	bx	lr
 8004c50:	f803 1b01 	strb.w	r1, [r3], #1
 8004c54:	e7f9      	b.n	8004c4a <memset+0x4>
	...

08004c58 <__libc_init_array>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c90 <__libc_init_array+0x38>)
 8004c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c94 <__libc_init_array+0x3c>)
 8004c5e:	1b64      	subs	r4, r4, r5
 8004c60:	10a4      	asrs	r4, r4, #2
 8004c62:	2600      	movs	r6, #0
 8004c64:	42a6      	cmp	r6, r4
 8004c66:	d109      	bne.n	8004c7c <__libc_init_array+0x24>
 8004c68:	4d0b      	ldr	r5, [pc, #44]	@ (8004c98 <__libc_init_array+0x40>)
 8004c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c9c <__libc_init_array+0x44>)
 8004c6c:	f000 f818 	bl	8004ca0 <_init>
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	10a4      	asrs	r4, r4, #2
 8004c74:	2600      	movs	r6, #0
 8004c76:	42a6      	cmp	r6, r4
 8004c78:	d105      	bne.n	8004c86 <__libc_init_array+0x2e>
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c80:	4798      	blx	r3
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7ee      	b.n	8004c64 <__libc_init_array+0xc>
 8004c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8a:	4798      	blx	r3
 8004c8c:	3601      	adds	r6, #1
 8004c8e:	e7f2      	b.n	8004c76 <__libc_init_array+0x1e>
 8004c90:	08004d0c 	.word	0x08004d0c
 8004c94:	08004d0c 	.word	0x08004d0c
 8004c98:	08004d0c 	.word	0x08004d0c
 8004c9c:	08004d10 	.word	0x08004d10

08004ca0 <_init>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr

08004cac <_fini>:
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	bf00      	nop
 8004cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb2:	bc08      	pop	{r3}
 8004cb4:	469e      	mov	lr, r3
 8004cb6:	4770      	bx	lr
