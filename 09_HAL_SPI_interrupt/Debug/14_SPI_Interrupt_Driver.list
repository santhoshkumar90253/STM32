
14_SPI_Interrupt_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045fc  080045fc  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000055fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004604  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000001c  08004620  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004620  00006134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd71  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6f  00000000  00000000  00013dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00015d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000902  00000000  00000000  000168e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255a2  00000000  00000000  000171e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def9  00000000  00000000  0003c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e63c8  00000000  00000000  0004a67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb8  00000000  00000000  00130a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00133a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004588 	.word	0x08004588

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004588 	.word	0x08004588

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_SPI_TxRxCpltCallback>:
uint8_t rx_buffer[10];              // Buffer to store received SPI data
uint8_t newline[] = "\r\n";         // Newline for UART output
volatile uint8_t spi_done = 0;      // Flag to indicate SPI transfer is complete

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a12      	ldr	r2, [pc, #72]	@ (800054c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d11d      	bne.n	8000542 <HAL_SPI_TxRxCpltCallback+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // CS high
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	4810      	ldr	r0, [pc, #64]	@ (8000550 <HAL_SPI_TxRxCpltCallback+0x5c>)
 800050e:	f000 fe93 	bl	8001238 <HAL_GPIO_WritePin>

        HAL_UART_Transmit(&huart2, (uint8_t *)"Received: ", 10, HAL_MAX_DELAY);
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	220a      	movs	r2, #10
 8000518:	490e      	ldr	r1, [pc, #56]	@ (8000554 <HAL_SPI_TxRxCpltCallback+0x60>)
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800051c:	f002 ff3a 	bl	8003394 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, rx_buffer, sizeof(tx_buffer), HAL_MAX_DELAY);
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	220a      	movs	r2, #10
 8000526:	490d      	ldr	r1, [pc, #52]	@ (800055c <HAL_SPI_TxRxCpltCallback+0x68>)
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800052a:	f002 ff33 	bl	8003394 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, newline, sizeof(newline)-1, HAL_MAX_DELAY);
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2202      	movs	r2, #2
 8000534:	490a      	ldr	r1, [pc, #40]	@ (8000560 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 8000538:	f002 ff2c 	bl	8003394 <HAL_UART_Transmit>

        spi_done = 1;
 800053c:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <HAL_SPI_TxRxCpltCallback+0x70>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
    }
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40013000 	.word	0x40013000
 8000550:	48000400 	.word	0x48000400
 8000554:	080045a0 	.word	0x080045a0
 8000558:	2000009c 	.word	0x2000009c
 800055c:	20000124 	.word	0x20000124
 8000560:	2000000c 	.word	0x2000000c
 8000564:	2000012e 	.word	0x2000012e

08000568 <main>:

int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 faae 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f82c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8ea 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8b8 	bl	80006ec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800057c:	f000 f878 	bl	8000670 <MX_SPI1_Init>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // Deselect SPI slave initially (CS high)
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480c      	ldr	r0, [pc, #48]	@ (80005b8 <main+0x50>)
 8000588:	f000 fe56 	bl	8001238 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Select SPI slave (CS low)
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000592:	4809      	ldr	r0, [pc, #36]	@ (80005b8 <main+0x50>)
 8000594:	f000 fe50 	bl	8001238 <HAL_GPIO_WritePin>

        // Perform SPI transfer (send txData and receive into rxData)
        HAL_SPI_TransmitReceive_IT(&hspi1, tx_buffer, rx_buffer, sizeof(tx_buffer));
 8000598:	230a      	movs	r3, #10
 800059a:	4a08      	ldr	r2, [pc, #32]	@ (80005bc <main+0x54>)
 800059c:	4908      	ldr	r1, [pc, #32]	@ (80005c0 <main+0x58>)
 800059e:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <main+0x5c>)
 80005a0:	f002 fa26 	bl	80029f0 <HAL_SPI_TransmitReceive_IT>


        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // Deselect SPI slave (CS high)

        // Send received SPI data over UART
        HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer)-1, HAL_MAX_DELAY);
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	2209      	movs	r2, #9
 80005aa:	4905      	ldr	r1, [pc, #20]	@ (80005c0 <main+0x58>)
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <main+0x60>)
 80005ae:	f002 fef1 	bl	8003394 <HAL_UART_Transmit>

     while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x4a>
 80005b6:	bf00      	nop
 80005b8:	48000400 	.word	0x48000400
 80005bc:	20000124 	.word	0x20000124
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000038 	.word	0x20000038
 80005c8:	2000009c 	.word	0x2000009c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 ffa7 	bl	800452e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f000 fe47 	bl	8001284 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 f90e 	bl	800081c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	2310      	movs	r3, #16
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000612:	2302      	movs	r3, #2
 8000614:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800061a:	230a      	movs	r3, #10
 800061c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061e:	2307      	movs	r3, #7
 8000620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fe7e 	bl	8001330 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063a:	f000 f8ef 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2303      	movs	r3, #3
 8000644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2104      	movs	r1, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa46 	bl	8001ae8 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000662:	f000 f8db 	bl	800081c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3758      	adds	r7, #88	@ 0x58
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_SPI1_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <MX_SPI1_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_SPI1_Init+0x74>)
 800067c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_SPI1_Init+0x74>)
 800068a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800068e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_SPI1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_SPI1_Init+0x74>)
 800069e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006be:	2207      	movs	r2, #7
 80006c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_SPI1_Init+0x74>)
 80006d0:	f002 f8ea 	bl	80028a8 <HAL_SPI_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 f89f 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000038 	.word	0x20000038
 80006e8:	40013000 	.word	0x40013000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	f002 fde2 	bl	80032f8 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f86f 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000009c 	.word	0x2000009c
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a2a      	ldr	r2, [pc, #168]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a24      	ldr	r2, [pc, #144]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c8:	4812      	ldr	r0, [pc, #72]	@ (8000814 <MX_GPIO_Init+0xc8>)
 80007ca:	f000 fd35 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_GPIO_Init+0xcc>)
 80007e6:	f000 fb7d 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_GPIO_Init+0xc8>)
 8000804:	f000 fb6e 	bl	8000ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	@ 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	48000400 	.word	0x48000400
 8000818:	48000800 	.word	0x48000800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a1b      	ldr	r2, [pc, #108]	@ (80008fc <HAL_SPI_MspInit+0x8c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d130      	bne.n	80008f4 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a1a      	ldr	r2, [pc, #104]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 8000898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_SPI_MspInit+0x90>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	23e0      	movs	r3, #224	@ 0xe0
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d2:	2305      	movs	r3, #5
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e0:	f000 fb00 	bl	8000ee4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2023      	movs	r0, #35	@ 0x23
 80008ea:	f000 fa46 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008ee:	2023      	movs	r0, #35	@ 0x23
 80008f0:	f000 fa5f 	bl	8000db2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40013000 	.word	0x40013000
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0ac      	sub	sp, #176	@ 0xb0
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2288      	movs	r2, #136	@ 0x88
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fe02 	bl	800452e <memset>
  if(huart->Instance==USART2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a25      	ldr	r2, [pc, #148]	@ (80009c4 <HAL_UART_MspInit+0xc0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d143      	bne.n	80009bc <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000938:	2300      	movs	r3, #0
 800093a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4618      	mov	r0, r3
 8000942:	f001 faf5 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800094c:	f7ff ff66 	bl	800081c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <HAL_UART_MspInit+0xc4>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <HAL_UART_MspInit+0xc4>)
 8000956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800095a:	6593      	str	r3, [r2, #88]	@ 0x58
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <HAL_UART_MspInit+0xc4>)
 800095e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0xc4>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <HAL_UART_MspInit+0xc4>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_UART_MspInit+0xc4>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000980:	230c      	movs	r3, #12
 8000982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000998:	2307      	movs	r3, #7
 800099a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f000 fa9c 	bl	8000ee4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2026      	movs	r0, #38	@ 0x26
 80009b2:	f000 f9e2 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b6:	2026      	movs	r0, #38	@ 0x26
 80009b8:	f000 f9fb 	bl	8000db2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009bc:	bf00      	nop
 80009be:	37b0      	adds	r7, #176	@ 0xb0
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 f8af 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <SPI1_IRQHandler+0x10>)
 8000a32:	f002 f887 	bl	8002b44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000038 	.word	0x20000038

08000a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <USART2_IRQHandler+0x10>)
 8000a46:	f002 fd2f 	bl	80034a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000009c 	.word	0x2000009c

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f003 fd4b 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fd5d 	bl	8000568 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000abc:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 8000ac0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ac4:	20000134 	.word	0x20000134

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_Init+0x3c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_Init+0x3c>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f93e 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f80f 	bl	8000b0c <HAL_InitTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	e001      	b.n	8000afe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afa:	f7ff fe95 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_InitTick+0x6c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d023      	beq.n	8000b68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_InitTick+0x70>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f949 	bl	8000dce <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10f      	bne.n	8000b62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d809      	bhi.n	8000b5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f913 	bl	8000d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_InitTick+0x74>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e007      	b.n	8000b6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e001      	b.n	8000b6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000018 	.word	0x20000018
 8000b7c:	20000010 	.word	0x20000010
 8000b80:	20000014 	.word	0x20000014

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000018 	.word	0x20000018
 8000ba8:	20000130 	.word	0x20000130

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000130 	.word	0x20000130

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	@ (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	@ 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d008      	beq.n	8000e10 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2204      	movs	r2, #4
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e022      	b.n	8000e56 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 020e 	bic.w	r2, r2, #14
 8000e1e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e34:	f003 021c 	and.w	r2, r3, #28
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e42:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d005      	beq.n	8000e86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e029      	b.n	8000eda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 020e 	bic.w	r2, r2, #14
 8000e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f003 021c 	and.w	r2, r3, #28
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	4798      	blx	r3
    }
  }
  return status;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	@ (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	@ (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	@ (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	@ (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e002      	b.n	800125c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <HAL_PWREx_GetVoltageRange+0x18>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40007000 	.word	0x40007000

08001284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001292:	d130      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800129c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012a0:	d038      	beq.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2232      	movs	r2, #50	@ 0x32
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0c9b      	lsrs	r3, r3, #18
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c8:	e002      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012dc:	d102      	bne.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f2      	bne.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f0:	d110      	bne.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e00f      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001302:	d007      	beq.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800130c:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40007000 	.word	0x40007000
 8001328:	20000010 	.word	0x20000010
 800132c:	431bde83 	.word	0x431bde83

08001330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e3ca      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001342:	4b97      	ldr	r3, [pc, #604]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134c:	4b94      	ldr	r3, [pc, #592]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80e4 	beq.w	800152c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <HAL_RCC_OscConfig+0x4a>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	f040 808b 	bne.w	8001488 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	f040 8087 	bne.w	8001488 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x62>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e3a2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	4b82      	ldr	r3, [pc, #520]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_RCC_OscConfig+0x7c>
 80013a2:	4b7f      	ldr	r3, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013aa:	e005      	b.n	80013b8 <HAL_RCC_OscConfig+0x88>
 80013ac:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d223      	bcs.n	8001404 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fd55 	bl	8001e70 <RCC_SetFlashLatencyFromMSIRange>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e383      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d0:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a72      	ldr	r2, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	496d      	ldr	r1, [pc, #436]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ee:	4b6c      	ldr	r3, [pc, #432]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4968      	ldr	r1, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
 8001402:	e025      	b.n	8001450 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001404:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a65      	ldr	r2, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4960      	ldr	r1, [pc, #384]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001422:	4b5f      	ldr	r3, [pc, #380]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	495b      	ldr	r1, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fd15 	bl	8001e70 <RCC_SetFlashLatencyFromMSIRange>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e343      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001450:	f000 fc4a 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b52      	ldr	r3, [pc, #328]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4950      	ldr	r1, [pc, #320]	@ (80015a4 <HAL_RCC_OscConfig+0x274>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <HAL_RCC_OscConfig+0x278>)
 800146e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001470:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb49 	bl	8000b0c <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d052      	beq.n	800152a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	e327      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d032      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001490:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb86 	bl	8000bac <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a4:	f7ff fb82 	bl	8000bac <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e310      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b6:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c2:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a36      	ldr	r2, [pc, #216]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4931      	ldr	r1, [pc, #196]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	492c      	ldr	r1, [pc, #176]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	e01a      	b.n	800152c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001502:	f7ff fb53 	bl	8000bac <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150a:	f7ff fb4f 	bl	8000bac <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e2dd      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151c:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x1da>
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d074      	beq.n	8001622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b08      	cmp	r3, #8
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x21a>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d10e      	bne.n	8001562 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d064      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f0>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d160      	bne.n	8001620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e2ba      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x24a>
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e026      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001582:	d115      	bne.n	80015b0 <HAL_RCC_OscConfig+0x280>
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a02      	ldr	r2, [pc, #8]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	080045ac 	.word	0x080045ac
 80015a8:	20000010 	.word	0x20000010
 80015ac:	20000014 	.word	0x20000014
 80015b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff faec 	bl	8000bac <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fae8 	bl	8000bac <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e276      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	4b92      	ldr	r3, [pc, #584]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2a8>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fad8 	bl	8000bac <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fad4 	bl	8000bac <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e262      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d0>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d060      	beq.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x310>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d119      	bne.n	800166e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d116      	bne.n	800166e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001640:	4b7c      	ldr	r3, [pc, #496]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x328>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e23f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	4973      	ldr	r1, [pc, #460]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166c:	e040      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d023      	beq.n	80016be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001676:	4b6f      	ldr	r3, [pc, #444]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6e      	ldr	r2, [pc, #440]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fa93 	bl	8000bac <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fa8f 	bl	8000bac <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e21d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	495f      	ldr	r1, [pc, #380]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e018      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b5d      	ldr	r3, [pc, #372]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fa6f 	bl	8000bac <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fa6b 	bl	8000bac <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1f9      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03c      	beq.n	8001776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01c      	beq.n	800173e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001704:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170a:	4a4a      	ldr	r2, [pc, #296]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fa4a 	bl	8000bac <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fa46 	bl	8000bac <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1d4      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ef      	beq.n	800171c <HAL_RCC_OscConfig+0x3ec>
 800173c:	e01b      	b.n	8001776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001744:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fa2d 	bl	8000bac <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fa29 	bl	8000bac <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1b7      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a6 	beq.w	80018d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001788:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a26      	ldr	r2, [pc, #152]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a0:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d118      	bne.n	80017ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f9f0 	bl	8000bac <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7ff f9ec 	bl	8000bac <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e17a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d8>
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001806:	e029      	b.n	800185c <HAL_RCC_OscConfig+0x52c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d115      	bne.n	800183c <HAL_RCC_OscConfig+0x50c>
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001826:	4a03      	ldr	r2, [pc, #12]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x52c>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40007000 	.word	0x40007000
 800183c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	4a9b      	ldr	r2, [pc, #620]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184c:	4b98      	ldr	r3, [pc, #608]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	4a97      	ldr	r2, [pc, #604]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d016      	beq.n	8001892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff f9a2 	bl	8000bac <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff f99e 	bl	8000bac <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e12a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ed      	beq.n	800186c <HAL_RCC_OscConfig+0x53c>
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff f98b 	bl	8000bac <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff f987 	bl	8000bac <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e113      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ed      	bne.n	800189a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a79      	ldr	r2, [pc, #484]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80fe 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	2b02      	cmp	r3, #2
 80018e0:	f040 80d0 	bne.w	8001a84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018e4:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d130      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	3b01      	subs	r3, #1
 8001904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d127      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001914:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11f      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001924:	2a07      	cmp	r2, #7
 8001926:	bf14      	ite	ne
 8001928:	2201      	movne	r2, #1
 800192a:	2200      	moveq	r2, #0
 800192c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192e:	4293      	cmp	r3, r2
 8001930:	d113      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d109      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d06e      	beq.n	8001a38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d069      	beq.n	8001a34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001960:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0ad      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800197c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001988:	f7ff f910 	bl	8000bac <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f90c 	bl	8000bac <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e09a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a2:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b40      	ldr	r3, [pc, #256]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019be:	3a01      	subs	r2, #1
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019c8:	0212      	lsls	r2, r2, #8
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019d0:	0852      	lsrs	r2, r2, #1
 80019d2:	3a01      	subs	r2, #1
 80019d4:	0552      	lsls	r2, r2, #21
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019dc:	0852      	lsrs	r2, r2, #1
 80019de:	3a01      	subs	r2, #1
 80019e0:	0652      	lsls	r2, r2, #25
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019e8:	0912      	lsrs	r2, r2, #4
 80019ea:	0452      	lsls	r2, r2, #17
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4930      	ldr	r1, [pc, #192]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a00:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0c:	f7ff f8ce 	bl	8000bac <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f8ca 	bl	8000bac <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a32:	e050      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e04f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d148      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a5c:	f7ff f8a6 	bl	8000bac <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f8a2 	bl	8000bac <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e030      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x734>
 8001a82:	e028      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d023      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f889 	bl	8000bac <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	e00c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f885 	bl	8000bac <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d905      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e013      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x7b0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ec      	bne.n	8001a9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_RCC_OscConfig+0x7b0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4905      	ldr	r1, [pc, #20]	@ (8001ae0 <HAL_RCC_OscConfig+0x7b0>)
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_RCC_OscConfig+0x7b4>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e001      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	feeefffc 	.word	0xfeeefffc

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0e7      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b75      	ldr	r3, [pc, #468]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4970      	ldr	r1, [pc, #448]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cf      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d908      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4960      	ldr	r1, [pc, #384]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04c      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d121      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0a6      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	4b54      	ldr	r3, [pc, #336]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e09a      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e08e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bae:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e086      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b46      	ldr	r3, [pc, #280]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4943      	ldr	r1, [pc, #268]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd0:	f7fe ffec 	bl	8000bac <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7fe ffe8 	bl	8000bac <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e06e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d208      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	492b      	ldr	r1, [pc, #172]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d210      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	4923      	ldr	r1, [pc, #140]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e036      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4918      	ldr	r1, [pc, #96]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4910      	ldr	r1, [pc, #64]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9c:	f000 f824 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	490b      	ldr	r1, [pc, #44]	@ (8001cdc <HAL_RCC_ClockConfig+0x1f4>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe ff23 	bl	8000b0c <HAL_InitTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cca:	7afb      	ldrb	r3, [r7, #11]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	080045ac 	.word	0x080045ac
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20000014 	.word	0x20000014

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x34>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d11e      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d1c:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d44:	4a2b      	ldr	r2, [pc, #172]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	e004      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d134      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0xac>
 8001d8c:	e005      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	e005      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d96:	617b      	str	r3, [r7, #20]
      break;
 8001d98:	e002      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	617b      	str	r3, [r7, #20]
      break;
 8001d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	fb03 f202 	mul.w	r2, r3, r2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0e5b      	lsrs	r3, r3, #25
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de0:	69bb      	ldr	r3, [r7, #24]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	080045c4 	.word	0x080045c4
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000010 	.word	0x20000010

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4904      	ldr	r1, [pc, #16]	@ (8001e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	080045bc 	.word	0x080045bc

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e48:	f7ff ffda 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0adb      	lsrs	r3, r3, #11
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4904      	ldr	r1, [pc, #16]	@ (8001e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080045bc 	.word	0x080045bc

08001e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff f9ee 	bl	8001268 <HAL_PWREx_GetVoltageRange>
 8001e8c:	6178      	str	r0, [r7, #20]
 8001e8e:	e014      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	4a24      	ldr	r2, [pc, #144]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea8:	f7ff f9de 	bl	8001268 <HAL_PWREx_GetVoltageRange>
 8001eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec0:	d10b      	bne.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	@ 0x80
 8001ec6:	d919      	bls.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ecc:	d902      	bls.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e013      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e010      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d902      	bls.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e00a      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	@ 0x80
 8001eea:	d102      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eec:	2302      	movs	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e004      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b70      	cmp	r3, #112	@ 0x70
 8001ef6:	d101      	bne.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 0207 	bic.w	r2, r3, #7
 8001f04:	4909      	ldr	r1, [pc, #36]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d041      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f54:	d02a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f5a:	d824      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f60:	d008      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f66:	d81e      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f70:	d010      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f72:	e018      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f74:	4b86      	ldr	r3, [pc, #536]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a85      	ldr	r2, [pc, #532]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f80:	e015      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fabb 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f92:	e00c      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3320      	adds	r3, #32
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fba6 	bl	80026ec <RCCEx_PLLSAI2_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa4:	e003      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8001faa:	e000      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb4:	4b76      	ldr	r3, [pc, #472]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fc2:	4973      	ldr	r1, [pc, #460]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fca:	e001      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d041      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fe0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fe4:	d02a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fe6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fea:	d824      	bhi.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ff0:	d008      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ff6:	d81e      	bhi.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d010      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002002:	e018      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002004:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a61      	ldr	r2, [pc, #388]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002010:	e015      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fa73 	bl	8002504 <RCCEx_PLLSAI1_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002022:	e00c      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3320      	adds	r3, #32
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fb5e 	bl	80026ec <RCCEx_PLLSAI2_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002034:	e003      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	74fb      	strb	r3, [r7, #19]
      break;
 800203a:	e000      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800203c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002044:	4b52      	ldr	r3, [pc, #328]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002052:	494f      	ldr	r1, [pc, #316]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800205a:	e001      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a0 	beq.w	80021ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002082:	2300      	movs	r3, #0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	4b41      	ldr	r3, [pc, #260]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208c:	4a40      	ldr	r2, [pc, #256]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002092:	6593      	str	r3, [r2, #88]	@ 0x58
 8002094:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b0:	f7fe fd7c 	bl	8000bac <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b6:	e009      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7fe fd78 	bl	8000bac <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d902      	bls.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	74fb      	strb	r3, [r7, #19]
        break;
 80020ca:	e005      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020cc:	4b31      	ldr	r3, [pc, #196]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d15c      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020de:	4b2c      	ldr	r3, [pc, #176]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01f      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210e:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002128:	4a19      	ldr	r2, [pc, #100]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe fd37 	bl	8000bac <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	e00b      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fd33 	bl	8000bac <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d902      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	74fb      	strb	r3, [r7, #19]
            break;
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ec      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800217e:	4904      	ldr	r1, [pc, #16]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002186:	e009      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	74bb      	strb	r3, [r7, #18]
 800218c:	e006      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219c:	7c7b      	ldrb	r3, [r7, #17]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b9e      	ldr	r3, [pc, #632]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a9d      	ldr	r2, [pc, #628]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ba:	4b98      	ldr	r3, [pc, #608]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c0:	f023 0203 	bic.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c8:	4994      	ldr	r1, [pc, #592]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021dc:	4b8f      	ldr	r3, [pc, #572]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 020c 	bic.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ea:	498c      	ldr	r1, [pc, #560]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021fe:	4b87      	ldr	r3, [pc, #540]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	4983      	ldr	r1, [pc, #524]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002220:	4b7e      	ldr	r3, [pc, #504]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	497b      	ldr	r1, [pc, #492]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002242:	4b76      	ldr	r3, [pc, #472]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002250:	4972      	ldr	r1, [pc, #456]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002264:	4b6d      	ldr	r3, [pc, #436]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	496a      	ldr	r1, [pc, #424]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002286:	4b65      	ldr	r3, [pc, #404]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	4961      	ldr	r1, [pc, #388]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a8:	4b5c      	ldr	r3, [pc, #368]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b6:	4959      	ldr	r1, [pc, #356]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ca:	4b54      	ldr	r3, [pc, #336]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d8:	4950      	ldr	r1, [pc, #320]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022ec:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	4948      	ldr	r1, [pc, #288]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	493f      	ldr	r1, [pc, #252]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d028      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002330:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800233e:	4937      	ldr	r1, [pc, #220]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234e:	d106      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002350:	4b32      	ldr	r3, [pc, #200]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a31      	ldr	r2, [pc, #196]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235a:	60d3      	str	r3, [r2, #12]
 800235c:	e011      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002362:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002366:	d10c      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	2101      	movs	r1, #1
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f8c8 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d028      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	491f      	ldr	r1, [pc, #124]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ac:	d106      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ae:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a1a      	ldr	r2, [pc, #104]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b8:	60d3      	str	r3, [r2, #12]
 80023ba:	e011      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f899 	bl	8002504 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02b      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800240a:	d109      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a02      	ldr	r2, [pc, #8]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
 8002418:	e014      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002428:	d10c      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f867 	bl	8002504 <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d02f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002450:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800245e:	4928      	ldr	r1, [pc, #160]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800246a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800246e:	d10d      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	2102      	movs	r1, #2
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f844 	bl	8002504 <RCCEx_PLLSAI1_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002486:	7cfb      	ldrb	r3, [r7, #19]
 8002488:	74bb      	strb	r3, [r7, #18]
 800248a:	e011      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3320      	adds	r3, #32
 800249a:	2102      	movs	r1, #2
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f925 	bl	80026ec <RCCEx_PLLSAI2_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024bc:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024ca:	490d      	ldr	r1, [pc, #52]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024ee:	4904      	ldr	r1, [pc, #16]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000

08002504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002512:	4b75      	ldr	r3, [pc, #468]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d018      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800251e:	4b72      	ldr	r3, [pc, #456]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0203 	and.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d10d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
       ||
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002536:	4b6c      	ldr	r3, [pc, #432]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
       ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d047      	beq.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e044      	b.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d018      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x86>
 8002558:	2b03      	cmp	r3, #3
 800255a:	d825      	bhi.n	80025a8 <RCCEx_PLLSAI1_Config+0xa4>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d002      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x62>
 8002560:	2b02      	cmp	r3, #2
 8002562:	d009      	beq.n	8002578 <RCCEx_PLLSAI1_Config+0x74>
 8002564:	e020      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002566:	4b60      	ldr	r3, [pc, #384]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d11d      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002576:	e01a      	b.n	80025ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002578:	4b5b      	ldr	r3, [pc, #364]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d116      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e013      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800258a:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002596:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025a6:	e006      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e004      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ae:	bf00      	nop
 80025b0:	e002      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025be:	4b4a      	ldr	r3, [pc, #296]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	430b      	orrs	r3, r1
 80025d4:	4944      	ldr	r1, [pc, #272]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d17d      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025e0:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a40      	ldr	r2, [pc, #256]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fade 	bl	8000bac <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f2:	e009      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f4:	f7fe fada 	bl	8000bac <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
        break;
 8002606:	e005      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002608:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ef      	bne.n	80025f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d160      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002620:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6892      	ldr	r2, [r2, #8]
 8002630:	0211      	lsls	r1, r2, #8
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68d2      	ldr	r2, [r2, #12]
 8002636:	0912      	lsrs	r2, r2, #4
 8002638:	0452      	lsls	r2, r2, #17
 800263a:	430a      	orrs	r2, r1
 800263c:	492a      	ldr	r1, [pc, #168]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	610b      	str	r3, [r1, #16]
 8002642:	e027      	b.n	8002694 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d112      	bne.n	8002670 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264a:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002652:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	0211      	lsls	r1, r2, #8
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6912      	ldr	r2, [r2, #16]
 8002660:	0852      	lsrs	r2, r2, #1
 8002662:	3a01      	subs	r2, #1
 8002664:	0552      	lsls	r2, r2, #21
 8002666:	430a      	orrs	r2, r1
 8002668:	491f      	ldr	r1, [pc, #124]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	610b      	str	r3, [r1, #16]
 800266e:	e011      	b.n	8002694 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002678:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	0211      	lsls	r1, r2, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6952      	ldr	r2, [r2, #20]
 8002686:	0852      	lsrs	r2, r2, #1
 8002688:	3a01      	subs	r2, #1
 800268a:	0652      	lsls	r2, r2, #25
 800268c:	430a      	orrs	r2, r1
 800268e:	4916      	ldr	r1, [pc, #88]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800269e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fa84 	bl	8000bac <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a6:	e009      	b.n	80026bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a8:	f7fe fa80 	bl	8000bac <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d902      	bls.n	80026bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	73fb      	strb	r3, [r7, #15]
          break;
 80026ba:	e005      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	4904      	ldr	r1, [pc, #16]	@ (80026e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000

080026ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026fa:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002706:	4b67      	ldr	r3, [pc, #412]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d10d      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
       ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800271e:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
       ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d047      	beq.n	80027c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e044      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d018      	beq.n	8002772 <RCCEx_PLLSAI2_Config+0x86>
 8002740:	2b03      	cmp	r3, #3
 8002742:	d825      	bhi.n	8002790 <RCCEx_PLLSAI2_Config+0xa4>
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <RCCEx_PLLSAI2_Config+0x62>
 8002748:	2b02      	cmp	r3, #2
 800274a:	d009      	beq.n	8002760 <RCCEx_PLLSAI2_Config+0x74>
 800274c:	e020      	b.n	8002790 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800274e:	4b55      	ldr	r3, [pc, #340]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11d      	bne.n	8002796 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275e:	e01a      	b.n	8002796 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002760:	4b50      	ldr	r3, [pc, #320]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d116      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e013      	b.n	800279a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002772:	4b4c      	ldr	r3, [pc, #304]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800278e:	e006      	b.n	800279e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e004      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002796:	bf00      	nop
 8002798:	e002      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279a:	bf00      	nop
 800279c:	e000      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279e:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10d      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027a6:	4b3f      	ldr	r3, [pc, #252]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	430b      	orrs	r3, r1
 80027bc:	4939      	ldr	r1, [pc, #228]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d167      	bne.n	8002898 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027c8:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a35      	ldr	r2, [pc, #212]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d4:	f7fe f9ea 	bl	8000bac <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027da:	e009      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027dc:	f7fe f9e6 	bl	8000bac <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	73fb      	strb	r3, [r7, #15]
        break;
 80027ee:	e005      	b.n	80027fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027f0:	4b2c      	ldr	r3, [pc, #176]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ef      	bne.n	80027dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d14a      	bne.n	8002898 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002808:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	0211      	lsls	r1, r2, #8
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	0912      	lsrs	r2, r2, #4
 8002820:	0452      	lsls	r2, r2, #17
 8002822:	430a      	orrs	r2, r1
 8002824:	491f      	ldr	r1, [pc, #124]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	614b      	str	r3, [r1, #20]
 800282a:	e011      	b.n	8002850 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800282c:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002834:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	0211      	lsls	r1, r2, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6912      	ldr	r2, [r2, #16]
 8002842:	0852      	lsrs	r2, r2, #1
 8002844:	3a01      	subs	r2, #1
 8002846:	0652      	lsls	r2, r2, #25
 8002848:	430a      	orrs	r2, r1
 800284a:	4916      	ldr	r1, [pc, #88]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe f9a6 	bl	8000bac <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002862:	e009      	b.n	8002878 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002864:	f7fe f9a2 	bl	8000bac <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d902      	bls.n	8002878 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	73fb      	strb	r3, [r7, #15]
          break;
 8002876:	e005      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ef      	beq.n	8002864 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4904      	ldr	r1, [pc, #16]	@ (80028a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e095      	b.n	80029e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028ca:	d009      	beq.n	80028e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
 80028d2:	e005      	b.n	80028e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fd ffb8 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002916:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002920:	d902      	bls.n	8002928 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e002      	b.n	800292e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800292c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002936:	d007      	beq.n	8002948 <HAL_SPI_Init+0xa0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298a:	ea42 0103 	orr.w	r1, r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	0c1b      	lsrs	r3, r3, #16
 80029a4:	f003 0204 	and.w	r2, r3, #4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80029c4:	ea42 0103 	orr.w	r1, r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a04:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00c      	beq.n	8002a2c <HAL_SPI_TransmitReceive_IT+0x3c>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a18:	d106      	bne.n	8002a28 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_SPI_TransmitReceive_IT+0x38>
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d001      	beq.n	8002a2c <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e07d      	b.n	8002b28 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_SPI_TransmitReceive_IT+0x4e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_TransmitReceive_IT+0x4e>
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e072      	b.n	8002b28 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_SPI_TransmitReceive_IT+0x60>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e06b      	b.n	8002b28 <HAL_SPI_TransmitReceive_IT+0x138>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d003      	beq.n	8002a6c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2205      	movs	r2, #5
 8002a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aa2:	d906      	bls.n	8002ab2 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a23      	ldr	r2, [pc, #140]	@ (8002b34 <HAL_SPI_TransmitReceive_IT+0x144>)
 8002aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_SPI_TransmitReceive_IT+0x148>)
 8002aae:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ab0:	e005      	b.n	8002abe <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002abc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ac6:	d802      	bhi.n	8002ace <HAL_SPI_TransmitReceive_IT+0xde>
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d908      	bls.n	8002ae0 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e007      	b.n	8002af0 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002aee:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d007      	beq.n	8002b0e <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002b24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	371c      	adds	r7, #28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	08002ee7 	.word	0x08002ee7
 8002b38:	08002f4d 	.word	0x08002f4d
 8002b3c:	08002d97 	.word	0x08002d97
 8002b40:	08002e55 	.word	0x08002e55

08002b44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
    return;
 8002b86:	e0d7      	b.n	8002d38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_SPI_IRQHandler+0x66>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	09db      	lsrs	r3, r3, #7
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
    return;
 8002ba8:	e0c6      	b.n	8002d38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_SPI_IRQHandler+0x8c>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80b4 	beq.w	8002d38 <HAL_SPI_IRQHandler+0x1f4>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80ad 	beq.w	8002d38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d023      	beq.n	8002c32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d011      	beq.n	8002c1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	e00b      	b.n	8002c32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
        return;
 8002c30:	e082      	b.n	8002d38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d014      	beq.n	8002c68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c78:	f043 0208 	orr.w	r2, r3, #8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d04f      	beq.n	8002d36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ca4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <HAL_SPI_IRQHandler+0x17e>
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d034      	beq.n	8002d2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0203 	bic.w	r2, r2, #3
 8002cd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d011      	beq.n	8002cfe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <HAL_SPI_IRQHandler+0x1fc>)
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe f8bb 	bl	8000e62 <HAL_DMA_Abort_IT>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <HAL_SPI_IRQHandler+0x1fc>)
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f8a5 	bl	8000e62 <HAL_DMA_Abort_IT>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002d2a:	e003      	b.n	8002d34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f813 	bl	8002d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d32:	e000      	b.n	8002d36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002d34:	bf00      	nop
    return;
 8002d36:	bf00      	nop
  }
}
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	08002d6d 	.word	0x08002d6d

08002d44 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff ffe5 	bl	8002d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d923      	bls.n	8002df2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	b292      	uxth	r2, r2
 8002db6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b02      	subs	r3, #2
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d11f      	bne.n	8002e20 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	e016      	b.n	8002e20 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f103 020c 	add.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	7812      	ldrb	r2, [r2, #0]
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10f      	bne.n	8002e4c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e3a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa14 	bl	8003274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d912      	bls.n	8002e8c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e76:	1c9a      	adds	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b02      	subs	r3, #2
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e8a:	e012      	b.n	8002eb2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d110      	bne.n	8002ede <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eca:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f9cb 	bl	8003274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	1c9a      	adds	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f998 	bl	8003274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d110      	bne.n	8002fa4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f90:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f968 	bl	8003274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fbc:	f7fd fdf6 	bl	8000bac <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fcc:	f7fd fdee 	bl	8000bac <HAL_GetTick>
 8002fd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	0d1b      	lsrs	r3, r3, #20
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fe2:	e054      	b.n	800308e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d050      	beq.n	800308e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fec:	f7fd fdde 	bl	8000bac <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d902      	bls.n	8003002 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d13d      	bne.n	800307e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800301a:	d111      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x94>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003024:	d004      	beq.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d107      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003048:	d10f      	bne.n	800306a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e017      	b.n	80030ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3b01      	subs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d19b      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000010 	.word	0x20000010

080030bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030ce:	f7fd fd6d 	bl	8000bac <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80030de:	f7fd fd65 	bl	8000bac <HAL_GetTick>
 80030e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ec:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00da      	lsls	r2, r3, #3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	0d1b      	lsrs	r3, r3, #20
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003104:	e060      	b.n	80031c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800310c:	d107      	bne.n	800311e <SPI_WaitFifoStateUntilTimeout+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800311c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d050      	beq.n	80031c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003126:	f7fd fd41 	bl	8000bac <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003132:	429a      	cmp	r2, r3
 8003134:	d902      	bls.n	800313c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13d      	bne.n	80031b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800314a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003154:	d111      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315e:	d004      	beq.n	800316a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003168:	d107      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003178:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003182:	d10f      	bne.n	80031a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e010      	b.n	80031da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d196      	bne.n	8003106 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	@ 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000010 	.word	0x20000010

080031e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff ff5b 	bl	80030bc <SPI_WaitFifoStateUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e027      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2200      	movs	r2, #0
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7ff fec0 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e014      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2200      	movs	r2, #0
 800324a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ff34 	bl	80030bc <SPI_WaitFifoStateUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e000      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800327c:	f7fd fc96 	bl	8000bac <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0220 	bic.w	r2, r2, #32
 8003290:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	2164      	movs	r1, #100	@ 0x64
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffa6 	bl	80031e8 <SPI_EndRxTxTransaction>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d107      	bne.n	80032d2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fd3a 	bl	8002d44 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80032d0:	e00e      	b.n	80032f0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd f90a 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
}
 80032e0:	e006      	b.n	80032f0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fd34 	bl	8002d58 <HAL_SPI_ErrorCallback>
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e040      	b.n	800338c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd faf2 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	@ 0x24
 8003324:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fe90 	bl	8004064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fbd5 	bl	8003af4 <UART_SetConfig>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01b      	b.n	800338c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 ff0f 	bl	80041a8 <UART_CheckIdleState>
 800338a:	4603      	mov	r3, r0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	@ 0x28
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d177      	bne.n	800349c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_UART_Transmit+0x24>
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e070      	b.n	800349e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2221      	movs	r2, #33	@ 0x21
 80033c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ca:	f7fd fbef 	bl	8000bac <HAL_GetTick>
 80033ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e8:	d108      	bne.n	80033fc <HAL_UART_Transmit+0x68>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d104      	bne.n	80033fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e003      	b.n	8003404 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003404:	e02f      	b.n	8003466 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	2180      	movs	r1, #128	@ 0x80
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 ff71 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e03b      	b.n	800349e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	881a      	ldrh	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003438:	b292      	uxth	r2, r2
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	3302      	adds	r3, #2
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e007      	b.n	8003454 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1c9      	bne.n	8003406 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2140      	movs	r1, #64	@ 0x40
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 ff3b 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e005      	b.n	800349e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0ba      	sub	sp, #232	@ 0xe8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80034d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80034d6:	4013      	ands	r3, r2
 80034d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80034dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d115      	bne.n	8003510 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00f      	beq.n	8003510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 82ca 	beq.w	8003a9a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
      }
      return;
 800350e:	e2c4      	b.n	8003a9a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8117 	beq.w	8003748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800351a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800352a:	4b85      	ldr	r3, [pc, #532]	@ (8003740 <HAL_UART_IRQHandler+0x298>)
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 810a 	beq.w	8003748 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d011      	beq.n	8003564 <HAL_UART_IRQHandler+0xbc>
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d011      	beq.n	8003594 <HAL_UART_IRQHandler+0xec>
 8003570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2202      	movs	r2, #2
 8003582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358a:	f043 0204 	orr.w	r2, r3, #4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d011      	beq.n	80035c4 <HAL_UART_IRQHandler+0x11c>
 80035a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2204      	movs	r2, #4
 80035b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ba:	f043 0202 	orr.w	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d017      	beq.n	8003600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2208      	movs	r2, #8
 80035ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f6:	f043 0208 	orr.w	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003608:	2b00      	cmp	r3, #0
 800360a:	d012      	beq.n	8003632 <HAL_UART_IRQHandler+0x18a>
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003610:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8230 	beq.w	8003a9e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800364a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800366c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d005      	beq.n	800368a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800367e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04f      	beq.n	800372a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fea1 	bl	80043d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d141      	bne.n	8003722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3308      	adds	r3, #8
 80036a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3308      	adds	r3, #8
 80036c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1d9      	bne.n	800369e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f6:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <HAL_UART_IRQHandler+0x29c>)
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fbaf 	bl	8000e62 <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d017      	beq.n	800373a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00f      	b.n	800373a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f9d4 	bl	8003ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00b      	b.n	800373a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f9d0 	bl	8003ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e007      	b.n	800373a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f9cc 	bl	8003ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003738:	e1b1      	b.n	8003a9e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	bf00      	nop
    return;
 800373c:	e1af      	b.n	8003a9e <HAL_UART_IRQHandler+0x5f6>
 800373e:	bf00      	nop
 8003740:	04000120 	.word	0x04000120
 8003744:	0800449b 	.word	0x0800449b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 816a 	bne.w	8003a26 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8163 	beq.w	8003a26 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 815c 	beq.w	8003a26 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003780:	2b40      	cmp	r3, #64	@ 0x40
 8003782:	f040 80d4 	bne.w	800392e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80ad 	beq.w	80038f6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80037a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f080 80a5 	bcs.w	80038f6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 8086 	bne.w	80038d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800380a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1da      	bne.n	80037c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800383a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800383e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e1      	bne.n	8003812 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800385e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e3      	bne.n	800384e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e4      	bne.n	8003894 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fa89 	bl	8000de6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8f4 	bl	8003adc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038f4:	e0d5      	b.n	8003aa2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003900:	429a      	cmp	r2, r3
 8003902:	f040 80ce 	bne.w	8003aa2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	f040 80c5 	bne.w	8003aa2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8d8 	bl	8003adc <HAL_UARTEx_RxEventCallback>
      return;
 800392c:	e0b9      	b.n	8003aa2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800393a:	b29b      	uxth	r3, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80ab 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a6 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800396e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800397c:	647b      	str	r3, [r7, #68]	@ 0x44
 800397e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800398a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e4      	bne.n	800395a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3308      	adds	r3, #8
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	623b      	str	r3, [r7, #32]
   return(result);
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f023 0310 	bic.w	r3, r3, #16
 80039f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e4      	bne.n	80039dc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f85c 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a24:	e03f      	b.n	8003aa6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <HAL_UART_IRQHandler+0x5a8>
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fd66 	bl	800451a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a4e:	e02d      	b.n	8003aac <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01c      	beq.n	8003aaa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
    }
    return;
 8003a78:	e017      	b.n	8003aaa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_UART_IRQHandler+0x604>
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fd17 	bl	80044c6 <UART_EndTransmit_IT>
    return;
 8003a98:	e008      	b.n	8003aac <HAL_UART_IRQHandler+0x604>
      return;
 8003a9a:	bf00      	nop
 8003a9c:	e006      	b.n	8003aac <HAL_UART_IRQHandler+0x604>
    return;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <HAL_UART_IRQHandler+0x604>
      return;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_UART_IRQHandler+0x604>
      return;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_UART_IRQHandler+0x604>
    return;
 8003aaa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003aac:	37e8      	adds	r7, #232	@ 0xe8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop

08003ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b08a      	sub	sp, #40	@ 0x28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4ba4      	ldr	r3, [pc, #656]	@ (8003db4 <UART_SetConfig+0x2c0>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a99      	ldr	r2, [pc, #612]	@ (8003db8 <UART_SetConfig+0x2c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a90      	ldr	r2, [pc, #576]	@ (8003dbc <UART_SetConfig+0x2c8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d126      	bne.n	8003bcc <UART_SetConfig+0xd8>
 8003b7e:	4b90      	ldr	r3, [pc, #576]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d81b      	bhi.n	8003bc4 <UART_SetConfig+0xd0>
 8003b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <UART_SetConfig+0xa0>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb5 	.word	0x08003bb5
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbd 	.word	0x08003bbd
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003baa:	e116      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bac:	2302      	movs	r3, #2
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e112      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e10e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc2:	e10a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e106      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc4 <UART_SetConfig+0x2d0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d138      	bne.n	8003c48 <UART_SetConfig+0x154>
 8003bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d82d      	bhi.n	8003c40 <UART_SetConfig+0x14c>
 8003be4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <UART_SetConfig+0xf8>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c41 	.word	0x08003c41
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e0d8      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e0d4      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e0d0      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3e:	e0cc      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c46:	e0c8      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc8 <UART_SetConfig+0x2d4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d125      	bne.n	8003c9e <UART_SetConfig+0x1aa>
 8003c52:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c5c:	2b30      	cmp	r3, #48	@ 0x30
 8003c5e:	d016      	beq.n	8003c8e <UART_SetConfig+0x19a>
 8003c60:	2b30      	cmp	r3, #48	@ 0x30
 8003c62:	d818      	bhi.n	8003c96 <UART_SetConfig+0x1a2>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d00a      	beq.n	8003c7e <UART_SetConfig+0x18a>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d814      	bhi.n	8003c96 <UART_SetConfig+0x1a2>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <UART_SetConfig+0x182>
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d008      	beq.n	8003c86 <UART_SetConfig+0x192>
 8003c74:	e00f      	b.n	8003c96 <UART_SetConfig+0x1a2>
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7c:	e0ad      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c84:	e0a9      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c86:	2304      	movs	r3, #4
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8c:	e0a5      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c94:	e0a1      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c96:	2310      	movs	r3, #16
 8003c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9c:	e09d      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dcc <UART_SetConfig+0x2d8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d125      	bne.n	8003cf4 <UART_SetConfig+0x200>
 8003ca8:	4b45      	ldr	r3, [pc, #276]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cb4:	d016      	beq.n	8003ce4 <UART_SetConfig+0x1f0>
 8003cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cb8:	d818      	bhi.n	8003cec <UART_SetConfig+0x1f8>
 8003cba:	2b80      	cmp	r3, #128	@ 0x80
 8003cbc:	d00a      	beq.n	8003cd4 <UART_SetConfig+0x1e0>
 8003cbe:	2b80      	cmp	r3, #128	@ 0x80
 8003cc0:	d814      	bhi.n	8003cec <UART_SetConfig+0x1f8>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <UART_SetConfig+0x1d8>
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d008      	beq.n	8003cdc <UART_SetConfig+0x1e8>
 8003cca:	e00f      	b.n	8003cec <UART_SetConfig+0x1f8>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e082      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e07e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e07a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e076      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e072      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a35      	ldr	r2, [pc, #212]	@ (8003dd0 <UART_SetConfig+0x2dc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12a      	bne.n	8003d54 <UART_SetConfig+0x260>
 8003cfe:	4b30      	ldr	r3, [pc, #192]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d0c:	d01a      	beq.n	8003d44 <UART_SetConfig+0x250>
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d12:	d81b      	bhi.n	8003d4c <UART_SetConfig+0x258>
 8003d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d18:	d00c      	beq.n	8003d34 <UART_SetConfig+0x240>
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d1e:	d815      	bhi.n	8003d4c <UART_SetConfig+0x258>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x238>
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d28:	d008      	beq.n	8003d3c <UART_SetConfig+0x248>
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x258>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e052      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e04e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e04a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d44:	2308      	movs	r3, #8
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e046      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d52:	e042      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <UART_SetConfig+0x2c4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d13a      	bne.n	8003dd4 <UART_SetConfig+0x2e0>
 8003d5e:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <UART_SetConfig+0x2cc>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d6c:	d01a      	beq.n	8003da4 <UART_SetConfig+0x2b0>
 8003d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d72:	d81b      	bhi.n	8003dac <UART_SetConfig+0x2b8>
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d78:	d00c      	beq.n	8003d94 <UART_SetConfig+0x2a0>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d7e:	d815      	bhi.n	8003dac <UART_SetConfig+0x2b8>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x298>
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x2a8>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x2b8>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e022      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e01e      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e01a      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e016      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e012      	b.n	8003dda <UART_SetConfig+0x2e6>
 8003db4:	efff69f3 	.word	0xefff69f3
 8003db8:	40008000 	.word	0x40008000
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	40004800 	.word	0x40004800
 8003dcc:	40004c00 	.word	0x40004c00
 8003dd0:	40005000 	.word	0x40005000
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a9f      	ldr	r2, [pc, #636]	@ (800405c <UART_SetConfig+0x568>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d17a      	bne.n	8003eda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d824      	bhi.n	8003e36 <UART_SetConfig+0x342>
 8003dec:	a201      	add	r2, pc, #4	@ (adr r2, 8003df4 <UART_SetConfig+0x300>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e37 	.word	0x08003e37
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e37 	.word	0x08003e37
 8003e04:	08003e27 	.word	0x08003e27
 8003e08:	08003e37 	.word	0x08003e37
 8003e0c:	08003e37 	.word	0x08003e37
 8003e10:	08003e37 	.word	0x08003e37
 8003e14:	08003e2f 	.word	0x08003e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e18:	f7fd fffe 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003e1c:	61f8      	str	r0, [r7, #28]
        break;
 8003e1e:	e010      	b.n	8003e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e20:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <UART_SetConfig+0x56c>)
 8003e22:	61fb      	str	r3, [r7, #28]
        break;
 8003e24:	e00d      	b.n	8003e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e26:	f7fd ff5f 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8003e2a:	61f8      	str	r0, [r7, #28]
        break;
 8003e2c:	e009      	b.n	8003e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e32:	61fb      	str	r3, [r7, #28]
        break;
 8003e34:	e005      	b.n	8003e42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80fb 	beq.w	8004040 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d305      	bcc.n	8003e66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d903      	bls.n	8003e6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e6c:	e0e8      	b.n	8004040 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2200      	movs	r2, #0
 8003e72:	461c      	mov	r4, r3
 8003e74:	4615      	mov	r5, r2
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	022b      	lsls	r3, r5, #8
 8003e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e84:	0222      	lsls	r2, r4, #8
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	6849      	ldr	r1, [r1, #4]
 8003e8a:	0849      	lsrs	r1, r1, #1
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	4688      	mov	r8, r1
 8003e90:	4681      	mov	r9, r0
 8003e92:	eb12 0a08 	adds.w	sl, r2, r8
 8003e96:	eb43 0b09 	adc.w	fp, r3, r9
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	4659      	mov	r1, fp
 8003eac:	f7fc f98c 	bl	80001c8 <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ebe:	d308      	bcc.n	8003ed2 <UART_SetConfig+0x3de>
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec6:	d204      	bcs.n	8003ed2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	e0b6      	b.n	8004040 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ed8:	e0b2      	b.n	8004040 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee2:	d15e      	bne.n	8003fa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d828      	bhi.n	8003f3e <UART_SetConfig+0x44a>
 8003eec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef4 <UART_SetConfig+0x400>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fd ff7e 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61f8      	str	r0, [r7, #28]
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fd ff90 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8003f24:	61f8      	str	r0, [r7, #28]
        break;
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b4d      	ldr	r3, [pc, #308]	@ (8004060 <UART_SetConfig+0x56c>)
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e00d      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fd fedb 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8003f32:	61f8      	str	r0, [r7, #28]
        break;
 8003f34:	e009      	b.n	8003f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f3a:	61fb      	str	r3, [r7, #28]
        break;
 8003f3c:	e005      	b.n	8003f4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d077      	beq.n	8004040 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005a      	lsls	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d916      	bls.n	8003f9a <UART_SetConfig+0x4a6>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f72:	d212      	bcs.n	8003f9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f023 030f 	bic.w	r3, r3, #15
 8003f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	8afb      	ldrh	r3, [r7, #22]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	8afa      	ldrh	r2, [r7, #22]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	e052      	b.n	8004040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fa0:	e04e      	b.n	8004040 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d827      	bhi.n	8003ffa <UART_SetConfig+0x506>
 8003faa:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <UART_SetConfig+0x4bc>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003ffb 	.word	0x08003ffb
 8003fc0:	08003feb 	.word	0x08003feb
 8003fc4:	08003ffb 	.word	0x08003ffb
 8003fc8:	08003ffb 	.word	0x08003ffb
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7fd ff20 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	61f8      	str	r0, [r7, #28]
        break;
 8003fda:	e014      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fd ff32 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	61f8      	str	r0, [r7, #28]
        break;
 8003fe2:	e010      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8004060 <UART_SetConfig+0x56c>)
 8003fe6:	61fb      	str	r3, [r7, #28]
        break;
 8003fe8:	e00d      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fd fe7d 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8003fee:	61f8      	str	r0, [r7, #28]
        break;
 8003ff0:	e009      	b.n	8004006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff6:	61fb      	str	r3, [r7, #28]
        break;
 8003ff8:	e005      	b.n	8004006 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004004:	bf00      	nop
    }

    if (pclk != 0U)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d019      	beq.n	8004040 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	085a      	lsrs	r2, r3, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	d909      	bls.n	800403a <UART_SetConfig+0x546>
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d205      	bcs.n	800403a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	e002      	b.n	8004040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800404c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	40008000 	.word	0x40008000
 8004060:	00f42400 	.word	0x00f42400

08004064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01a      	beq.n	800417a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004162:	d10a      	bne.n	800417a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b098      	sub	sp, #96	@ 0x60
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b8:	f7fc fcf8 	bl	8000bac <HAL_GetTick>
 80041bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d12e      	bne.n	800422a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	2200      	movs	r2, #0
 80041d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f88c 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d021      	beq.n	800422a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
 8004206:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800420a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e6      	bne.n	80041e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e062      	b.n	80042f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d149      	bne.n	80042cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f856 	bl	80042f8 <UART_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03c      	beq.n	80042cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	623b      	str	r3, [r7, #32]
   return(result);
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004270:	633b      	str	r3, [r7, #48]	@ 0x30
 8004272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e6      	bne.n	8004252 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	60fb      	str	r3, [r7, #12]
   return(result);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3308      	adds	r3, #8
 80042a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a4:	61fa      	str	r2, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	617b      	str	r3, [r7, #20]
   return(result);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e011      	b.n	80042f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3758      	adds	r7, #88	@ 0x58
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004308:	e04f      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d04b      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fc fc4b 	bl	8000bac <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <UART_WaitOnFlagUntilTimeout+0x30>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e04e      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d037      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b80      	cmp	r3, #128	@ 0x80
 800433e:	d034      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d031      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d110      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2208      	movs	r2, #8
 800435a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f838 	bl	80043d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2208      	movs	r2, #8
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e029      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004384:	d111      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800438e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f81e 	bl	80043d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d0a0      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b095      	sub	sp, #84	@ 0x54
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e6      	bne.n	80043da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	61fb      	str	r3, [r7, #28]
   return(result);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800442c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004444:	2b01      	cmp	r3, #1
 8004446:	d118      	bne.n	800447a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	60bb      	str	r3, [r7, #8]
   return(result);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	613b      	str	r3, [r7, #16]
   return(result);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800448e:	bf00      	nop
 8004490:	3754      	adds	r7, #84	@ 0x54
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff fb05 	bl	8003ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b088      	sub	sp, #32
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60bb      	str	r3, [r7, #8]
   return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6979      	ldr	r1, [r7, #20]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e6      	bne.n	80044ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fad1 	bl	8003ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004512:	bf00      	nop
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <memset>:
 800452e:	4402      	add	r2, r0
 8004530:	4603      	mov	r3, r0
 8004532:	4293      	cmp	r3, r2
 8004534:	d100      	bne.n	8004538 <memset+0xa>
 8004536:	4770      	bx	lr
 8004538:	f803 1b01 	strb.w	r1, [r3], #1
 800453c:	e7f9      	b.n	8004532 <memset+0x4>
	...

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4d0d      	ldr	r5, [pc, #52]	@ (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	@ (800457c <__libc_init_array+0x3c>)
 8004546:	1b64      	subs	r4, r4, r5
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2600      	movs	r6, #0
 800454c:	42a6      	cmp	r6, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4d0b      	ldr	r5, [pc, #44]	@ (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	@ (8004584 <__libc_init_array+0x44>)
 8004554:	f000 f818 	bl	8004588 <_init>
 8004558:	1b64      	subs	r4, r4, r5
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2600      	movs	r6, #0
 800455e:	42a6      	cmp	r6, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f855 3b04 	ldr.w	r3, [r5], #4
 8004568:	4798      	blx	r3
 800456a:	3601      	adds	r6, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004572:	4798      	blx	r3
 8004574:	3601      	adds	r6, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	080045fc 	.word	0x080045fc
 800457c:	080045fc 	.word	0x080045fc
 8004580:	080045fc 	.word	0x080045fc
 8004584:	08004600 	.word	0x08004600

08004588 <_init>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr

08004594 <_fini>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr
