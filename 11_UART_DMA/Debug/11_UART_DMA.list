
11_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004598  08004598  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a0  080045a0  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080045a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000020  080045c8  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080045c8  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c34e  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d30  00000000  00000000  0001239e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  000140d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078a  00000000  00000000  00014aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fc4  00000000  00000000  00015232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc6d  00000000  00000000  0003a1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40d6  00000000  00000000  00045e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  00129f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0012c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004538 	.word	0x08004538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004538 	.word	0x08004538

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_UART_TxCpltCallback>:
//#define LD2_GPIO_Port GPIOA
//#define LD2_Pin GPIO_PIN_5
uint8_t tx_data[] = "DMA UART Example\r\n";
uint8_t rx_buf[20];
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <HAL_UART_TxCpltCallback+0x24>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d104      	bne.n	8000520 <HAL_UART_TxCpltCallback+0x1c>
    {
        // Transmission complete
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Indicate with LED
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f001 f8a2 	bl	8001664 <HAL_GPIO_TogglePin>
    }
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40004400 	.word	0x40004400

0800052c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <HAL_UART_RxCpltCallback+0x34>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10b      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x2a>
    {
        // Reception complete
        HAL_UART_Transmit(&huart2, rx_buf, sizeof(rx_buf), 2000); // Echo back
 800053e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000542:	2214      	movs	r2, #20
 8000544:	4907      	ldr	r1, [pc, #28]	@ (8000564 <HAL_UART_RxCpltCallback+0x38>)
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <HAL_UART_RxCpltCallback+0x3c>)
 8000548:	f002 fc14 	bl	8002d74 <HAL_UART_Transmit>
        // Restart DMA reception
        HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));
 800054c:	2214      	movs	r2, #20
 800054e:	4905      	ldr	r1, [pc, #20]	@ (8000564 <HAL_UART_RxCpltCallback+0x38>)
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <HAL_UART_RxCpltCallback+0x3c>)
 8000552:	f002 fd15 	bl	8002f80 <HAL_UART_Receive_DMA>
    }
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400
 8000564:	20000154 	.word	0x20000154
 8000568:	2000003c 	.word	0x2000003c

0800056c <main>:

int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fab2 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f81e 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8d4 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f8ac 	bl	80006d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f86a 	bl	8000658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_DMA(&huart2, tx_data, strlen((char*)tx_data));
 8000584:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <main+0x3c>)
 8000586:	f7ff fe1f 	bl	80001c8 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29b      	uxth	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	4905      	ldr	r1, [pc, #20]	@ (80005a8 <main+0x3c>)
 8000592:	4806      	ldr	r0, [pc, #24]	@ (80005ac <main+0x40>)
 8000594:	f002 fc78 	bl	8002e88 <HAL_UART_Transmit_DMA>

    HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));
 8000598:	2214      	movs	r2, #20
 800059a:	4905      	ldr	r1, [pc, #20]	@ (80005b0 <main+0x44>)
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <main+0x40>)
 800059e:	f002 fcef 	bl	8002f80 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x36>
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	2000003c 	.word	0x2000003c
 80005b0:	20000154 	.word	0x20000154

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	@ 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	@ 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 ff8b 	bl	80044de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005da:	f001 f86b 	bl	80016b4 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f904 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000602:	230a      	movs	r3, #10
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f8a2 	bl	8001760 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000622:	f000 f8e5 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fc6a 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f8d1 	bl	80007f0 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3758      	adds	r7, #88	@ 0x58
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800065e:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <MX_USART2_UART_Init+0x74>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <MX_USART2_UART_Init+0x78>)
 800069e:	671a      	str	r2, [r3, #112]	@ 0x70
 80006a0:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART2_UART_Init+0x78>)
 80006a2:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006a8:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <MX_USART2_UART_Init+0x7c>)
 80006aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_USART2_UART_Init+0x7c>)
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006b4:	f002 fb10 	bl	8002cd8 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006be:	f000 f897 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	40004400 	.word	0x40004400
 80006d0:	200000c4 	.word	0x200000c4
 80006d4:	2000010c 	.word	0x2000010c

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_DMA_Init+0x48>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <MX_DMA_Init+0x48>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_DMA_Init+0x48>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f000 fb43 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f000 fb5c 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2011      	movs	r0, #17
 800070c:	f000 fb3b 	bl	8000d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000710:	2011      	movs	r0, #17
 8000712:	f000 fb54 	bl	8000dbe <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a2:	f000 ff47 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <MX_GPIO_Init+0xc8>)
 80007be:	f000 fd8f 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007c2:	2320      	movs	r3, #32
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007dc:	f000 fd80 	bl	80012e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000800 	.word	0x48000800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6613      	str	r3, [r2, #96]	@ 0x60
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	@ 0x58
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0ac      	sub	sp, #176	@ 0xb0
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2288      	movs	r2, #136	@ 0x88
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fe3a 	bl	80044de <memset>
  if(huart->Instance==USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a4f      	ldr	r2, [pc, #316]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000870:	4293      	cmp	r3, r2
 8000872:	f040 8096 	bne.w	80009a2 <HAL_UART_MspInit+0x15e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000876:	2302      	movs	r3, #2
 8000878:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fd6c 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800088e:	f7ff ffaf 	bl	80007f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	4b47      	ldr	r3, [pc, #284]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a46      	ldr	r2, [pc, #280]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b44      	ldr	r3, [pc, #272]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b41      	ldr	r3, [pc, #260]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a40      	ldr	r2, [pc, #256]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ea:	f000 fcf9 	bl	80012e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008ee:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 80008f0:	4a31      	ldr	r2, [pc, #196]	@ (80009b8 <HAL_UART_MspInit+0x174>)
 80008f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 80008fc:	2210      	movs	r2, #16
 80008fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000900:	4b2c      	ldr	r3, [pc, #176]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000906:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090c:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000912:	4b28      	ldr	r3, [pc, #160]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000924:	4823      	ldr	r0, [pc, #140]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 8000926:	f000 fa65 	bl	8000df4 <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000930:	f7ff ff5e 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a1f      	ldr	r2, [pc, #124]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 8000938:	671a      	str	r2, [r3, #112]	@ 0x70
 800093a:	4a1e      	ldr	r2, [pc, #120]	@ (80009b4 <HAL_UART_MspInit+0x170>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000942:	4a1f      	ldr	r2, [pc, #124]	@ (80009c0 <HAL_UART_MspInit+0x17c>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <HAL_UART_MspInit+0x178>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_UART_MspInit+0x178>)
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <HAL_UART_MspInit+0x178>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000976:	4811      	ldr	r0, [pc, #68]	@ (80009bc <HAL_UART_MspInit+0x178>)
 8000978:	f000 fa3c 	bl	8000df4 <HAL_DMA_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000982:	f7ff ff35 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <HAL_UART_MspInit+0x178>)
 800098a:	675a      	str	r2, [r3, #116]	@ 0x74
 800098c:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <HAL_UART_MspInit+0x178>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2026      	movs	r0, #38	@ 0x26
 8000998:	f000 f9f5 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800099c:	2026      	movs	r0, #38	@ 0x26
 800099e:	f000 fa0e 	bl	8000dbe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	bf00      	nop
 80009a4:	37b0      	adds	r7, #176	@ 0xb0
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	200000c4 	.word	0x200000c4
 80009b8:	40020080 	.word	0x40020080
 80009bc:	2000010c 	.word	0x2000010c
 80009c0:	4002006c 	.word	0x4002006c

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f8b9 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <DMA1_Channel6_IRQHandler+0x10>)
 8000a2a:	f000 fb7a 	bl	8001122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000010c 	.word	0x2000010c

08000a38 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <DMA1_Channel7_IRQHandler+0x10>)
 8000a3e:	f000 fb70 	bl	8001122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000c4 	.word	0x200000c4

08000a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <USART2_IRQHandler+0x10>)
 8000a52:	f002 fae1 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000003c 	.word	0x2000003c

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	@ (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f003 fd1d 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fd59 	bl	800056c <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000ac8:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8000acc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ad0:	2000016c 	.word	0x2000016c

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <HAL_Init+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b14 <HAL_Init+0x3c>)
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f93e 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f80f 	bl	8000b18 <HAL_InitTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e001      	b.n	8000b0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b06:	f7ff fe79 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d023      	beq.n	8000b74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_InitTick+0x70>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_InitTick+0x6c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f949 	bl	8000dda <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10f      	bne.n	8000b6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d809      	bhi.n	8000b68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f913 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_InitTick+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e004      	b.n	8000b78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e001      	b.n	8000b78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000001c 	.word	0x2000001c
 8000b88:	20000014 	.word	0x20000014
 8000b8c:	20000018 	.word	0x20000018

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000001c 	.word	0x2000001c
 8000bb4:	20000168 	.word	0x20000168

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000168 	.word	0x20000168

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	@ (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e098      	b.n	8000f38 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f44 <HAL_DMA_Init+0x150>)
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d80f      	bhi.n	8000e32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b4b      	ldr	r3, [pc, #300]	@ (8000f48 <HAL_DMA_Init+0x154>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f4c <HAL_DMA_Init+0x158>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	009a      	lsls	r2, r3, #2
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a48      	ldr	r2, [pc, #288]	@ (8000f50 <HAL_DMA_Init+0x15c>)
 8000e2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b46      	ldr	r3, [pc, #280]	@ (8000f54 <HAL_DMA_Init+0x160>)
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a43      	ldr	r2, [pc, #268]	@ (8000f4c <HAL_DMA_Init+0x158>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	009a      	lsls	r2, r3, #2
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a42      	ldr	r2, [pc, #264]	@ (8000f58 <HAL_DMA_Init+0x164>)
 8000e4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000eaa:	d039      	beq.n	8000f20 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <HAL_DMA_Init+0x15c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d11a      	bne.n	8000eec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <HAL_DMA_Init+0x168>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f003 031c 	and.w	r3, r3, #28
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4924      	ldr	r1, [pc, #144]	@ (8000f5c <HAL_DMA_Init+0x168>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ed0:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <HAL_DMA_Init+0x168>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6859      	ldr	r1, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	f003 031c 	and.w	r3, r3, #28
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	491d      	ldr	r1, [pc, #116]	@ (8000f5c <HAL_DMA_Init+0x168>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
 8000eea:	e019      	b.n	8000f20 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <HAL_DMA_Init+0x16c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef4:	f003 031c 	and.w	r3, r3, #28
 8000ef8:	210f      	movs	r1, #15
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4917      	ldr	r1, [pc, #92]	@ (8000f60 <HAL_DMA_Init+0x16c>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_DMA_Init+0x16c>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6859      	ldr	r1, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f003 031c 	and.w	r3, r3, #28
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	4911      	ldr	r1, [pc, #68]	@ (8000f60 <HAL_DMA_Init+0x16c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40020407 	.word	0x40020407
 8000f48:	bffdfff8 	.word	0xbffdfff8
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	40020000 	.word	0x40020000
 8000f54:	bffdfbf8 	.word	0xbffdfbf8
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	400200a8 	.word	0x400200a8
 8000f60:	400204a8 	.word	0x400204a8

08000f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_DMA_Start_IT+0x20>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e04b      	b.n	800101c <HAL_DMA_Start_IT+0xb8>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d13a      	bne.n	800100e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f95f 	bl	8001280 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 020e 	orr.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00f      	b.n	8000ffc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0204 	bic.w	r2, r2, #4
 8000fea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 020a 	orr.w	r2, r2, #10
 8000ffa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e005      	b.n	800101a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001016:	2302      	movs	r3, #2
 8001018:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800101a:	7dfb      	ldrb	r3, [r7, #23]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d008      	beq.n	800104e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e022      	b.n	8001094 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 020e 	bic.w	r2, r2, #14
 800105c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0201 	bic.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f003 021c 	and.w	r2, r3, #28
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	2101      	movs	r1, #1
 800107c:	fa01 f202 	lsl.w	r2, r1, r2
 8001080:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001094:	4618      	mov	r0, r3
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d005      	beq.n	80010c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2204      	movs	r2, #4
 80010bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e029      	b.n	8001118 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 020e 	bic.w	r2, r2, #14
 80010d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e8:	f003 021c 	and.w	r2, r3, #28
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	4798      	blx	r3
    }
  }
  return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f003 031c 	and.w	r3, r3, #28
 8001142:	2204      	movs	r2, #4
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d026      	beq.n	800119c <HAL_DMA_IRQHandler+0x7a>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d021      	beq.n	800119c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	2b00      	cmp	r3, #0
 8001164:	d107      	bne.n	8001176 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0204 	bic.w	r2, r2, #4
 8001174:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f003 021c 	and.w	r2, r3, #28
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	2104      	movs	r1, #4
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	2b00      	cmp	r3, #0
 8001190:	d071      	beq.n	8001276 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800119a:	e06c      	b.n	8001276 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a0:	f003 031c 	and.w	r3, r3, #28
 80011a4:	2202      	movs	r2, #2
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d02e      	beq.n	800120e <HAL_DMA_IRQHandler+0xec>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d029      	beq.n	800120e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10b      	bne.n	80011e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 020a 	bic.w	r2, r2, #10
 80011d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e4:	f003 021c 	and.w	r2, r3, #28
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	2102      	movs	r1, #2
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d038      	beq.n	8001276 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800120c:	e033      	b.n	8001276 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f003 031c 	and.w	r3, r3, #28
 8001216:	2208      	movs	r2, #8
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d02a      	beq.n	8001278 <HAL_DMA_IRQHandler+0x156>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d025      	beq.n	8001278 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 020e 	bic.w	r2, r2, #14
 800123a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001240:	f003 021c 	and.w	r2, r3, #28
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001276:	bf00      	nop
 8001278:	bf00      	nop
}
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f003 021c 	and.w	r2, r3, #28
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d108      	bne.n	80012c4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012c2:	e007      	b.n	80012d4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	60da      	str	r2, [r3, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e17f      	b.n	80015f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8171 	beq.w	80015ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <HAL_GPIO_Init+0x40>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 0201 	and.w	r2, r3, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b03      	cmp	r3, #3
 800138c:	d118      	bne.n	80013c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	6939      	ldr	r1, [r7, #16]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80ac 	beq.w	80015ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	4b5f      	ldr	r3, [pc, #380]	@ (8001610 <HAL_GPIO_Init+0x330>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	4a5e      	ldr	r2, [pc, #376]	@ (8001610 <HAL_GPIO_Init+0x330>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6613      	str	r3, [r2, #96]	@ 0x60
 800149e:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <HAL_GPIO_Init+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001614 <HAL_GPIO_Init+0x334>)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014d4:	d025      	beq.n	8001522 <HAL_GPIO_Init+0x242>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001618 <HAL_GPIO_Init+0x338>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x23e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	@ (800161c <HAL_GPIO_Init+0x33c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x23a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001620 <HAL_GPIO_Init+0x340>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x236>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001624 <HAL_GPIO_Init+0x344>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x232>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_GPIO_Init+0x348>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <HAL_GPIO_Init+0x34c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x22a>
 8001506:	2306      	movs	r3, #6
 8001508:	e00c      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800150a:	2307      	movs	r3, #7
 800150c:	e00a      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800150e:	2305      	movs	r3, #5
 8001510:	e008      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001512:	2304      	movs	r3, #4
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001516:	2303      	movs	r3, #3
 8001518:	e004      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800151a:	2302      	movs	r3, #2
 800151c:	e002      	b.n	8001524 <HAL_GPIO_Init+0x244>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x244>
 8001522:	2300      	movs	r3, #0
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	f002 0203 	and.w	r2, r2, #3
 800152a:	0092      	lsls	r2, r2, #2
 800152c:	4093      	lsls	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001534:	4937      	ldr	r1, [pc, #220]	@ (8001614 <HAL_GPIO_Init+0x334>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001566:	4a32      	ldr	r2, [pc, #200]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <HAL_GPIO_Init+0x350>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001590:	4a27      	ldr	r2, [pc, #156]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001596:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <HAL_GPIO_Init+0x350>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <HAL_GPIO_Init+0x350>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_GPIO_Init+0x350>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_GPIO_Init+0x350>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f47f ae78 	bne.w	80012f0 <HAL_GPIO_Init+0x10>
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	48000400 	.word	0x48000400
 800161c:	48000800 	.word	0x48000800
 8001620:	48000c00 	.word	0x48000c00
 8001624:	48001000 	.word	0x48001000
 8001628:	48001400 	.word	0x48001400
 800162c:	48001800 	.word	0x48001800
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001650:	e002      	b.n	8001658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43d9      	mvns	r1, r3
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	400b      	ands	r3, r1
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000

080016b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016c2:	d130      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c4:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016d0:	d038      	beq.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016da:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2232      	movs	r2, #50	@ 0x32
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f8:	e002      	b.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170c:	d102      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f2      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001720:	d110      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e00f      	b.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800172e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001732:	d007      	beq.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001734:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800173c:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40007000 	.word	0x40007000
 8001758:	20000014 	.word	0x20000014
 800175c:	431bde83 	.word	0x431bde83

08001760 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e3ca      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	4b97      	ldr	r3, [pc, #604]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177c:	4b94      	ldr	r3, [pc, #592]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80e4 	beq.w	800195c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_RCC_OscConfig+0x4a>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	f040 808b 	bne.w	80018b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 8087 	bne.w	80018b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x62>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e3a2      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	4b82      	ldr	r3, [pc, #520]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <HAL_RCC_OscConfig+0x7c>
 80017d2:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017da:	e005      	b.n	80017e8 <HAL_RCC_OscConfig+0x88>
 80017dc:	4b7c      	ldr	r3, [pc, #496]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d223      	bcs.n	8001834 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fd55 	bl	80022a0 <RCC_SetFlashLatencyFromMSIRange>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e383      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	4b73      	ldr	r3, [pc, #460]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a72      	ldr	r2, [pc, #456]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b70      	ldr	r3, [pc, #448]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	496d      	ldr	r1, [pc, #436]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181e:	4b6c      	ldr	r3, [pc, #432]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	4968      	ldr	r1, [pc, #416]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e025      	b.n	8001880 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001834:	4b66      	ldr	r3, [pc, #408]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a65      	ldr	r2, [pc, #404]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b63      	ldr	r3, [pc, #396]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4960      	ldr	r1, [pc, #384]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001852:	4b5f      	ldr	r3, [pc, #380]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	495b      	ldr	r1, [pc, #364]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fd15 	bl	80022a0 <RCC_SetFlashLatencyFromMSIRange>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e343      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001880:	f000 fc4a 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b52      	ldr	r3, [pc, #328]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	4950      	ldr	r1, [pc, #320]	@ (80019d4 <HAL_RCC_OscConfig+0x274>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	4a4e      	ldr	r2, [pc, #312]	@ (80019d8 <HAL_RCC_OscConfig+0x278>)
 800189e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018a0:	4b4e      	ldr	r3, [pc, #312]	@ (80019dc <HAL_RCC_OscConfig+0x27c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f937 	bl	8000b18 <HAL_InitTick>
 80018aa:	4603      	mov	r3, r0
 80018ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d052      	beq.n	800195a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	e327      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d032      	beq.n	8001926 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018c0:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a42      	ldr	r2, [pc, #264]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018cc:	f7ff f974 	bl	8000bb8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d4:	f7ff f970 	bl	8000bb8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e310      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e6:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a36      	ldr	r2, [pc, #216]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4931      	ldr	r1, [pc, #196]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001910:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	492c      	ldr	r1, [pc, #176]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e01a      	b.n	800195c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001926:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a29      	ldr	r2, [pc, #164]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001932:	f7ff f941 	bl	8000bb8 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800193a:	f7ff f93d 	bl	8000bb8 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e2dd      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194c:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x1da>
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d074      	beq.n	8001a52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x21a>
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d10e      	bne.n	8001992 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d10b      	bne.n	8001992 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d064      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d160      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e2ba      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x24a>
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e026      	b.n	80019f8 <HAL_RCC_OscConfig+0x298>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019b2:	d115      	bne.n	80019e0 <HAL_RCC_OscConfig+0x280>
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80019ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a02      	ldr	r2, [pc, #8]	@ (80019d0 <HAL_RCC_OscConfig+0x270>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x298>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08004550 	.word	0x08004550
 80019d8:	20000014 	.word	0x20000014
 80019dc:	20000018 	.word	0x20000018
 80019e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a9f      	ldr	r2, [pc, #636]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f8da 	bl	8000bb8 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff f8d6 	bl	8000bb8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e276      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1a:	4b92      	ldr	r3, [pc, #584]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2a8>
 8001a26:	e014      	b.n	8001a52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8c6 	bl	8000bb8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f8c2 	bl	8000bb8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e262      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	4b88      	ldr	r3, [pc, #544]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2d0>
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d060      	beq.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x310>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d119      	bne.n	8001a9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d116      	bne.n	8001a9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a70:	4b7c      	ldr	r3, [pc, #496]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_OscConfig+0x328>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e23f      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b76      	ldr	r3, [pc, #472]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	4973      	ldr	r1, [pc, #460]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9c:	e040      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d023      	beq.n	8001aee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f881 	bl	8000bb8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff f87d 	bl	8000bb8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e21d      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	4b65      	ldr	r3, [pc, #404]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b62      	ldr	r3, [pc, #392]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	495f      	ldr	r1, [pc, #380]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e018      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aee:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff f85d 	bl	8000bb8 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff f859 	bl	8000bb8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1f9      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d03c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b34:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f838 	bl	8000bb8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f834 	bl	8000bb8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1d4      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5e:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ef      	beq.n	8001b4c <HAL_RCC_OscConfig+0x3ec>
 8001b6c:	e01b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b74:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f81b 	bl	8000bb8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f817 	bl	8000bb8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1b7      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b98:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ef      	bne.n	8001b86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80a6 	beq.w	8001d00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10d      	bne.n	8001be0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	4a26      	ldr	r2, [pc, #152]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd0:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <HAL_RCC_OscConfig+0x508>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d118      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_RCC_OscConfig+0x508>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_RCC_OscConfig+0x508>)
 8001bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ffde 	bl	8000bb8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c00:	f7fe ffda 	bl	8000bb8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e17a      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_RCC_OscConfig+0x508>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4d8>
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c36:	e029      	b.n	8001c8c <HAL_RCC_OscConfig+0x52c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d115      	bne.n	8001c6c <HAL_RCC_OscConfig+0x50c>
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c46:	4a07      	ldr	r2, [pc, #28]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c56:	4a03      	ldr	r2, [pc, #12]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x52c>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c72:	4a9b      	ldr	r2, [pc, #620]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c7c:	4b98      	ldr	r3, [pc, #608]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c82:	4a97      	ldr	r2, [pc, #604]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d016      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7fe ff90 	bl	8000bb8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7fe ff8c 	bl	8000bb8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e12a      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ed      	beq.n	8001c9c <HAL_RCC_OscConfig+0x53c>
 8001cc0:	e015      	b.n	8001cee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7fe ff79 	bl	8000bb8 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe ff75 	bl	8000bb8 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e113      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ce0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ed      	bne.n	8001cca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	4a79      	ldr	r2, [pc, #484]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80fe 	beq.w	8001f06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f040 80d0 	bne.w	8001eb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d14:	4b72      	ldr	r3, [pc, #456]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d130      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	3b01      	subs	r3, #1
 8001d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d127      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d11f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d54:	2a07      	cmp	r2, #7
 8001d56:	bf14      	ite	ne
 8001d58:	2201      	movne	r2, #1
 8001d5a:	2200      	moveq	r2, #0
 8001d5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d113      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d06e      	beq.n	8001e68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d069      	beq.n	8001e64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d90:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d9c:	4b50      	ldr	r3, [pc, #320]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0ad      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dac:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db8:	f7fe fefe 	bl	8000bb8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fefa 	bl	8000bb8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e09a      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <HAL_RCC_OscConfig+0x784>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dee:	3a01      	subs	r2, #1
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001df8:	0212      	lsls	r2, r2, #8
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e00:	0852      	lsrs	r2, r2, #1
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0552      	lsls	r2, r2, #21
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e0c:	0852      	lsrs	r2, r2, #1
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	0652      	lsls	r2, r2, #25
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e18:	0912      	lsrs	r2, r2, #4
 8001e1a:	0452      	lsls	r2, r2, #17
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	4930      	ldr	r1, [pc, #192]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e24:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e3c:	f7fe febc 	bl	8000bb8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe feb8 	bl	8000bb8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e058      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e62:	e050      	b.n	8001f06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e04f      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d148      	bne.n	8001f06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e8c:	f7fe fe94 	bl	8000bb8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7fe fe90 	bl	8000bb8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e030      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x734>
 8001eb2:	e028      	b.n	8001f06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d023      	beq.n	8001f02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_RCC_OscConfig+0x780>)
 8001ec0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fe77 	bl	8000bb8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	e00c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fe73 	bl	8000bb8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d905      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x7b0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ec      	bne.n	8001ece <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x7b0>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4905      	ldr	r1, [pc, #20]	@ (8001f10 <HAL_RCC_OscConfig+0x7b0>)
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_OscConfig+0x7b4>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e001      	b.n	8001f06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	feeefffc 	.word	0xfeeefffc

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0e7      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b75      	ldr	r3, [pc, #468]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b72      	ldr	r3, [pc, #456]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4970      	ldr	r1, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0cf      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d010      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	4b66      	ldr	r3, [pc, #408]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d908      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b63      	ldr	r3, [pc, #396]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4960      	ldr	r1, [pc, #384]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d04c      	beq.n	8002030 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0a6      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb6:	4b54      	ldr	r3, [pc, #336]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d115      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e09a      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fce:	4b4e      	ldr	r3, [pc, #312]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e08e      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fde:	4b4a      	ldr	r3, [pc, #296]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e086      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fee:	4b46      	ldr	r3, [pc, #280]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f023 0203 	bic.w	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4943      	ldr	r1, [pc, #268]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002000:	f7fe fdda 	bl	8000bb8 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	e00a      	b.n	800201e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f7fe fdd6 	bl	8000bb8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e06e      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	4b3a      	ldr	r3, [pc, #232]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 020c 	and.w	r2, r3, #12
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	429a      	cmp	r2, r3
 800202e:	d1eb      	bne.n	8002008 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	4b31      	ldr	r3, [pc, #196]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002048:	429a      	cmp	r2, r3
 800204a:	d208      	bcs.n	800205e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	492b      	ldr	r1, [pc, #172]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205e:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d210      	bcs.n	800208e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206c:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 0207 	bic.w	r2, r3, #7
 8002074:	4923      	ldr	r1, [pc, #140]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207c:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e036      	b.n	80020fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209a:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4918      	ldr	r1, [pc, #96]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4910      	ldr	r1, [pc, #64]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020cc:	f000 f824 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	490b      	ldr	r1, [pc, #44]	@ (800210c <HAL_RCC_ClockConfig+0x1f4>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <HAL_RCC_ClockConfig+0x1f8>)
 80020ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1fc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fd11 	bl	8000b18 <HAL_InitTick>
 80020f6:	4603      	mov	r3, r0
 80020f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	08004550 	.word	0x08004550
 8002110:	20000014 	.word	0x20000014
 8002114:	20000018 	.word	0x20000018

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b3e      	ldr	r3, [pc, #248]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	4b3b      	ldr	r3, [pc, #236]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d121      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d11e      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	e005      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002168:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002174:	4a2b      	ldr	r2, [pc, #172]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d102      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x110>)
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e004      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800219c:	4b23      	ldr	r3, [pc, #140]	@ (800222c <HAL_RCC_GetSysClockFreq+0x114>)
 800219e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d134      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0xa6>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d003      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xac>
 80021bc:	e005      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c0:	617b      	str	r3, [r7, #20]
      break;
 80021c2:	e005      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_GetSysClockFreq+0x114>)
 80021c6:	617b      	str	r3, [r7, #20]
      break;
 80021c8:	e002      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	617b      	str	r3, [r7, #20]
      break;
 80021ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	0e5b      	lsrs	r3, r3, #25
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	3301      	adds	r3, #1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002210:	69bb      	ldr	r3, [r7, #24]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	08004568 	.word	0x08004568
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200

08002230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000014 	.word	0x20000014

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4904      	ldr	r1, [pc, #16]	@ (8002270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	08004560 	.word	0x08004560

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002278:	f7ff ffda 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0adb      	lsrs	r3, r3, #11
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4904      	ldr	r1, [pc, #16]	@ (800229c <HAL_RCC_GetPCLK2Freq+0x28>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	08004560 	.word	0x08004560

080022a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b8:	f7ff f9ee 	bl	8001698 <HAL_PWREx_GetVoltageRange>
 80022bc:	6178      	str	r0, [r7, #20]
 80022be:	e014      	b.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	4a24      	ldr	r2, [pc, #144]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d8:	f7ff f9de 	bl	8001698 <HAL_PWREx_GetVoltageRange>
 80022dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f0:	d10b      	bne.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b80      	cmp	r3, #128	@ 0x80
 80022f6:	d919      	bls.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80022fc:	d902      	bls.n	8002304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022fe:	2302      	movs	r3, #2
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e013      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002304:	2301      	movs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e010      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	@ 0x80
 800230e:	d902      	bls.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002310:	2303      	movs	r3, #3
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e00a      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b80      	cmp	r3, #128	@ 0x80
 800231a:	d102      	bne.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800231c:	2302      	movs	r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	e004      	b.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b70      	cmp	r3, #112	@ 0x70
 8002326:	d101      	bne.n	800232c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002328:	2301      	movs	r3, #1
 800232a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 0207 	bic.w	r2, r3, #7
 8002334:	4909      	ldr	r1, [pc, #36]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800233c:	4b07      	ldr	r3, [pc, #28]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40022000 	.word	0x40022000

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002368:	2300      	movs	r3, #0
 800236a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800236c:	2300      	movs	r3, #0
 800236e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002378:	2b00      	cmp	r3, #0
 800237a:	d041      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002380:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002384:	d02a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002386:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800238a:	d824      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800238c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002390:	d008      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002396:	d81e      	bhi.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800239c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a0:	d010      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023a2:	e018      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a4:	4b86      	ldr	r3, [pc, #536]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a85      	ldr	r2, [pc, #532]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b0:	e015      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fabb 	bl	8002934 <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c2:	e00c      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3320      	adds	r3, #32
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fba6 	bl	8002b1c <RCCEx_PLLSAI2_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d4:	e003      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	74fb      	strb	r3, [r7, #19]
      break;
 80023da:	e000      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e4:	4b76      	ldr	r3, [pc, #472]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f2:	4973      	ldr	r1, [pc, #460]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023fa:	e001      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d041      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002410:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002414:	d02a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002416:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800241a:	d824      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800241c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002420:	d008      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002422:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002426:	d81e      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d010      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002432:	e018      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002434:	4b62      	ldr	r3, [pc, #392]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a61      	ldr	r2, [pc, #388]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002440:	e015      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fa73 	bl	8002934 <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002452:	e00c      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3320      	adds	r3, #32
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fb5e 	bl	8002b1c <RCCEx_PLLSAI2_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002464:	e003      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	74fb      	strb	r3, [r7, #19]
      break;
 800246a:	e000      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800246c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246e:	7cfb      	ldrb	r3, [r7, #19]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002474:	4b52      	ldr	r3, [pc, #328]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002482:	494f      	ldr	r1, [pc, #316]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800248a:	e001      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a0 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024a2:	4b47      	ldr	r3, [pc, #284]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	4a40      	ldr	r2, [pc, #256]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c4:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d0:	2301      	movs	r3, #1
 80024d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d4:	4b3b      	ldr	r3, [pc, #236]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3a      	ldr	r2, [pc, #232]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fb6a 	bl	8000bb8 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e6:	e009      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7fe fb66 	bl	8000bb8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d902      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	74fb      	strb	r3, [r7, #19]
        break;
 80024fa:	e005      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024fc:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0ef      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d15c      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800250e:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	d019      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800252c:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002538:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	4a20      	ldr	r2, [pc, #128]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fb25 	bl	8000bb8 <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002570:	e00b      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fb21 	bl	8000bb8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d902      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	74fb      	strb	r3, [r7, #19]
            break;
 8002588:	e006      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ec      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ae:	4904      	ldr	r1, [pc, #16]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025b6:	e009      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
 80025bc:	e006      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025cc:	7c7b      	ldrb	r3, [r7, #17]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b9e      	ldr	r3, [pc, #632]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	4a9d      	ldr	r2, [pc, #628]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ea:	4b98      	ldr	r3, [pc, #608]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f0:	f023 0203 	bic.w	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f8:	4994      	ldr	r1, [pc, #592]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800260c:	4b8f      	ldr	r3, [pc, #572]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f023 020c 	bic.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261a:	498c      	ldr	r1, [pc, #560]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262e:	4b87      	ldr	r3, [pc, #540]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002634:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	4983      	ldr	r1, [pc, #524]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002650:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	497b      	ldr	r1, [pc, #492]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002680:	4972      	ldr	r1, [pc, #456]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002694:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	496a      	ldr	r1, [pc, #424]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b6:	4b65      	ldr	r3, [pc, #404]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	4961      	ldr	r1, [pc, #388]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026d8:	4b5c      	ldr	r3, [pc, #368]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e6:	4959      	ldr	r1, [pc, #356]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002700:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002708:	4950      	ldr	r1, [pc, #320]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800271c:	4b4b      	ldr	r3, [pc, #300]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002722:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	4948      	ldr	r1, [pc, #288]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	493f      	ldr	r1, [pc, #252]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d028      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002760:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800276e:	4937      	ldr	r1, [pc, #220]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800277a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277e:	d106      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a31      	ldr	r2, [pc, #196]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
 800278c:	e011      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002792:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002796:	d10c      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f8c8 	bl	8002934 <RCCEx_PLLSAI1_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027be:	4b23      	ldr	r3, [pc, #140]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	491f      	ldr	r1, [pc, #124]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027dc:	d106      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e8:	60d3      	str	r3, [r2, #12]
 80027ea:	e011      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f899 	bl	8002934 <RCCEx_PLLSAI1_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800283a:	d109      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a02      	ldr	r2, [pc, #8]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e014      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002858:	d10c      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f867 	bl	8002934 <RCCEx_PLLSAI1_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02f      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002880:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800288e:	4928      	ldr	r1, [pc, #160]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800289e:	d10d      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f844 	bl	8002934 <RCCEx_PLLSAI1_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	74bb      	strb	r3, [r7, #18]
 80028ba:	e011      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3320      	adds	r3, #32
 80028ca:	2102      	movs	r1, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f925 	bl	8002b1c <RCCEx_PLLSAI2_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028ec:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028fa:	490d      	ldr	r1, [pc, #52]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002914:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291e:	4904      	ldr	r1, [pc, #16]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002926:	7cbb      	ldrb	r3, [r7, #18]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000

08002934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002942:	4b75      	ldr	r3, [pc, #468]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800294e:	4b72      	ldr	r3, [pc, #456]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d10d      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
       ||
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002966:	4b6c      	ldr	r3, [pc, #432]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
       ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d047      	beq.n	8002a0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e044      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d018      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x86>
 8002988:	2b03      	cmp	r3, #3
 800298a:	d825      	bhi.n	80029d8 <RCCEx_PLLSAI1_Config+0xa4>
 800298c:	2b01      	cmp	r3, #1
 800298e:	d002      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x62>
 8002990:	2b02      	cmp	r3, #2
 8002992:	d009      	beq.n	80029a8 <RCCEx_PLLSAI1_Config+0x74>
 8002994:	e020      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002996:	4b60      	ldr	r3, [pc, #384]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11d      	bne.n	80029de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a6:	e01a      	b.n	80029de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e013      	b.n	80029e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ba:	4b57      	ldr	r3, [pc, #348]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029c6:	4b54      	ldr	r3, [pc, #336]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029d6:	e006      	b.n	80029e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e004      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	430b      	orrs	r3, r1
 8002a04:	4944      	ldr	r1, [pc, #272]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d17d      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a10:	4b41      	ldr	r3, [pc, #260]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a40      	ldr	r2, [pc, #256]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1c:	f7fe f8cc 	bl	8000bb8 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a22:	e009      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a24:	f7fe f8c8 	bl	8000bb8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d902      	bls.n	8002a38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	73fb      	strb	r3, [r7, #15]
        break;
 8002a36:	e005      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a38:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ef      	bne.n	8002a24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d160      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6892      	ldr	r2, [r2, #8]
 8002a60:	0211      	lsls	r1, r2, #8
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	0912      	lsrs	r2, r2, #4
 8002a68:	0452      	lsls	r2, r2, #17
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	492a      	ldr	r1, [pc, #168]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	610b      	str	r3, [r1, #16]
 8002a72:	e027      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d112      	bne.n	8002aa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7a:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	0211      	lsls	r1, r2, #8
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6912      	ldr	r2, [r2, #16]
 8002a90:	0852      	lsrs	r2, r2, #1
 8002a92:	3a01      	subs	r2, #1
 8002a94:	0552      	lsls	r2, r2, #21
 8002a96:	430a      	orrs	r2, r1
 8002a98:	491f      	ldr	r1, [pc, #124]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	610b      	str	r3, [r1, #16]
 8002a9e:	e011      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002aa8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6892      	ldr	r2, [r2, #8]
 8002ab0:	0211      	lsls	r1, r2, #8
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6952      	ldr	r2, [r2, #20]
 8002ab6:	0852      	lsrs	r2, r2, #1
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	0652      	lsls	r2, r2, #25
 8002abc:	430a      	orrs	r2, r1
 8002abe:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad0:	f7fe f872 	bl	8000bb8 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad6:	e009      	b.n	8002aec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad8:	f7fe f86e 	bl	8000bb8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aea:	e005      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aec:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ef      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d018      	beq.n	8002b68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b36:	4b67      	ldr	r3, [pc, #412]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0203 	and.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
       ||
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b4e:	4b61      	ldr	r3, [pc, #388]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d047      	beq.n	8002bf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e044      	b.n	8002bf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d018      	beq.n	8002ba2 <RCCEx_PLLSAI2_Config+0x86>
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d825      	bhi.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa4>
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d002      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0x62>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d009      	beq.n	8002b90 <RCCEx_PLLSAI2_Config+0x74>
 8002b7c:	e020      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7e:	4b55      	ldr	r3, [pc, #340]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11d      	bne.n	8002bc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e01a      	b.n	8002bc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b90:	4b50      	ldr	r3, [pc, #320]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba0:	e013      	b.n	8002bca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bae:	4b49      	ldr	r3, [pc, #292]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bbe:	e006      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e004      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	430b      	orrs	r3, r1
 8002bec:	4939      	ldr	r1, [pc, #228]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d167      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a35      	ldr	r2, [pc, #212]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fd ffd8 	bl	8000bb8 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c0a:	e009      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c0c:	f7fd ffd4 	bl	8000bb8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d902      	bls.n	8002c20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1e:	e005      	b.n	8002c2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c20:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ef      	bne.n	8002c0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d14a      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d111      	bne.n	8002c5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c38:	4b26      	ldr	r3, [pc, #152]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6892      	ldr	r2, [r2, #8]
 8002c48:	0211      	lsls	r1, r2, #8
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	0912      	lsrs	r2, r2, #4
 8002c50:	0452      	lsls	r2, r2, #17
 8002c52:	430a      	orrs	r2, r1
 8002c54:	491f      	ldr	r1, [pc, #124]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	614b      	str	r3, [r1, #20]
 8002c5a:	e011      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6912      	ldr	r2, [r2, #16]
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0652      	lsls	r2, r2, #25
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	4916      	ldr	r1, [pc, #88]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fd ff94 	bl	8000bb8 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c94:	f7fd ff90 	bl	8000bb8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ef      	beq.n	8002c94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4904      	ldr	r1, [pc, #16]	@ (8002cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e040      	b.n	8002d6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fda2 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2224      	movs	r2, #36	@ 0x24
 8002d04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 ff62 	bl	8003be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fca7 	bl	8003678 <UART_SetConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e01b      	b.n	8002d6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 ffe1 	bl	8003d2c <UART_CheckIdleState>
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d177      	bne.n	8002e7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_UART_Transmit+0x24>
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e070      	b.n	8002e7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2221      	movs	r2, #33	@ 0x21
 8002da8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002daa:	f7fd ff05 	bl	8000bb8 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc8:	d108      	bne.n	8002ddc <HAL_UART_Transmit+0x68>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e003      	b.n	8002de4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002de4:	e02f      	b.n	8002e46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2180      	movs	r1, #128	@ 0x80
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f001 f843 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e03b      	b.n	8002e7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	881a      	ldrh	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e007      	b.n	8002e34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3301      	adds	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1c9      	bne.n	8002de6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	@ 0x40
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f001 f80d 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e005      	b.n	8002e7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d165      	bne.n	8002f6a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_Transmit_DMA+0x22>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e05e      	b.n	8002f6c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	@ 0x21
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d027      	beq.n	8002f2a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	4a25      	ldr	r2, [pc, #148]	@ (8002f74 <HAL_UART_Transmit_DMA+0xec>)
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a24      	ldr	r2, [pc, #144]	@ (8002f78 <HAL_UART_Transmit_DMA+0xf0>)
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a23      	ldr	r2, [pc, #140]	@ (8002f7c <HAL_UART_Transmit_DMA+0xf4>)
 8002ef0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	4619      	mov	r1, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3328      	adds	r3, #40	@ 0x28
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	f7fe f829 	bl	8000f64 <HAL_DMA_Start_IT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e020      	b.n	8002f6c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2240      	movs	r2, #64	@ 0x40
 8002f30:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3308      	adds	r3, #8
 8002f38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	613b      	str	r3, [r7, #16]
   return(result);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3308      	adds	r3, #8
 8002f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f52:	623a      	str	r2, [r7, #32]
 8002f54:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	69f9      	ldr	r1, [r7, #28]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3728      	adds	r7, #40	@ 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	080041ad 	.word	0x080041ad
 8002f78:	08004247 	.word	0x08004247
 8002f7c:	080043cd 	.word	0x080043cd

08002f80 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d137      	bne.n	8003008 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_UART_Receive_DMA+0x24>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e030      	b.n	800300a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a18      	ldr	r2, [pc, #96]	@ (8003014 <HAL_UART_Receive_DMA+0x94>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d018      	beq.n	8002ff8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	623b      	str	r3, [r7, #32]
 8002fe6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	69f9      	ldr	r1, [r7, #28]
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e6      	bne.n	8002fc6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 ffaa 	bl	8003f58 <UART_Start_Receive_DMA>
 8003004:	4603      	mov	r3, r0
 8003006:	e000      	b.n	800300a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3728      	adds	r7, #40	@ 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40008000 	.word	0x40008000

08003018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ba      	sub	sp, #232	@ 0xe8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800303e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003042:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003046:	4013      	ands	r3, r2
 8003048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800304c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d115      	bne.n	8003080 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 82ca 	beq.w	800360a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      }
      return;
 800307e:	e2c4      	b.n	800360a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8117 	beq.w	80032b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800309a:	4b85      	ldr	r3, [pc, #532]	@ (80032b0 <HAL_UART_IRQHandler+0x298>)
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 810a 	beq.w	80032b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d011      	beq.n	80030d4 <HAL_UART_IRQHandler+0xbc>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_UART_IRQHandler+0xec>
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2202      	movs	r2, #2
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_UART_IRQHandler+0x11c>
 8003110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800314c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2208      	movs	r2, #8
 800315e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_UART_IRQHandler+0x18a>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8230 	beq.w	800360e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ea:	2b40      	cmp	r3, #64	@ 0x40
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d04f      	beq.n	800329a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff72 	bl	80040e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b40      	cmp	r3, #64	@ 0x40
 800320c:	d141      	bne.n	8003292 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800323a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800323e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1d9      	bne.n	800320e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003266:	4a13      	ldr	r2, [pc, #76]	@ (80032b4 <HAL_UART_IRQHandler+0x29c>)
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd ff16 	bl	80010a0 <HAL_DMA_Abort_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d017      	beq.n	80032aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003284:	4610      	mov	r0, r2
 8003286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	e00f      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9de 	bl	800364c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e00b      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9da 	bl	800364c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e007      	b.n	80032aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9d6 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80032a8:	e1b1      	b.n	800360e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032aa:	bf00      	nop
    return;
 80032ac:	e1af      	b.n	800360e <HAL_UART_IRQHandler+0x5f6>
 80032ae:	bf00      	nop
 80032b0:	04000120 	.word	0x04000120
 80032b4:	0800444b 	.word	0x0800444b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 816a 	bne.w	8003596 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8163 	beq.w	8003596 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 815c 	beq.w	8003596 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	f040 80d4 	bne.w	800349e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003302:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80ad 	beq.w	8003466 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003316:	429a      	cmp	r2, r3
 8003318:	f080 80a5 	bcs.w	8003466 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003322:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 8086 	bne.w	8003444 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800334c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003366:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800336e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800337a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1da      	bne.n	8003338 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3308      	adds	r3, #8
 8003388:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3308      	adds	r3, #8
 80033a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e1      	bne.n	8003382 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3308      	adds	r3, #8
 80033c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e3      	bne.n	80033be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003414:	f023 0310 	bic.w	r3, r3, #16
 8003418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003426:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003428:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800342c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e4      	bne.n	8003404 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd fdf0 	bl	8001024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003456:	b29b      	uxth	r3, r3
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	b29b      	uxth	r3, r3
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8fe 	bl	8003660 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003464:	e0d5      	b.n	8003612 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800346c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003470:	429a      	cmp	r2, r3
 8003472:	f040 80ce 	bne.w	8003612 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 80c5 	bne.w	8003612 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8e2 	bl	8003660 <HAL_UARTEx_RxEventCallback>
      return;
 800349c:	e0b9      	b.n	8003612 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80ab 	beq.w	8003616 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80034c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a6 	beq.w	8003616 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e4      	bne.n	80034ca <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	623b      	str	r3, [r7, #32]
   return(result);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003524:	633a      	str	r2, [r7, #48]	@ 0x30
 8003526:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800352a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e3      	bne.n	8003500 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	60fb      	str	r3, [r7, #12]
   return(result);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f023 0310 	bic.w	r3, r3, #16
 8003560:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	617b      	str	r3, [r7, #20]
   return(result);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e4      	bne.n	800354c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800358c:	4619      	mov	r1, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f866 	bl	8003660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003594:	e03f      	b.n	8003616 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <HAL_UART_IRQHandler+0x5a8>
 80035a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 ff86 	bl	80044ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035be:	e02d      	b.n	800361c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01c      	beq.n	800361a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
    }
    return;
 80035e8:	e017      	b.n	800361a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <HAL_UART_IRQHandler+0x604>
 80035f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 ff37 	bl	8004476 <UART_EndTransmit_IT>
    return;
 8003608:	e008      	b.n	800361c <HAL_UART_IRQHandler+0x604>
      return;
 800360a:	bf00      	nop
 800360c:	e006      	b.n	800361c <HAL_UART_IRQHandler+0x604>
    return;
 800360e:	bf00      	nop
 8003610:	e004      	b.n	800361c <HAL_UART_IRQHandler+0x604>
      return;
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <HAL_UART_IRQHandler+0x604>
      return;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <HAL_UART_IRQHandler+0x604>
    return;
 800361a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800361c:	37e8      	adds	r7, #232	@ 0xe8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop

08003624 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b08a      	sub	sp, #40	@ 0x28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4313      	orrs	r3, r2
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4ba4      	ldr	r3, [pc, #656]	@ (8003938 <UART_SetConfig+0x2c0>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a99      	ldr	r2, [pc, #612]	@ (800393c <UART_SetConfig+0x2c4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	4313      	orrs	r3, r2
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a90      	ldr	r2, [pc, #576]	@ (8003940 <UART_SetConfig+0x2c8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d126      	bne.n	8003750 <UART_SetConfig+0xd8>
 8003702:	4b90      	ldr	r3, [pc, #576]	@ (8003944 <UART_SetConfig+0x2cc>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b03      	cmp	r3, #3
 800370e:	d81b      	bhi.n	8003748 <UART_SetConfig+0xd0>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <UART_SetConfig+0xa0>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003729 	.word	0x08003729
 800371c:	08003739 	.word	0x08003739
 8003720:	08003731 	.word	0x08003731
 8003724:	08003741 	.word	0x08003741
 8003728:	2301      	movs	r3, #1
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372e:	e116      	b.n	800395e <UART_SetConfig+0x2e6>
 8003730:	2302      	movs	r3, #2
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003736:	e112      	b.n	800395e <UART_SetConfig+0x2e6>
 8003738:	2304      	movs	r3, #4
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373e:	e10e      	b.n	800395e <UART_SetConfig+0x2e6>
 8003740:	2308      	movs	r3, #8
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003746:	e10a      	b.n	800395e <UART_SetConfig+0x2e6>
 8003748:	2310      	movs	r3, #16
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374e:	e106      	b.n	800395e <UART_SetConfig+0x2e6>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7c      	ldr	r2, [pc, #496]	@ (8003948 <UART_SetConfig+0x2d0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d138      	bne.n	80037cc <UART_SetConfig+0x154>
 800375a:	4b7a      	ldr	r3, [pc, #488]	@ (8003944 <UART_SetConfig+0x2cc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d82d      	bhi.n	80037c4 <UART_SetConfig+0x14c>
 8003768:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <UART_SetConfig+0xf8>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	080037a5 	.word	0x080037a5
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037c5 	.word	0x080037c5
 800377c:	080037c5 	.word	0x080037c5
 8003780:	080037b5 	.word	0x080037b5
 8003784:	080037c5 	.word	0x080037c5
 8003788:	080037c5 	.word	0x080037c5
 800378c:	080037c5 	.word	0x080037c5
 8003790:	080037ad 	.word	0x080037ad
 8003794:	080037c5 	.word	0x080037c5
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037c5 	.word	0x080037c5
 80037a0:	080037bd 	.word	0x080037bd
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e0d8      	b.n	800395e <UART_SetConfig+0x2e6>
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e0d4      	b.n	800395e <UART_SetConfig+0x2e6>
 80037b4:	2304      	movs	r3, #4
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ba:	e0d0      	b.n	800395e <UART_SetConfig+0x2e6>
 80037bc:	2308      	movs	r3, #8
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c2:	e0cc      	b.n	800395e <UART_SetConfig+0x2e6>
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ca:	e0c8      	b.n	800395e <UART_SetConfig+0x2e6>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5e      	ldr	r2, [pc, #376]	@ (800394c <UART_SetConfig+0x2d4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d125      	bne.n	8003822 <UART_SetConfig+0x1aa>
 80037d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003944 <UART_SetConfig+0x2cc>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037e0:	2b30      	cmp	r3, #48	@ 0x30
 80037e2:	d016      	beq.n	8003812 <UART_SetConfig+0x19a>
 80037e4:	2b30      	cmp	r3, #48	@ 0x30
 80037e6:	d818      	bhi.n	800381a <UART_SetConfig+0x1a2>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d00a      	beq.n	8003802 <UART_SetConfig+0x18a>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d814      	bhi.n	800381a <UART_SetConfig+0x1a2>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <UART_SetConfig+0x182>
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d008      	beq.n	800380a <UART_SetConfig+0x192>
 80037f8:	e00f      	b.n	800381a <UART_SetConfig+0x1a2>
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003800:	e0ad      	b.n	800395e <UART_SetConfig+0x2e6>
 8003802:	2302      	movs	r3, #2
 8003804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003808:	e0a9      	b.n	800395e <UART_SetConfig+0x2e6>
 800380a:	2304      	movs	r3, #4
 800380c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003810:	e0a5      	b.n	800395e <UART_SetConfig+0x2e6>
 8003812:	2308      	movs	r3, #8
 8003814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003818:	e0a1      	b.n	800395e <UART_SetConfig+0x2e6>
 800381a:	2310      	movs	r3, #16
 800381c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003820:	e09d      	b.n	800395e <UART_SetConfig+0x2e6>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <UART_SetConfig+0x2d8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d125      	bne.n	8003878 <UART_SetConfig+0x200>
 800382c:	4b45      	ldr	r3, [pc, #276]	@ (8003944 <UART_SetConfig+0x2cc>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003836:	2bc0      	cmp	r3, #192	@ 0xc0
 8003838:	d016      	beq.n	8003868 <UART_SetConfig+0x1f0>
 800383a:	2bc0      	cmp	r3, #192	@ 0xc0
 800383c:	d818      	bhi.n	8003870 <UART_SetConfig+0x1f8>
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d00a      	beq.n	8003858 <UART_SetConfig+0x1e0>
 8003842:	2b80      	cmp	r3, #128	@ 0x80
 8003844:	d814      	bhi.n	8003870 <UART_SetConfig+0x1f8>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <UART_SetConfig+0x1d8>
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	d008      	beq.n	8003860 <UART_SetConfig+0x1e8>
 800384e:	e00f      	b.n	8003870 <UART_SetConfig+0x1f8>
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003856:	e082      	b.n	800395e <UART_SetConfig+0x2e6>
 8003858:	2302      	movs	r3, #2
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e07e      	b.n	800395e <UART_SetConfig+0x2e6>
 8003860:	2304      	movs	r3, #4
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e07a      	b.n	800395e <UART_SetConfig+0x2e6>
 8003868:	2308      	movs	r3, #8
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e076      	b.n	800395e <UART_SetConfig+0x2e6>
 8003870:	2310      	movs	r3, #16
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e072      	b.n	800395e <UART_SetConfig+0x2e6>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a35      	ldr	r2, [pc, #212]	@ (8003954 <UART_SetConfig+0x2dc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d12a      	bne.n	80038d8 <UART_SetConfig+0x260>
 8003882:	4b30      	ldr	r3, [pc, #192]	@ (8003944 <UART_SetConfig+0x2cc>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800388c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003890:	d01a      	beq.n	80038c8 <UART_SetConfig+0x250>
 8003892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003896:	d81b      	bhi.n	80038d0 <UART_SetConfig+0x258>
 8003898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389c:	d00c      	beq.n	80038b8 <UART_SetConfig+0x240>
 800389e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a2:	d815      	bhi.n	80038d0 <UART_SetConfig+0x258>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <UART_SetConfig+0x238>
 80038a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ac:	d008      	beq.n	80038c0 <UART_SetConfig+0x248>
 80038ae:	e00f      	b.n	80038d0 <UART_SetConfig+0x258>
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b6:	e052      	b.n	800395e <UART_SetConfig+0x2e6>
 80038b8:	2302      	movs	r3, #2
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038be:	e04e      	b.n	800395e <UART_SetConfig+0x2e6>
 80038c0:	2304      	movs	r3, #4
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c6:	e04a      	b.n	800395e <UART_SetConfig+0x2e6>
 80038c8:	2308      	movs	r3, #8
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ce:	e046      	b.n	800395e <UART_SetConfig+0x2e6>
 80038d0:	2310      	movs	r3, #16
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d6:	e042      	b.n	800395e <UART_SetConfig+0x2e6>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a17      	ldr	r2, [pc, #92]	@ (800393c <UART_SetConfig+0x2c4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d13a      	bne.n	8003958 <UART_SetConfig+0x2e0>
 80038e2:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <UART_SetConfig+0x2cc>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038f0:	d01a      	beq.n	8003928 <UART_SetConfig+0x2b0>
 80038f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038f6:	d81b      	bhi.n	8003930 <UART_SetConfig+0x2b8>
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fc:	d00c      	beq.n	8003918 <UART_SetConfig+0x2a0>
 80038fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003902:	d815      	bhi.n	8003930 <UART_SetConfig+0x2b8>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <UART_SetConfig+0x298>
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390c:	d008      	beq.n	8003920 <UART_SetConfig+0x2a8>
 800390e:	e00f      	b.n	8003930 <UART_SetConfig+0x2b8>
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003916:	e022      	b.n	800395e <UART_SetConfig+0x2e6>
 8003918:	2302      	movs	r3, #2
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391e:	e01e      	b.n	800395e <UART_SetConfig+0x2e6>
 8003920:	2304      	movs	r3, #4
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003926:	e01a      	b.n	800395e <UART_SetConfig+0x2e6>
 8003928:	2308      	movs	r3, #8
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392e:	e016      	b.n	800395e <UART_SetConfig+0x2e6>
 8003930:	2310      	movs	r3, #16
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003936:	e012      	b.n	800395e <UART_SetConfig+0x2e6>
 8003938:	efff69f3 	.word	0xefff69f3
 800393c:	40008000 	.word	0x40008000
 8003940:	40013800 	.word	0x40013800
 8003944:	40021000 	.word	0x40021000
 8003948:	40004400 	.word	0x40004400
 800394c:	40004800 	.word	0x40004800
 8003950:	40004c00 	.word	0x40004c00
 8003954:	40005000 	.word	0x40005000
 8003958:	2310      	movs	r3, #16
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a9f      	ldr	r2, [pc, #636]	@ (8003be0 <UART_SetConfig+0x568>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d17a      	bne.n	8003a5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003968:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800396c:	2b08      	cmp	r3, #8
 800396e:	d824      	bhi.n	80039ba <UART_SetConfig+0x342>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <UART_SetConfig+0x300>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	0800399d 	.word	0x0800399d
 800397c:	080039bb 	.word	0x080039bb
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039ab 	.word	0x080039ab
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039bb 	.word	0x080039bb
 8003994:	080039bb 	.word	0x080039bb
 8003998:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7fe fc54 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 80039a0:	61f8      	str	r0, [r7, #28]
        break;
 80039a2:	e010      	b.n	80039c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b8f      	ldr	r3, [pc, #572]	@ (8003be4 <UART_SetConfig+0x56c>)
 80039a6:	61fb      	str	r3, [r7, #28]
        break;
 80039a8:	e00d      	b.n	80039c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe fbb5 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80039ae:	61f8      	str	r0, [r7, #28]
        break;
 80039b0:	e009      	b.n	80039c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b6:	61fb      	str	r3, [r7, #28]
        break;
 80039b8:	e005      	b.n	80039c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80fb 	beq.w	8003bc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d305      	bcc.n	80039ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d903      	bls.n	80039f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039f0:	e0e8      	b.n	8003bc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2200      	movs	r2, #0
 80039f6:	461c      	mov	r4, r3
 80039f8:	4615      	mov	r5, r2
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	022b      	lsls	r3, r5, #8
 8003a04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a08:	0222      	lsls	r2, r4, #8
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	6849      	ldr	r1, [r1, #4]
 8003a0e:	0849      	lsrs	r1, r1, #1
 8003a10:	2000      	movs	r0, #0
 8003a12:	4688      	mov	r8, r1
 8003a14:	4681      	mov	r9, r0
 8003a16:	eb12 0a08 	adds.w	sl, r2, r8
 8003a1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	4659      	mov	r1, fp
 8003a30:	f7fc fbd2 	bl	80001d8 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a42:	d308      	bcc.n	8003a56 <UART_SetConfig+0x3de>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a4a:	d204      	bcs.n	8003a56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e0b6      	b.n	8003bc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a5c:	e0b2      	b.n	8003bc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a66:	d15e      	bne.n	8003b26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d828      	bhi.n	8003ac2 <UART_SetConfig+0x44a>
 8003a70:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <UART_SetConfig+0x400>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003ac3 	.word	0x08003ac3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ac3 	.word	0x08003ac3
 8003a90:	08003ac3 	.word	0x08003ac3
 8003a94:	08003ac3 	.word	0x08003ac3
 8003a98:	08003abb 	.word	0x08003abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7fe fbd4 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	61f8      	str	r0, [r7, #28]
        break;
 8003aa2:	e014      	b.n	8003ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f7fe fbe6 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8003aa8:	61f8      	str	r0, [r7, #28]
        break;
 8003aaa:	e010      	b.n	8003ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aac:	4b4d      	ldr	r3, [pc, #308]	@ (8003be4 <UART_SetConfig+0x56c>)
 8003aae:	61fb      	str	r3, [r7, #28]
        break;
 8003ab0:	e00d      	b.n	8003ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab2:	f7fe fb31 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8003ab6:	61f8      	str	r0, [r7, #28]
        break;
 8003ab8:	e009      	b.n	8003ace <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003abe:	61fb      	str	r3, [r7, #28]
        break;
 8003ac0:	e005      	b.n	8003ace <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003acc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d077      	beq.n	8003bc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005a      	lsls	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	441a      	add	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d916      	bls.n	8003b1e <UART_SetConfig+0x4a6>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af6:	d212      	bcs.n	8003b1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f023 030f 	bic.w	r3, r3, #15
 8003b00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	8afb      	ldrh	r3, [r7, #22]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	8afa      	ldrh	r2, [r7, #22]
 8003b1a:	60da      	str	r2, [r3, #12]
 8003b1c:	e052      	b.n	8003bc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b24:	e04e      	b.n	8003bc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d827      	bhi.n	8003b7e <UART_SetConfig+0x506>
 8003b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <UART_SetConfig+0x4bc>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003b7f 	.word	0x08003b7f
 8003b44:	08003b6f 	.word	0x08003b6f
 8003b48:	08003b7f 	.word	0x08003b7f
 8003b4c:	08003b7f 	.word	0x08003b7f
 8003b50:	08003b7f 	.word	0x08003b7f
 8003b54:	08003b77 	.word	0x08003b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7fe fb76 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	61f8      	str	r0, [r7, #28]
        break;
 8003b5e:	e014      	b.n	8003b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b60:	f7fe fb88 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8003b64:	61f8      	str	r0, [r7, #28]
        break;
 8003b66:	e010      	b.n	8003b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b68:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <UART_SetConfig+0x56c>)
 8003b6a:	61fb      	str	r3, [r7, #28]
        break;
 8003b6c:	e00d      	b.n	8003b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe fad3 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8003b72:	61f8      	str	r0, [r7, #28]
        break;
 8003b74:	e009      	b.n	8003b8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b7a:	61fb      	str	r3, [r7, #28]
        break;
 8003b7c:	e005      	b.n	8003b8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b88:	bf00      	nop
    }

    if (pclk != 0U)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d019      	beq.n	8003bc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	085a      	lsrs	r2, r3, #1
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	441a      	add	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d909      	bls.n	8003bbe <UART_SetConfig+0x546>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb0:	d205      	bcs.n	8003bbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	e002      	b.n	8003bc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3728      	adds	r7, #40	@ 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bde:	bf00      	nop
 8003be0:	40008000 	.word	0x40008000
 8003be4:	00f42400 	.word	0x00f42400

08003be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce6:	d10a      	bne.n	8003cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b098      	sub	sp, #96	@ 0x60
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d3c:	f7fc ff3c 	bl	8000bb8 <HAL_GetTick>
 8003d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d12e      	bne.n	8003dae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f88c 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d021      	beq.n	8003dae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e062      	b.n	8003e74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d149      	bne.n	8003e50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f856 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d03c      	beq.n	8003e50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	623b      	str	r3, [r7, #32]
   return(result);
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e6      	bne.n	8003dd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e28:	61fa      	str	r2, [r7, #28]
 8003e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	69b9      	ldr	r1, [r7, #24]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	617b      	str	r3, [r7, #20]
   return(result);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e5      	bne.n	8003e08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e011      	b.n	8003e74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3758      	adds	r7, #88	@ 0x58
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	e04f      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d04b      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e96:	f7fc fe8f 	bl	8000bb8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e04e      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d037      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b80      	cmp	r3, #128	@ 0x80
 8003ec2:	d034      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d031      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d110      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2208      	movs	r2, #8
 8003ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f8ff 	bl	80040e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e029      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f08:	d111      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f8e5 	bl	80040e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e00f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d0a0      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b096      	sub	sp, #88	@ 0x58
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2222      	movs	r2, #34	@ 0x22
 8003f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d028      	beq.n	8003fde <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f90:	4a3e      	ldr	r2, [pc, #248]	@ (800408c <UART_Start_Receive_DMA+0x134>)
 8003f92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f98:	4a3d      	ldr	r2, [pc, #244]	@ (8004090 <UART_Start_Receive_DMA+0x138>)
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa0:	4a3c      	ldr	r2, [pc, #240]	@ (8004094 <UART_Start_Receive_DMA+0x13c>)
 8003fa2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa8:	2200      	movs	r2, #0
 8003faa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3324      	adds	r3, #36	@ 0x24
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	f7fc ffd0 	bl	8000f64 <HAL_DMA_Start_IT>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2210      	movs	r2, #16
 8003fce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e051      	b.n	8004082 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004006:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800400a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004038:	637a      	str	r2, [r7, #52]	@ 0x34
 800403a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800403e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	613b      	str	r3, [r7, #16]
   return(result);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800406c:	623a      	str	r2, [r7, #32]
 800406e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	69f9      	ldr	r1, [r7, #28]
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	61bb      	str	r3, [r7, #24]
   return(result);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3758      	adds	r7, #88	@ 0x58
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	08004263 	.word	0x08004263
 8004090:	0800438f 	.word	0x0800438f
 8004094:	080043cd 	.word	0x080043cd

08004098 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	@ 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	613b      	str	r3, [r7, #16]
   return(result);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80040d8:	bf00      	nop
 80040da:	3724      	adds	r7, #36	@ 0x24
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b095      	sub	sp, #84	@ 0x54
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	643b      	str	r3, [r7, #64]	@ 0x40
 800410c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e6      	bne.n	80040ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	61fb      	str	r3, [r7, #28]
   return(result);
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004140:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	2b01      	cmp	r3, #1
 8004158:	d118      	bne.n	800418c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	60bb      	str	r3, [r7, #8]
   return(result);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f023 0310 	bic.w	r3, r3, #16
 800416e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	613b      	str	r3, [r7, #16]
   return(result);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e6      	bne.n	800415a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041a0:	bf00      	nop
 80041a2:	3754      	adds	r7, #84	@ 0x54
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b090      	sub	sp, #64	@ 0x40
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d137      	bne.n	8004238 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80041c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	623b      	str	r3, [r7, #32]
   return(result);
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	60fb      	str	r3, [r7, #12]
   return(result);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
 800421a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	617b      	str	r3, [r7, #20]
   return(result);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004236:	e002      	b.n	800423e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004238:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800423a:	f7fc f963 	bl	8000504 <HAL_UART_TxCpltCallback>
}
 800423e:	bf00      	nop
 8004240:	3740      	adds	r7, #64	@ 0x40
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff f9e5 	bl	8003624 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b09c      	sub	sp, #112	@ 0x70
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d171      	bne.n	8004362 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800427e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004280:	2200      	movs	r2, #0
 8004282:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800429a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3308      	adds	r3, #8
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80042d8:	647a      	str	r2, [r7, #68]	@ 0x44
 80042da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	623b      	str	r3, [r7, #32]
   return(result);
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004302:	663b      	str	r3, [r7, #96]	@ 0x60
 8004304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800430c:	633a      	str	r2, [r7, #48]	@ 0x30
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004322:	2220      	movs	r2, #32
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432c:	2b01      	cmp	r3, #1
 800432e:	d118      	bne.n	8004362 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	60fb      	str	r3, [r7, #12]
   return(result);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	617b      	str	r3, [r7, #20]
   return(result);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e6      	bne.n	8004330 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004364:	2200      	movs	r2, #0
 8004366:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004372:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004376:	4619      	mov	r1, r3
 8004378:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800437a:	f7ff f971 	bl	8003660 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800437e:	e002      	b.n	8004386 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004380:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004382:	f7fc f8d3 	bl	800052c <HAL_UART_RxCpltCallback>
}
 8004386:	bf00      	nop
 8004388:	3770      	adds	r7, #112	@ 0x70
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d109      	bne.n	80043be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff f952 	bl	8003660 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043bc:	e002      	b.n	80043c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f7ff f93a 	bl	8003638 <HAL_UART_RxHalfCpltCallback>
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b80      	cmp	r3, #128	@ 0x80
 80043f4:	d109      	bne.n	800440a <UART_DMAError+0x3e>
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b21      	cmp	r3, #33	@ 0x21
 80043fa:	d106      	bne.n	800440a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004404:	6978      	ldr	r0, [r7, #20]
 8004406:	f7ff fe47 	bl	8004098 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d109      	bne.n	800442c <UART_DMAError+0x60>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b22      	cmp	r3, #34	@ 0x22
 800441c:	d106      	bne.n	800442c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004426:	6978      	ldr	r0, [r7, #20]
 8004428:	f7ff fe5c 	bl	80040e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004432:	f043 0210 	orr.w	r2, r3, #16
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800443c:	6978      	ldr	r0, [r7, #20]
 800443e:	f7ff f905 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7ff f8ef 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b088      	sub	sp, #32
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	60bb      	str	r3, [r7, #8]
   return(result);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6979      	ldr	r1, [r7, #20]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	613b      	str	r3, [r7, #16]
   return(result);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e6      	bne.n	800447e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc f821 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c2:	bf00      	nop
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <memset>:
 80044de:	4402      	add	r2, r0
 80044e0:	4603      	mov	r3, r0
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d100      	bne.n	80044e8 <memset+0xa>
 80044e6:	4770      	bx	lr
 80044e8:	f803 1b01 	strb.w	r1, [r3], #1
 80044ec:	e7f9      	b.n	80044e2 <memset+0x4>
	...

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004528 <__libc_init_array+0x38>)
 80044f4:	4c0d      	ldr	r4, [pc, #52]	@ (800452c <__libc_init_array+0x3c>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	2600      	movs	r6, #0
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	4d0b      	ldr	r5, [pc, #44]	@ (8004530 <__libc_init_array+0x40>)
 8004502:	4c0c      	ldr	r4, [pc, #48]	@ (8004534 <__libc_init_array+0x44>)
 8004504:	f000 f818 	bl	8004538 <_init>
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	2600      	movs	r6, #0
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	080045a0 	.word	0x080045a0
 800452c:	080045a0 	.word	0x080045a0
 8004530:	080045a0 	.word	0x080045a0
 8004534:	080045a4 	.word	0x080045a4

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
